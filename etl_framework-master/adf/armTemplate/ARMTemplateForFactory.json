{
    "$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "factoryName": {
            "type": "string",
            "metadata": "Data Factory name",
            "defaultValue": "ddfcpmef"
        },
        "ADLS_accountKey": {
            "type": "secureString",
            "metadata": "Secure string for 'accountKey' of 'ADLS'"
        },
        "LadeStationen_password": {
            "type": "secureString",
            "metadata": "Secure string for 'password' of 'LadeStationen'"
        },
        "PL_LogToMattermost_properties_parameters_Channel_defaultValue": {
            "type": "string",
            "defaultValue": "mobi-coreteam"
        },
        "PL_LogToMattermost_properties_parameters_MatterMostWebHookURL_defaultValue": {
            "type": "string",
            "defaultValue": "https://matter.i.mercedes-benz.com/hooks/i5h8ns4trigb5c6ipkwrk314br"
        },
        "PL_PipelineRunStatus_properties_parameters_AzureRestApiUrl_defaultValue": {
            "type": "string",
            "defaultValue": "https://management.azure.com//subscriptions/775f9e05-bbee-446a-aa43-3d2296410d19/resourceGroups/0001-d-cpmef"
        },
        "PL_StartOrStopTrigger_properties_parameters_AzureRestApiUrl_defaultValue": {
            "type": "string",
            "defaultValue": "https://management.azure.com//subscriptions/775f9e05-bbee-446a-aa43-3d2296410d19/resourceGroups/0001-d-cpmef"
        },
        "PL_TriggerCreation_properties_parameters_AzureRestApiUrl_defaultValue": {
            "type": "string",
            "defaultValue": "https://management.azure.com//subscriptions/775f9e05-bbee-446a-aa43-3d2296410d19/resourceGroups/0001-d-cpmef"
        },
        "ADLS_properties_typeProperties_url": {
            "type": "string",
            "defaultValue": "https://sqlvaqk6s27cspupcm.dfs.core.windows.net"
        },
        "LS_ADB_properties_typeProperties_domain": {
            "type": "string",
            "defaultValue": "https://adb-8731781706562404.4.azuredatabricks.net"
        },
        "LS_ADB_properties_typeProperties_workspaceResourceId": {
            "type": "string",
            "defaultValue": "/subscriptions/775f9e05-bbee-446a-aa43-3d2296410d19/resourceGroups/0001-d-cpmef/providers/Microsoft.Databricks/workspaces/ddxcpmef"
        },
        "LS_adls_properties_typeProperties_url": {
            "type": "string",
            "defaultValue": "@{linkedService().InstanceURL}"
        },
        "LS_configurationDB_properties_typeProperties_connectionString_secretName": {
            "type": "string",
            "defaultValue": "dbconfig"
        },
        "LS_databricks_properties_parameters_ClusterId_defaultValue": {
            "type": "string",
            "defaultValue": "0214-064848-zi0j9fjh"
        },
        "LS_databricks_properties_typeProperties_domain": {
            "type": "string",
            "defaultValue": "https://adb-8731781706562404.4.azuredatabricks.net"
        },
        "LS_databricks_properties_typeProperties_workspaceResourceId": {
            "type": "string",
            "defaultValue": "/subscriptions/775f9e05-bbee-446a-aa43-3d2296410d19/resourceGroups/0001-d-cpmef/providers/Microsoft.Databricks/workspaces/ddxcpmef"
        },
        "LS_databricks_properties_typeProperties_existingClusterId": {
            "type": "string",
            "defaultValue": "@linkedService().ClusterId"
        },
        "LS_keyvault_properties_typeProperties_baseUrl": {
            "type": "string",
            "defaultValue": "https://dkvcpmef.vault.azure.net/"
        },
        "LS_odata_properties_typeProperties_url": {
            "type": "string",
            "defaultValue": "@{linkedService().ServiceUrl}"
        },
        "LS_oracledatabase_properties_typeProperties_connectionString_secretName": {
            "type": "string",
            "defaultValue": "@linkedService().SecretName"
        },
        "LS_snowflake_properties_typeProperties_connectionString_secretName": {
            "type": "string",
            "defaultValue": "@linkedService().ConnectionString"
        },
        "LS_sqldatabase_properties_typeProperties_connectionString_secretName": {
            "type": "string",
            "defaultValue": "@linkedService().SecretName"
        },
        "LS_sqlonpremdatabase_properties_typeProperties_connectionString_secretName": {
            "type": "string",
            "defaultValue": "@linkedService().SecretName"
        },
        "LadeStationen_properties_typeProperties_url": {
            "type": "string",
            "defaultValue": "https://data.geo.admin.ch/ch.bfe.ladestellen-elektromobilitaet/status/oicp/ch.bfe.ladestellen-elektromobilitaet.json"
        },
        "SHIR_properties_typeProperties_linkedInfo_resourceId": {
            "type": "string",
            "defaultValue": "/subscriptions/5c9d5542-5f6e-425f-a7b4-edc59c9f83a0/resourcegroups/dev-rg-hub-shir-emea/providers/Microsoft.DataFactory/factories/dev-adf-hub-emea/integrationruntimes/dev-adf-shir-hub-emea"
        }
    },
    "variables": {
        "factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
    },
    "resources": [
        {
            "name": "[concat(parameters('factoryName'), '/PL_COG_01_GenerateConfig')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "DT_RunConfigGeneratorNotebook",
                        "type": "DatabricksNotebook",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "notebookPath": {
                                "value": "@concat('/Code/mdmf/generator/', pipeline().parameters.NotebookName)",
                                "type": "Expression"
                            },
                            "baseParameters": {
                                "ForceConfigGeneration": {
                                    "value": "@string(equals(pipeline().parameters.GenerateConfigParameter, 'Full'))",
                                    "type": "Expression"
                                },
                                "FwkLogParameters": {
                                    "value": "@concat(\n'{\"EntRunId\": \"',pipeline().parameters.EntRunId,'\",\"Module\":\"Config Generation - ', pipeline().parameters.NotebookName,'\",\"ModuleRunId\":\"',pipeline().RunId,'\",\"StartDate\":\"',formatdatetime(pipeline().TriggerTime),'\",\"AdfTriggerName\":\"None\"}')\n",
                                    "type": "Expression"
                                }
                            }
                        },
                        "linkedServiceName": {
                            "referenceName": "LS_databricks",
                            "type": "LinkedServiceReference",
                            "parameters": {
                                "ClusterId": "0214-064848-zi0j9fjh"
                            }
                        }
                    },
                    {
                        "name": "If Column Change Log exists",
                        "type": "IfCondition",
                        "dependsOn": [
                            {
                                "activity": "DT_RunConfigGeneratorNotebook",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "expression": {
                                "value": "@empty(activity('DT_RunConfigGeneratorNotebook').output.runOutput['ColumnChangeLogs'])",
                                "type": "Expression"
                            },
                            "ifFalseActivities": [
                                {
                                    "name": "Log ETL Metadata Execution Column Changes To Mattermost",
                                    "type": "ExecutePipeline",
                                    "dependsOn": [],
                                    "policy": {
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "pipeline": {
                                            "referenceName": "PL_LogToMattermost",
                                            "type": "PipelineReference"
                                        },
                                        "waitOnCompletion": true,
                                        "parameters": {
                                            "Message": {
                                                "value": "@concat('Execution of pipeline ''PL_COG_01_GenerateConfig'' responsible for generating ETL configuration has found changes: \\n', activity('DT_RunConfigGeneratorNotebook').output.runOutput['ColumnChangeLogs'])",
                                                "type": "Expression"
                                            },
                                            "EntRunId": {
                                                "value": "@pipeline().parameters.EntRunId",
                                                "type": "Expression"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "name": "If TrigerCreration pipeline runs",
                        "type": "IfCondition",
                        "dependsOn": [
                            {
                                "activity": "DT_RunConfigGeneratorNotebook",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "expression": {
                                "value": "@equals(activity('DT_RunConfigGeneratorNotebook').output.runOutput['ExecuteTriggerCreationPipeline'], 'True')",
                                "type": "Expression"
                            },
                            "ifTrueActivities": [
                                {
                                    "name": "Execute PL_TriggerCreation",
                                    "type": "ExecutePipeline",
                                    "dependsOn": [],
                                    "policy": {
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "pipeline": {
                                            "referenceName": "PL_TriggerCreation",
                                            "type": "PipelineReference"
                                        },
                                        "waitOnCompletion": true,
                                        "parameters": {}
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "name": "UpdateNotebookExecutionLog",
                        "type": "Lookup",
                        "dependsOn": [
                            {
                                "activity": "DT_RunConfigGeneratorNotebook",
                                "dependencyConditions": [
                                    "Failed"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "0.12:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "AzureDatabricksDeltaLakeSource",
                                "query": {
                                    "value": "@concat(\n    'UPDATE ', pipeline().globalParameters.MetadataDB, '.FwkLog ',\n    'SET PipelineStatus = ''Failed'', EndDate = ''', formatDateTime(utcnow()), '''',\n    ' LastUpdate = ''', formatDateTime(utcnow()), '''',\n    ' JobRunUrl = ''', activity('DT_RunConfigGeneratorNotebook').output.runPageUrl, '''',\n    ' ErrorMessage = ''', activity('DT_RunConfigGeneratorNotebook').output.errors[0].Message, '''',\n    ' WHERE ModuleRunId = ''', pipeline().RunId, '''' \n)",
                                    "type": "Expression"
                                }
                            },
                            "dataset": {
                                "referenceName": "DS_ADB_Delta",
                                "type": "DatasetReference",
                                "parameters": {}
                            },
                            "firstRowOnly": false
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {}
                },
                "parameters": {
                    "EntRunId": {
                        "type": "string"
                    },
                    "NotebookName": {
                        "type": "string"
                    },
                    "GenerateConfigParameter": {
                        "type": "string"
                    }
                },
                "folder": {
                    "name": "00 Config Generator Module"
                },
                "annotations": [],
                "lastPublishTime": "2023-07-06T08:29:15Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/LS_databricks')]",
                "[concat(variables('factoryId'), '/datasets/DS_ADB_Delta')]",
                "[concat(variables('factoryId'), '/pipelines/PL_LogToMattermost')]",
                "[concat(variables('factoryId'), '/pipelines/PL_TriggerCreation')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/PL_COG_02_PopulateConfigTable_FullReplace')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Copy CSV to SQL Configuration DB",
                        "type": "Copy",
                        "dependsOn": [
                            {
                                "activity": "sp_FwkLogInsert",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "DelimitedTextSource",
                                "storeSettings": {
                                    "type": "AzureBlobFSReadSettings",
                                    "recursive": true,
                                    "enablePartitionDiscovery": false
                                },
                                "formatSettings": {
                                    "type": "DelimitedTextReadSettings"
                                }
                            },
                            "sink": {
                                "type": "AzureSqlSink",
                                "preCopyScript": {
                                    "value": "@{replace(concat('truncate table ', pipeline().parameters.FileName),'.csv', '')}",
                                    "type": "Expression"
                                },
                                "writeBehavior": "insert",
                                "sqlWriterUseTableLock": false,
                                "disableMetricsCollection": false
                            },
                            "enableStaging": false,
                            "translator": {
                                "type": "TabularTranslator",
                                "typeConversion": true,
                                "typeConversionSettings": {
                                    "allowDataTruncation": true,
                                    "treatBooleanAsNumber": false
                                }
                            }
                        },
                        "inputs": [
                            {
                                "referenceName": "DS_CSV_Configuration",
                                "type": "DatasetReference",
                                "parameters": {
                                    "InstanceURL": {
                                        "value": "@pipeline().parameters.InstanceURL",
                                        "type": "Expression"
                                    },
                                    "FullPath": {
                                        "value": "@pipeline().parameters.FullPath",
                                        "type": "Expression"
                                    },
                                    "FileName": {
                                        "value": "@pipeline().parameters.FileName",
                                        "type": "Expression"
                                    }
                                }
                            }
                        ],
                        "outputs": [
                            {
                                "referenceName": "DS_SQL_Configuration_all",
                                "type": "DatasetReference",
                                "parameters": {
                                    "FileName": {
                                        "value": "@{replace(pipeline().parameters.FileName, '.csv', '')}",
                                        "type": "Expression"
                                    }
                                }
                            }
                        ]
                    },
                    {
                        "name": "sp_FwkLogInsert",
                        "description": "Executes the SP spi_FwkLogInsert to insert record into FwkLog table with the execution module information by pipeline id and with null status.",
                        "type": "SqlServerStoredProcedure",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "storedProcedureName": "[[dbo].[spi_FwkLogInsert]",
                            "storedProcedureParameters": {
                                "EntRunId": {
                                    "value": {
                                        "value": "@pipeline().parameters.EntRunId",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                },
                                "Module": {
                                    "value": {
                                        "value": "@concat('Config Generation > ', replace(pipeline().parameters.FileName,'.csv',''))",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                },
                                "ModuleRunId": {
                                    "value": {
                                        "value": "@pipeline().RunId",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                },
                                "StartDate": {
                                    "value": {
                                        "value": "@formatdatetime(pipeline().TriggerTime)",
                                        "type": "Expression"
                                    },
                                    "type": "DateTime"
                                },
                                "ADFTriggerName": {
                                    "value": null,
                                    "type": "String"
                                }
                            }
                        },
                        "linkedServiceName": {
                            "referenceName": "LS_configurationDB",
                            "type": "LinkedServiceReference"
                        }
                    },
                    {
                        "name": "sp_UpdateExecutionLog_succeeded",
                        "description": "Executes the SP spu_FwkLogUpdate to update the record created by the ‘InsertIntoFwkLog’ activity in the table ‘FwkLog’ by updating the columns ‘PipelineStatus’ to ‘Success’.",
                        "type": "SqlServerStoredProcedure",
                        "dependsOn": [
                            {
                                "activity": "Copy CSV to SQL Configuration DB",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "storedProcedureName": "[[dbo].[spu_FwkLogUpdate]",
                            "storedProcedureParameters": {
                                "ModuleRunId": {
                                    "value": {
                                        "value": "@pipeline().RunId",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                },
                                "PipelineStatus": {
                                    "value": {
                                        "value": "@if(greater(activity('Copy CSV to SQL Configuration DB').output.rowsCopied, 0), 'Succeeded', 'Skipped')",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                },
                                "JobRunUrl": {
                                    "value": null,
                                    "type": "String"
                                },
                                "ErrorMessage": {
                                    "value": null,
                                    "type": "String"
                                }
                            }
                        },
                        "linkedServiceName": {
                            "referenceName": "LS_configurationDB",
                            "type": "LinkedServiceReference"
                        }
                    },
                    {
                        "name": "sp_UpdateExecutionLog_failed",
                        "description": "Executes the SP spu_FwkLogUpdate to update the record created by the ‘InsertIntoFwkLog’ activity in the table ‘FwkLog’ by updating the columns ‘PipelineStatus’ to ‘Success’.",
                        "type": "SqlServerStoredProcedure",
                        "dependsOn": [
                            {
                                "activity": "Copy CSV to SQL Configuration DB",
                                "dependencyConditions": [
                                    "Failed"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "storedProcedureName": "[[dbo].[spu_FwkLogUpdate]",
                            "storedProcedureParameters": {
                                "ModuleRunId": {
                                    "value": {
                                        "value": "@pipeline().RunId",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                },
                                "PipelineStatus": {
                                    "value": {
                                        "value": "Failed",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                },
                                "JobRunUrl": {
                                    "value": null,
                                    "type": "String"
                                },
                                "ErrorMessage": {
                                    "value": {
                                        "value": "@if(\n    and(\n        contains(activity('Copy CSV to SQL Configuration DB').output, 'errors'),\n        greater(length(activity('Copy CSV to SQL Configuration DB').output.errors), 0)\n    ),\n    activity('Copy CSV to SQL Configuration DB').output.errors[0].Message,\n    null\n)",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                }
                            }
                        },
                        "linkedServiceName": {
                            "referenceName": "LS_configurationDB",
                            "type": "LinkedServiceReference"
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {}
                },
                "parameters": {
                    "InstanceURL": {
                        "type": "string"
                    },
                    "FullPath": {
                        "type": "string"
                    },
                    "FileName": {
                        "type": "string"
                    },
                    "EntRunId": {
                        "type": "string"
                    }
                },
                "folder": {
                    "name": "00 Config Generator Module"
                },
                "annotations": [],
                "lastPublishTime": "2023-07-06T08:29:13Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/datasets/DS_CSV_Configuration')]",
                "[concat(variables('factoryId'), '/datasets/DS_SQL_Configuration_all')]",
                "[concat(variables('factoryId'), '/linkedServices/LS_configurationDB')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/PL_COG_02_PopulateConfigTable_UpdateInsert')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Copy Parquet to SQL Configuration DB",
                        "type": "Copy",
                        "dependsOn": [
                            {
                                "activity": "sp_FwkLogInsert",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "ParquetSource",
                                "storeSettings": {
                                    "type": "AzureBlobFSReadSettings",
                                    "recursive": true,
                                    "wildcardFileName": "*.parquet",
                                    "enablePartitionDiscovery": false
                                },
                                "formatSettings": {
                                    "type": "ParquetReadSettings"
                                }
                            },
                            "sink": {
                                "type": "AzureSqlSink",
                                "preCopyScript": {
                                    "value": "@{concat(\n    'UPDATE ',\n    pipeline().parameters.FolderName,\n    ' SET LastUpdate = CAST(''', utcNow(),''' AS DATETIME2), ActiveFlag = ''N'' WHERE ActiveFlag = ''Y'' AND (FwkSourceEntityId ',\n    if(pipeline().parameters.MetadataProcessing, 'LIKE ''sys.%'')', 'IS NULL OR FwkSourceEntityId NOT LIKE ''sys.%'')')\n)}",
                                    "type": "Expression"
                                },
                                "writeBehavior": "insert",
                                "sqlWriterUseTableLock": false,
                                "disableMetricsCollection": false
                            },
                            "enableStaging": false,
                            "translator": {
                                "type": "TabularTranslator",
                                "typeConversion": true,
                                "typeConversionSettings": {
                                    "allowDataTruncation": true,
                                    "treatBooleanAsNumber": false
                                }
                            }
                        },
                        "inputs": [
                            {
                                "referenceName": "DS_Parquet_Configuration",
                                "type": "DatasetReference",
                                "parameters": {
                                    "InstanceURL": {
                                        "value": "@pipeline().parameters.InstanceURL",
                                        "type": "Expression"
                                    },
                                    "FullPath": {
                                        "value": "@pipeline().parameters.FullPath",
                                        "type": "Expression"
                                    },
                                    "FolderName": {
                                        "value": "@pipeline().parameters.FolderName",
                                        "type": "Expression"
                                    }
                                }
                            }
                        ],
                        "outputs": [
                            {
                                "referenceName": "DS_SQL_Configuration_all",
                                "type": "DatasetReference",
                                "parameters": {
                                    "FileName": {
                                        "value": "@{pipeline().parameters.FolderName}",
                                        "type": "Expression"
                                    }
                                }
                            }
                        ]
                    },
                    {
                        "name": "sp_FwkLogInsert",
                        "description": "Executes the SP spi_FwkLogInsert to insert record into FwkLog table with the execution module information by pipeline id and with null status.",
                        "type": "SqlServerStoredProcedure",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "storedProcedureName": "[[dbo].[spi_FwkLogInsert]",
                            "storedProcedureParameters": {
                                "EntRunId": {
                                    "value": {
                                        "value": "@pipeline().parameters.EntRunId",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                },
                                "Module": {
                                    "value": {
                                        "value": "@concat('Config Generation > ', pipeline().parameters.FolderName)",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                },
                                "ModuleRunId": {
                                    "value": {
                                        "value": "@pipeline().RunId",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                },
                                "StartDate": {
                                    "value": {
                                        "value": "@formatdatetime(pipeline().TriggerTime)",
                                        "type": "Expression"
                                    },
                                    "type": "DateTime"
                                },
                                "ADFTriggerName": {
                                    "value": null,
                                    "type": "String"
                                }
                            }
                        },
                        "linkedServiceName": {
                            "referenceName": "LS_configurationDB",
                            "type": "LinkedServiceReference"
                        }
                    },
                    {
                        "name": "sp_UpdateExecutionLog_succeeded",
                        "description": "Executes the SP spu_FwkLogUpdate to update the record created by the ‘InsertIntoFwkLog’ activity in the table ‘FwkLog’ by updating the columns ‘PipelineStatus’ to ‘Success’.",
                        "type": "SqlServerStoredProcedure",
                        "dependsOn": [
                            {
                                "activity": "Copy Parquet to SQL Configuration DB",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "storedProcedureName": "[[dbo].[spu_FwkLogUpdate]",
                            "storedProcedureParameters": {
                                "ModuleRunId": {
                                    "value": {
                                        "value": "@pipeline().RunId",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                },
                                "PipelineStatus": {
                                    "value": {
                                        "value": "@if(greater(activity('Copy Parquet to SQL Configuration DB').output.rowsCopied, 0), 'Succeeded', 'Skipped')",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                },
                                "JobRunUrl": {
                                    "value": null,
                                    "type": "String"
                                },
                                "ErrorMessage": {
                                    "value": null,
                                    "type": "String"
                                }
                            }
                        },
                        "linkedServiceName": {
                            "referenceName": "LS_configurationDB",
                            "type": "LinkedServiceReference"
                        }
                    },
                    {
                        "name": "sp_UpdateExecutionLog_failed",
                        "description": "Executes the SP spu_FwkLogUpdate to update the record created by the ‘InsertIntoFwkLog’ activity in the table ‘FwkLog’ by updating the columns ‘PipelineStatus’ to ‘Success’.",
                        "type": "SqlServerStoredProcedure",
                        "dependsOn": [
                            {
                                "activity": "Copy Parquet to SQL Configuration DB",
                                "dependencyConditions": [
                                    "Failed"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "storedProcedureName": "[[dbo].[spu_FwkLogUpdate]",
                            "storedProcedureParameters": {
                                "ModuleRunId": {
                                    "value": {
                                        "value": "@pipeline().RunId",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                },
                                "PipelineStatus": {
                                    "value": {
                                        "value": "Failed",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                },
                                "JobRunUrl": {
                                    "value": null,
                                    "type": "String"
                                },
                                "ErrorMessage": {
                                    "value": {
                                        "value": "@if(\n    and(\n        contains(activity('Copy Parquet to SQL Configuration DB').output, 'errors'),\n        greater(length(activity('Copy Parquet to SQL Configuration DB').output.errors), 0)\n    ),\n    activity('Copy Parquet to SQL Configuration DB').output.errors[0].Message,\n    null\n)",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                }
                            }
                        },
                        "linkedServiceName": {
                            "referenceName": "LS_configurationDB",
                            "type": "LinkedServiceReference"
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {}
                },
                "parameters": {
                    "InstanceURL": {
                        "type": "string"
                    },
                    "FullPath": {
                        "type": "string"
                    },
                    "FolderName": {
                        "type": "string"
                    },
                    "EntRunId": {
                        "type": "string"
                    },
                    "MetadataProcessing": {
                        "type": "bool"
                    }
                },
                "folder": {
                    "name": "00 Config Generator Module"
                },
                "annotations": [],
                "lastPublishTime": "2023-07-06T08:29:14Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/datasets/DS_Parquet_Configuration')]",
                "[concat(variables('factoryId'), '/datasets/DS_SQL_Configuration_all')]",
                "[concat(variables('factoryId'), '/linkedServices/LS_configurationDB')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/PL_COG_02_PopulateConfigTable_UpsertOnFwkEntity')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Copy Parquet to SQL Configuration DB",
                        "type": "Copy",
                        "dependsOn": [
                            {
                                "activity": "sp_FwkLogInsert",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "ParquetSource",
                                "storeSettings": {
                                    "type": "AzureBlobFSReadSettings",
                                    "recursive": true,
                                    "wildcardFileName": "*.parquet",
                                    "enablePartitionDiscovery": false
                                },
                                "formatSettings": {
                                    "type": "ParquetReadSettings"
                                }
                            },
                            "sink": {
                                "type": "AzureSqlSink",
                                "writeBehavior": "upsert",
                                "upsertSettings": {
                                    "useTempDB": true,
                                    "keys": [
                                        "FwkEntityId"
                                    ]
                                },
                                "sqlWriterUseTableLock": false,
                                "disableMetricsCollection": false
                            },
                            "enableStaging": false,
                            "translator": {
                                "type": "TabularTranslator",
                                "typeConversion": true,
                                "typeConversionSettings": {
                                    "allowDataTruncation": true,
                                    "treatBooleanAsNumber": false
                                }
                            }
                        },
                        "inputs": [
                            {
                                "referenceName": "DS_Parquet_Configuration",
                                "type": "DatasetReference",
                                "parameters": {
                                    "InstanceURL": {
                                        "value": "@pipeline().parameters.InstanceURL",
                                        "type": "Expression"
                                    },
                                    "FullPath": {
                                        "value": "@pipeline().parameters.FullPath",
                                        "type": "Expression"
                                    },
                                    "FolderName": {
                                        "value": "@pipeline().parameters.FolderName",
                                        "type": "Expression"
                                    }
                                }
                            }
                        ],
                        "outputs": [
                            {
                                "referenceName": "DS_SQL_Configuration_all",
                                "type": "DatasetReference",
                                "parameters": {
                                    "FileName": {
                                        "value": "@{pipeline().parameters.FolderName}",
                                        "type": "Expression"
                                    }
                                }
                            }
                        ]
                    },
                    {
                        "name": "sp_FwkLogInsert",
                        "description": "Executes the SP spi_FwkLogInsert to insert record into FwkLog table with the execution module information by pipeline id and with null status.",
                        "type": "SqlServerStoredProcedure",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "storedProcedureName": "[[dbo].[spi_FwkLogInsert]",
                            "storedProcedureParameters": {
                                "EntRunId": {
                                    "value": {
                                        "value": "@pipeline().parameters.EntRunId",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                },
                                "Module": {
                                    "value": {
                                        "value": "@concat('Config Generation > ', pipeline().parameters.FolderName)",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                },
                                "ModuleRunId": {
                                    "value": {
                                        "value": "@pipeline().RunId",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                },
                                "StartDate": {
                                    "value": {
                                        "value": "@formatdatetime(pipeline().TriggerTime)",
                                        "type": "Expression"
                                    },
                                    "type": "DateTime"
                                },
                                "ADFTriggerName": {
                                    "value": null,
                                    "type": "String"
                                }
                            }
                        },
                        "linkedServiceName": {
                            "referenceName": "LS_configurationDB",
                            "type": "LinkedServiceReference"
                        }
                    },
                    {
                        "name": "sp_UpdateExecutionLog_succeeded",
                        "description": "Executes the SP spu_FwkLogUpdate to update the record created by the ‘InsertIntoFwkLog’ activity in the table ‘FwkLog’ by updating the columns ‘PipelineStatus’ to ‘Success’.",
                        "type": "SqlServerStoredProcedure",
                        "dependsOn": [
                            {
                                "activity": "Copy Parquet to SQL Configuration DB",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "storedProcedureName": "[[dbo].[spu_FwkLogUpdate]",
                            "storedProcedureParameters": {
                                "ModuleRunId": {
                                    "value": {
                                        "value": "@pipeline().RunId",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                },
                                "PipelineStatus": {
                                    "value": {
                                        "value": "@if(greater(activity('Copy Parquet to SQL Configuration DB').output.rowsCopied, 0), 'Succeeded', 'Skipped')",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                },
                                "JobRunUrl": {
                                    "value": null,
                                    "type": "String"
                                },
                                "ErrorMessage": {
                                    "value": null,
                                    "type": "String"
                                }
                            }
                        },
                        "linkedServiceName": {
                            "referenceName": "LS_configurationDB",
                            "type": "LinkedServiceReference"
                        }
                    },
                    {
                        "name": "sp_UpdateExecutionLog_failed",
                        "description": "Executes the SP spu_FwkLogUpdate to update the record created by the ‘InsertIntoFwkLog’ activity in the table ‘FwkLog’ by updating the columns ‘PipelineStatus’ to ‘Success’.",
                        "type": "SqlServerStoredProcedure",
                        "dependsOn": [
                            {
                                "activity": "Copy Parquet to SQL Configuration DB",
                                "dependencyConditions": [
                                    "Failed"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "storedProcedureName": "[[dbo].[spu_FwkLogUpdate]",
                            "storedProcedureParameters": {
                                "ModuleRunId": {
                                    "value": {
                                        "value": "@pipeline().RunId",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                },
                                "PipelineStatus": {
                                    "value": {
                                        "value": "Failed",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                },
                                "JobRunUrl": {
                                    "value": null,
                                    "type": "String"
                                },
                                "ErrorMessage": {
                                    "value": {
                                        "value": "@if(\n    and(\n        contains(activity('Copy Parquet to SQL Configuration DB').output, 'errors'),\n        greater(length(activity('Copy Parquet to SQL Configuration DB').output.errors), 0)\n    ),\n    activity('Copy Parquet to SQL Configuration DB').output.errors[0].Message,\n    null\n)",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                }
                            }
                        },
                        "linkedServiceName": {
                            "referenceName": "LS_configurationDB",
                            "type": "LinkedServiceReference"
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {}
                },
                "parameters": {
                    "InstanceURL": {
                        "type": "string"
                    },
                    "FullPath": {
                        "type": "string"
                    },
                    "FolderName": {
                        "type": "string"
                    },
                    "EntRunId": {
                        "type": "string"
                    }
                },
                "folder": {
                    "name": "00 Config Generator Module"
                },
                "annotations": [],
                "lastPublishTime": "2023-07-06T08:29:13Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/datasets/DS_Parquet_Configuration')]",
                "[concat(variables('factoryId'), '/datasets/DS_SQL_Configuration_all')]",
                "[concat(variables('factoryId'), '/linkedServices/LS_configurationDB')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/PL_ETLPipeline')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Execute Ingestion Master",
                        "type": "ExecutePipeline",
                        "dependsOn": [],
                        "policy": {
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "PL_ING_00_IngestionMaster",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {
                                "EntRunId": {
                                    "value": "@pipeline().parameters.EntRunId",
                                    "type": "Expression"
                                },
                                "EntTriggerTime": {
                                    "value": "@pipeline().parameters.EntTriggerTime",
                                    "type": "Expression"
                                },
                                "FwkTriggerId": {
                                    "value": "@pipeline().parameters.FwkTriggerId",
                                    "type": "Expression"
                                },
                                "FwkLayerId": {
                                    "value": "@pipeline().parameters.FwkLayerId",
                                    "type": "Expression"
                                },
                                "ADFTriggerName": {
                                    "value": "@pipeline().parameters.ADFTriggerName",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    {
                        "name": "Log Ingestion Failure To Mattermost",
                        "type": "ExecutePipeline",
                        "dependsOn": [
                            {
                                "activity": "Execute Ingestion Master",
                                "dependencyConditions": [
                                    "Failed"
                                ]
                            }
                        ],
                        "policy": {
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "PL_LogToMattermost",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {
                                "Message": "Execution of pipeline 'PL_ING_01_ProcessIngestion' responsible for ingestion of data has failed",
                                "EntRunId": {
                                    "value": "@pipeline().parameters.EntRunId",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    {
                        "name": "Set continueETL after Ingestion",
                        "type": "SetVariable",
                        "dependsOn": [
                            {
                                "activity": "Execute Ingestion Master",
                                "dependencyConditions": [
                                    "Completed"
                                ]
                            }
                        ],
                        "policy": {
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "variableName": "varContinueETL",
                            "value": {
                                "value": "@activity('Execute Ingestion Master').output.pipelineReturnValue['outputContinueETL']",
                                "type": "Expression"
                            }
                        }
                    },
                    {
                        "name": "If continueETL with Transformation",
                        "type": "IfCondition",
                        "dependsOn": [
                            {
                                "activity": "Set continueETL after Ingestion",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "expression": {
                                "value": "@variables('varContinueETL')",
                                "type": "Expression"
                            },
                            "ifTrueActivities": [
                                {
                                    "name": "Execute Transformation Master",
                                    "type": "ExecutePipeline",
                                    "dependsOn": [],
                                    "policy": {
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "pipeline": {
                                            "referenceName": "PL_TRN_00_TransformationMaster",
                                            "type": "PipelineReference"
                                        },
                                        "waitOnCompletion": true,
                                        "parameters": {
                                            "EntRunId": {
                                                "value": "@pipeline().parameters.EntRunId",
                                                "type": "Expression"
                                            },
                                            "EntTriggerTime": {
                                                "value": "@pipeline().parameters.EntTriggerTime",
                                                "type": "Expression"
                                            },
                                            "FwkTriggerId": {
                                                "value": "@pipeline().parameters.FwkTriggerId",
                                                "type": "Expression"
                                            },
                                            "FwkLayerId": {
                                                "value": "@pipeline().parameters.FwkLayerId",
                                                "type": "Expression"
                                            },
                                            "ADFTriggerName": {
                                                "value": "@pipeline().parameters.ADFTriggerName",
                                                "type": "Expression"
                                            }
                                        }
                                    }
                                },
                                {
                                    "name": "Log Transformation Failure To Mattermost",
                                    "type": "ExecutePipeline",
                                    "dependsOn": [
                                        {
                                            "activity": "Execute Transformation Master",
                                            "dependencyConditions": [
                                                "Failed"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "pipeline": {
                                            "referenceName": "PL_LogToMattermost",
                                            "type": "PipelineReference"
                                        },
                                        "waitOnCompletion": true,
                                        "parameters": {
                                            "Message": "Execution of pipeline 'PL_TRN_01_ProcessTransformations' responsible for data transformation has failed",
                                            "EntRunId": {
                                                "value": "@pipeline().parameters.EntRunId",
                                                "type": "Expression"
                                            }
                                        }
                                    }
                                },
                                {
                                    "name": "Set continueETL after Transformation",
                                    "type": "SetVariable",
                                    "dependsOn": [
                                        {
                                            "activity": "Execute Transformation Master",
                                            "dependencyConditions": [
                                                "Completed"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "variableName": "varContinueETL",
                                        "value": {
                                            "value": "@activity('Execute Transformation Master').output.pipelineReturnValue['outputContinueETL']",
                                            "type": "Expression"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "name": "If continueETL with Export",
                        "type": "IfCondition",
                        "dependsOn": [
                            {
                                "activity": "If continueETL with Transformation",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "expression": {
                                "value": "@variables('varContinueETL')",
                                "type": "Expression"
                            },
                            "ifTrueActivities": [
                                {
                                    "name": "Execute Export Master",
                                    "type": "ExecutePipeline",
                                    "dependsOn": [],
                                    "policy": {
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "pipeline": {
                                            "referenceName": "PL_EXP_00_ExportMaster",
                                            "type": "PipelineReference"
                                        },
                                        "waitOnCompletion": true,
                                        "parameters": {
                                            "EntRunId": {
                                                "value": "@pipeline().parameters.EntRunId",
                                                "type": "Expression"
                                            },
                                            "EntTriggerTime": {
                                                "value": "@pipeline().parameters.EntTriggerTime",
                                                "type": "Expression"
                                            },
                                            "FwkTriggerId": {
                                                "value": "@pipeline().parameters.FwkTriggerId",
                                                "type": "Expression"
                                            }
                                        }
                                    }
                                },
                                {
                                    "name": "Log Export Failure To Mattermost",
                                    "type": "ExecutePipeline",
                                    "dependsOn": [
                                        {
                                            "activity": "Execute Export Master",
                                            "dependencyConditions": [
                                                "Failed"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "pipeline": {
                                            "referenceName": "PL_LogToMattermost",
                                            "type": "PipelineReference"
                                        },
                                        "waitOnCompletion": true,
                                        "parameters": {
                                            "Message": "Execution of pipeline 'PL_EXP_01_Export' responsible for data export has failed",
                                            "EntRunId": {
                                                "value": "@pipeline().parameters.EntRunId",
                                                "type": "Expression"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {}
                },
                "parameters": {
                    "EntRunId": {
                        "type": "string"
                    },
                    "EntTriggerTime": {
                        "type": "string"
                    },
                    "FwkTriggerId": {
                        "type": "string"
                    },
                    "FwkLayerId": {
                        "type": "string"
                    },
                    "ADFTriggerName": {
                        "type": "string"
                    }
                },
                "variables": {
                    "varContinueETL": {
                        "type": "Boolean",
                        "defaultValue": true
                    }
                },
                "annotations": [],
                "lastPublishTime": "2023-07-06T08:29:21Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/pipelines/PL_ING_00_IngestionMaster')]",
                "[concat(variables('factoryId'), '/pipelines/PL_LogToMattermost')]",
                "[concat(variables('factoryId'), '/pipelines/PL_TRN_00_TransformationMaster')]",
                "[concat(variables('factoryId'), '/pipelines/PL_EXP_00_ExportMaster')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/PL_ETLPipeline_Parallel')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Until pipeline has finished running",
                        "type": "Until",
                        "dependsOn": [],
                        "userProperties": [],
                        "typeProperties": {
                            "expression": {
                                "value": "@equals(variables('ContinueWithETLPipelineRun'), true)",
                                "type": "Expression"
                            },
                            "activities": [
                                {
                                    "name": "Execute Is Pipeline Running",
                                    "type": "ExecutePipeline",
                                    "dependsOn": [],
                                    "policy": {
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "pipeline": {
                                            "referenceName": "PL_PipelineRunStatus",
                                            "type": "PipelineReference"
                                        },
                                        "waitOnCompletion": true,
                                        "parameters": {
                                            "CancelIfAlreadyRunning": {
                                                "value": "@pipeline().parameters.CancelIfAlreadyRunning",
                                                "type": "Expression"
                                            },
                                            "ADFTriggerName": {
                                                "value": "@pipeline().parameters.ADFTriggerName",
                                                "type": "Expression"
                                            },
                                            "FwkLayerId": {
                                                "value": "@pipeline().parameters.FwkLayerId",
                                                "type": "Expression"
                                            },
                                            "MasterRunId": {
                                                "value": "@pipeline().GroupId",
                                                "type": "Expression"
                                            }
                                        }
                                    }
                                },
                                {
                                    "name": "Set ContinueWithETLPipelineRun",
                                    "type": "SetVariable",
                                    "dependsOn": [
                                        {
                                            "activity": "Execute Is Pipeline Running",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "variableName": "ContinueWithETLPipelineRun",
                                        "value": {
                                            "value": "@activity('Execute Is Pipeline Running').output.pipelineReturnValue.ContinueWithETLPipelineRun",
                                            "type": "Expression"
                                        }
                                    }
                                },
                                {
                                    "name": "If Wait Condition",
                                    "type": "IfCondition",
                                    "dependsOn": [
                                        {
                                            "activity": "Set ContinueWithETLPipelineRun",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "userProperties": [],
                                    "typeProperties": {
                                        "expression": {
                                            "value": "@equals(variables('ContinueWithETLPipelineRun'),false)",
                                            "type": "Expression"
                                        },
                                        "ifTrueActivities": [
                                            {
                                                "name": "Wait1",
                                                "type": "Wait",
                                                "dependsOn": [],
                                                "userProperties": [],
                                                "typeProperties": {
                                                    "waitTimeInSeconds": 300
                                                }
                                            }
                                        ]
                                    }
                                }
                            ],
                            "timeout": "0.12:00:00"
                        }
                    },
                    {
                        "name": "Execute ETL Pipeline",
                        "type": "ExecutePipeline",
                        "dependsOn": [
                            {
                                "activity": "Until pipeline has finished running",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "PL_ETLPipeline",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": false,
                            "parameters": {
                                "EntRunId": {
                                    "value": "@pipeline().RunId",
                                    "type": "Expression"
                                },
                                "EntTriggerTime": {
                                    "value": "@pipeline().TriggerTime",
                                    "type": "Expression"
                                },
                                "FwkTriggerId": {
                                    "value": "@pipeline().parameters.FwkTriggerId",
                                    "type": "Expression"
                                },
                                "FwkLayerId": {
                                    "value": "@pipeline().parameters.FwkLayerId",
                                    "type": "Expression"
                                },
                                "ADFTriggerName": {
                                    "value": "@if(\n    equals(pipeline().parameters.ADFTriggerName, 'none'),\n    pipeline().TriggerName,\n    pipeline().parameters.ADFTriggerName\n)",
                                    "type": "Expression"
                                }
                            }
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {}
                },
                "parameters": {
                    "EntRunId": {
                        "type": "string"
                    },
                    "EntTriggerTime": {
                        "type": "string"
                    },
                    "FwkTriggerId": {
                        "type": "string"
                    },
                    "FwkLayerId": {
                        "type": "string"
                    },
                    "ADFTriggerName": {
                        "type": "string"
                    },
                    "CancelIfAlreadyRunning": {
                        "type": "string"
                    }
                },
                "variables": {
                    "ContinueWithETLPipelineRun": {
                        "type": "Boolean",
                        "defaultValue": false
                    }
                },
                "annotations": []
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/pipelines/PL_ETLPipeline')]",
                "[concat(variables('factoryId'), '/pipelines/PL_PipelineRunStatus')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/PL_ETLPipeline_Queue')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Execute ETL Pipeline",
                        "type": "ExecutePipeline",
                        "dependsOn": [],
                        "policy": {
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "PL_ETLPipeline",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {
                                "EntRunId": {
                                    "value": "@pipeline().RunId",
                                    "type": "Expression"
                                },
                                "EntTriggerTime": {
                                    "value": "@pipeline().TriggerTime",
                                    "type": "Expression"
                                },
                                "FwkTriggerId": {
                                    "value": "@pipeline().parameters.FwkTriggerId",
                                    "type": "Expression"
                                },
                                "FwkLayerId": {
                                    "value": "@pipeline().parameters.FwkLayerId",
                                    "type": "Expression"
                                },
                                "ADFTriggerName": {
                                    "value": "@if(\n    equals(pipeline().parameters.ADFTriggerName, 'none'),\n    pipeline().TriggerName,\n    pipeline().parameters.ADFTriggerName\n)",
                                    "type": "Expression"
                                }
                            }
                        }
                    }
                ],
                "concurrency": 1,
                "policy": {
                    "elapsedTimeMetric": {}
                },
                "parameters": {
                    "EntRunId": {
                        "type": "string"
                    },
                    "EntTriggerTime": {
                        "type": "string"
                    },
                    "FwkTriggerId": {
                        "type": "string"
                    },
                    "FwkLayerId": {
                        "type": "string"
                    },
                    "ADFTriggerName": {
                        "type": "string"
                    }
                },
                "annotations": []
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/pipelines/PL_ETLPipeline')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/PL_EXP_00_ExportMaster')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "If has active instructions",
                        "type": "IfCondition",
                        "dependsOn": [
                            {
                                "activity": "Has active instructions",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "expression": {
                                "value": "@activity('Has active instructions').output.firstRow['Result']",
                                "type": "Expression"
                            },
                            "ifTrueActivities": [
                                {
                                    "name": "Execute PL_EXP_01_RunExport",
                                    "type": "ExecutePipeline",
                                    "dependsOn": [],
                                    "policy": {
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "pipeline": {
                                            "referenceName": "PL_EXP_01_RunExport",
                                            "type": "PipelineReference"
                                        },
                                        "waitOnCompletion": true,
                                        "parameters": {
                                            "EntRunId": {
                                                "value": "@pipeline().parameters.EntRunId",
                                                "type": "Expression"
                                            },
                                            "EntTriggerTime": {
                                                "value": "@pipeline().parameters.EntTriggerTime",
                                                "type": "Expression"
                                            },
                                            "FwkTriggerId": {
                                                "value": "@pipeline().parameters.FwkTriggerId",
                                                "type": "Expression"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "name": "Has active instructions",
                        "type": "Lookup",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "0.12:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "AzureSqlSource",
                                "sqlReaderStoredProcedureName": "[[dbo].[sps_HasActiveExpInstructions]",
                                "storedProcedureParameters": {
                                    "FwkTriggerId": {
                                        "type": "String",
                                        "value": {
                                            "value": "@pipeline().parameters.FwkTriggerId",
                                            "type": "Expression"
                                        }
                                    }
                                },
                                "queryTimeout": "02:00:00",
                                "partitionOption": "None"
                            },
                            "dataset": {
                                "referenceName": "DS_SQL_Configuration",
                                "type": "DatasetReference",
                                "parameters": {}
                            },
                            "firstRowOnly": true
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {}
                },
                "parameters": {
                    "EntRunId": {
                        "type": "string"
                    },
                    "EntTriggerTime": {
                        "type": "string"
                    },
                    "FwkTriggerId": {
                        "type": "string"
                    }
                },
                "folder": {
                    "name": "03 Export Module"
                },
                "annotations": []
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/datasets/DS_SQL_Configuration')]",
                "[concat(variables('factoryId'), '/pipelines/PL_EXP_01_RunExport')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/PL_EXP_01_RunExport')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "LookupExpOutput",
                        "description": "Executes the SP ‘sps_LookupExpOutput’ to get the source and the sink information of the data to ingest",
                        "type": "Lookup",
                        "dependsOn": [
                            {
                                "activity": "sp_FwkLogInsert",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "0.12:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "AzureSqlSource",
                                "sqlReaderStoredProcedureName": "[[dbo].[sps_LookupExpOutput]",
                                "storedProcedureParameters": {
                                    "FwkTriggerId": {
                                        "type": "String",
                                        "value": {
                                            "value": "@pipeline().parameters.FwkTriggerId",
                                            "type": "Expression"
                                        }
                                    }
                                },
                                "queryTimeout": "02:00:00",
                                "partitionOption": "None"
                            },
                            "dataset": {
                                "referenceName": "DS_SQL_Configuration",
                                "type": "DatasetReference",
                                "parameters": {}
                            },
                            "firstRowOnly": false
                        }
                    },
                    {
                        "name": "sp_UpdateExecutionLog_succeeded",
                        "description": "Executes the SP spu_FwkLogUpdate to update the record created by the ‘InsertIntoFwkLog’ activity in the table ‘FwkLog’ by updating the columns ‘PipelineStatus’ to ‘Success’.",
                        "type": "SqlServerStoredProcedure",
                        "dependsOn": [
                            {
                                "activity": "ForEachObject",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "storedProcedureName": "[[dbo].[spu_FwkLogUpdate]",
                            "storedProcedureParameters": {
                                "ModuleRunId": {
                                    "value": {
                                        "value": "@pipeline().RunId",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                },
                                "PipelineStatus": {
                                    "value": {
                                        "value": "Succeeded",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                },
                                "JobRunUrl": {
                                    "value": null,
                                    "type": "String"
                                },
                                "ErrorMessage": {
                                    "value": null,
                                    "type": "String"
                                }
                            }
                        },
                        "linkedServiceName": {
                            "referenceName": "LS_configurationDB",
                            "type": "LinkedServiceReference"
                        }
                    },
                    {
                        "name": "sp_UpdateExecutionLog_failed",
                        "description": "Executes the SP spu_FwkLogUpdate to update the record created by the ‘InsertIntoFwkLog’ activity in the table ‘FwkLog’ by updating the columns ‘PipelineStatus’ to ‘Success’.",
                        "type": "SqlServerStoredProcedure",
                        "dependsOn": [
                            {
                                "activity": "ForEachObject",
                                "dependencyConditions": [
                                    "Failed"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "storedProcedureName": "[[dbo].[spu_FwkLogUpdate]",
                            "storedProcedureParameters": {
                                "ModuleRunId": {
                                    "value": {
                                        "value": "@pipeline().RunId",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                },
                                "PipelineStatus": {
                                    "value": {
                                        "value": "Failed",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                },
                                "JobRunUrl": {
                                    "value": null,
                                    "type": "String"
                                },
                                "ErrorMessage": {
                                    "value": null,
                                    "type": "String"
                                }
                            }
                        },
                        "linkedServiceName": {
                            "referenceName": "LS_configurationDB",
                            "type": "LinkedServiceReference"
                        }
                    },
                    {
                        "name": "sp_FwkLogInsert",
                        "description": "Executes the SP spi_FwkLogInsert to insert record into FwkLog table with the execution module information by pipeline id and with null status.",
                        "type": "SqlServerStoredProcedure",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "storedProcedureName": "[[dbo].[spi_FwkLogInsert]",
                            "storedProcedureParameters": {
                                "EntRunId": {
                                    "value": {
                                        "value": "@pipeline().parameters.EntRunId",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                },
                                "Module": {
                                    "value": {
                                        "value": "Export",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                },
                                "ModuleRunId": {
                                    "value": {
                                        "value": "@pipeline().RunId",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                },
                                "StartDate": {
                                    "value": {
                                        "value": "@formatdatetime(pipeline().TriggerTime)",
                                        "type": "Expression"
                                    },
                                    "type": "DateTime"
                                },
                                "ADFTriggerName": {
                                    "value": null,
                                    "type": "String"
                                }
                            }
                        },
                        "linkedServiceName": {
                            "referenceName": "LS_configurationDB",
                            "type": "LinkedServiceReference"
                        }
                    },
                    {
                        "name": "ForEachObject",
                        "description": "Iterates over a dataset and loop by number of rows it gets with the output from ‘LookupIngOutput’ activity.",
                        "type": "ForEach",
                        "dependsOn": [
                            {
                                "activity": "LookupExpOutput",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "items": {
                                "value": "@array(activity('LookupExpOutput').output.value)",
                                "type": "Expression"
                            },
                            "isSequential": false,
                            "batchCount": 30,
                            "activities": [
                                {
                                    "name": "Switch_SourceType",
                                    "description": "Evaluates the input value ‘SourceType’ corresponding to a case that matches the condition.",
                                    "type": "Switch",
                                    "dependsOn": [],
                                    "userProperties": [],
                                    "typeProperties": {
                                        "on": {
                                            "value": "@string(item().SourceType)",
                                            "type": "Expression"
                                        },
                                        "cases": [
                                            {
                                                "value": "FileShare",
                                                "activities": [
                                                    {
                                                        "name": "PL_EXP_03_01_FileShareExport",
                                                        "type": "ExecutePipeline",
                                                        "dependsOn": [],
                                                        "policy": {
                                                            "secureInput": false
                                                        },
                                                        "userProperties": [],
                                                        "typeProperties": {
                                                            "pipeline": {
                                                                "referenceName": "PL_EXP_02_01_FileShareExport",
                                                                "type": "PipelineReference"
                                                            },
                                                            "waitOnCompletion": true,
                                                            "parameters": {
                                                                "FwkItem": {
                                                                    "value": "@item()",
                                                                    "type": "Expression"
                                                                },
                                                                "PL_01TriggerTime": {
                                                                    "value": "@pipeline().TriggerTime",
                                                                    "type": "Expression"
                                                                },
                                                                "EntRunId": {
                                                                    "value": "@pipeline().parameters.EntRunId",
                                                                    "type": "Expression"
                                                                },
                                                                "ModuleRunId": {
                                                                    "value": "@pipeline().RunId",
                                                                    "type": "Expression"
                                                                }
                                                            }
                                                        }
                                                    }
                                                ]
                                            },
                                            {
                                                "value": "SFTP",
                                                "activities": [
                                                    {
                                                        "name": "PL_EXP_03_02_SFTPExport",
                                                        "type": "ExecutePipeline",
                                                        "dependsOn": [],
                                                        "policy": {
                                                            "secureInput": false
                                                        },
                                                        "userProperties": [],
                                                        "typeProperties": {
                                                            "pipeline": {
                                                                "referenceName": "PL_EXP_02_02_SFTPExport",
                                                                "type": "PipelineReference"
                                                            },
                                                            "waitOnCompletion": true,
                                                            "parameters": {
                                                                "FwkItem": {
                                                                    "value": "@item()",
                                                                    "type": "Expression"
                                                                },
                                                                "PL_01TriggerTime": {
                                                                    "value": "@pipeline().TriggerTime",
                                                                    "type": "Expression"
                                                                },
                                                                "EntRunId": {
                                                                    "value": "@pipeline().parameters.EntRunId",
                                                                    "type": "Expression"
                                                                },
                                                                "ModuleRunId": {
                                                                    "value": "@pipeline().RunId",
                                                                    "type": "Expression"
                                                                }
                                                            }
                                                        }
                                                    }
                                                ]
                                            },
                                            {
                                                "value": "SQL",
                                                "activities": [
                                                    {
                                                        "name": "PL_EXP_03_03_SQLExport",
                                                        "type": "ExecutePipeline",
                                                        "dependsOn": [],
                                                        "policy": {
                                                            "secureInput": false
                                                        },
                                                        "userProperties": [],
                                                        "typeProperties": {
                                                            "pipeline": {
                                                                "referenceName": "PL_EXP_02_03_SQLExport",
                                                                "type": "PipelineReference"
                                                            },
                                                            "waitOnCompletion": true,
                                                            "parameters": {
                                                                "FwkItem": {
                                                                    "value": "@item()",
                                                                    "type": "Expression"
                                                                },
                                                                "PL_01TriggerTime": {
                                                                    "value": "@pipeline().TriggerTime",
                                                                    "type": "Expression"
                                                                },
                                                                "EntRunId": {
                                                                    "value": "@pipeline().parameters.EntRunId",
                                                                    "type": "Expression"
                                                                },
                                                                "ModuleRunId": {
                                                                    "value": "@pipeline().RunId",
                                                                    "type": "Expression"
                                                                }
                                                            }
                                                        }
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                }
                            ]
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {}
                },
                "parameters": {
                    "EntRunId": {
                        "type": "string"
                    },
                    "EntTriggerTime": {
                        "type": "string"
                    },
                    "FwkTriggerId": {
                        "type": "string"
                    }
                },
                "folder": {
                    "name": "03 Export Module"
                },
                "annotations": [],
                "lastPublishTime": "2023-07-06T08:29:16Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/datasets/DS_SQL_Configuration')]",
                "[concat(variables('factoryId'), '/linkedServices/LS_configurationDB')]",
                "[concat(variables('factoryId'), '/pipelines/PL_EXP_02_01_FileShareExport')]",
                "[concat(variables('factoryId'), '/pipelines/PL_EXP_02_02_SFTPExport')]",
                "[concat(variables('factoryId'), '/pipelines/PL_EXP_02_03_SQLExport')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/PL_EXP_02_01_FileShareExport')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Export File to FileShare",
                        "description": "Copy a table from a database to the configurated Sink dynamically taking by input FwkItem, SrcPath.",
                        "type": "Copy",
                        "dependsOn": [
                            {
                                "activity": "spi_ExpLogInsert",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "BinarySource",
                                "storeSettings": {
                                    "type": "AzureBlobFSReadSettings",
                                    "recursive": true,
                                    "deleteFilesAfterCompletion": true
                                },
                                "formatSettings": {
                                    "type": "BinaryReadSettings"
                                }
                            },
                            "sink": {
                                "type": "BinarySink",
                                "storeSettings": {
                                    "type": "FileServerWriteSettings"
                                }
                            },
                            "enableStaging": false,
                            "skipErrorFile": {
                                "dataInconsistency": false
                            },
                            "validateDataConsistency": true
                        },
                        "inputs": [
                            {
                                "referenceName": "DS_ADLS_BIN_File_Export",
                                "type": "DatasetReference",
                                "parameters": {
                                    "InstanceURL": {
                                        "value": "@pipeline().parameters.FwkItem['InstanceURL']",
                                        "type": "Expression"
                                    },
                                    "FullPath": {
                                        "value": "@pipeline().parameters.FwkItem['Path']",
                                        "type": "Expression"
                                    }
                                }
                            }
                        ],
                        "outputs": [
                            {
                                "referenceName": "DS_FileShare_Binary_Target",
                                "type": "DatasetReference",
                                "parameters": {
                                    "FwkItem": {
                                        "value": "@pipeline().parameters.FwkItem",
                                        "type": "Expression"
                                    }
                                }
                            }
                        ]
                    },
                    {
                        "name": "spu_ExpLogUpdate_succeeded",
                        "description": "Executes the SP spu_ExpLogUpdate to update record into ExpLog table with the execution module information.",
                        "type": "SqlServerStoredProcedure",
                        "dependsOn": [
                            {
                                "activity": "Export File to FileShare",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "storedProcedureName": "[[dbo].[spu_ExpLogUpdate]",
                            "storedProcedureParameters": {
                                "ExpOutputId": {
                                    "value": {
                                        "value": "@pipeline().parameters.FwkItem['ExpOutputId']",
                                        "type": "Expression"
                                    },
                                    "type": "Int32"
                                },
                                "EntRunId": {
                                    "value": {
                                        "value": "@pipeline().parameters.EntRunId",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                },
                                "ModuleRunId": {
                                    "value": {
                                        "value": "@pipeline().parameters.ModuleRunId",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                },
                                "PipelineStatus": {
                                    "value": {
                                        "value": "Succeeded",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                },
                                "CopyDuration": {
                                    "value": {
                                        "value": "@if(\n    contains(activity('Export File to FileShare').output, 'copyDuration'),\n    activity('Export File to FileShare').output.copyDuration,\n    null\n)",
                                        "type": "Expression"
                                    },
                                    "type": "Double"
                                },
                                "Throughput": {
                                    "value": {
                                        "value": "@if(\n    contains(activity('Export File to FileShare').output, 'throughput'),\n    activity('Export File to FileShare').output.throughput,\n    null\n)",
                                        "type": "Expression"
                                    },
                                    "type": "Double"
                                },
                                "ErrorMessage": {
                                    "value": null,
                                    "type": "String"
                                }
                            }
                        },
                        "linkedServiceName": {
                            "referenceName": "LS_configurationDB",
                            "type": "LinkedServiceReference"
                        }
                    },
                    {
                        "name": "spu_ExpLogUpdate_failed",
                        "description": "Executes the SP spu_ExpLogUpdate to update record into ExpLog table with the execution module information.",
                        "type": "SqlServerStoredProcedure",
                        "dependsOn": [
                            {
                                "activity": "Export File to FileShare",
                                "dependencyConditions": [
                                    "Failed"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "storedProcedureName": "[[dbo].[spu_ExpLogUpdate]",
                            "storedProcedureParameters": {
                                "ExpOutputId": {
                                    "value": {
                                        "value": "@pipeline().parameters.FwkItem['ExpOutputId']",
                                        "type": "Expression"
                                    },
                                    "type": "Int32"
                                },
                                "EntRunId": {
                                    "value": {
                                        "value": "@pipeline().parameters.EntRunId",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                },
                                "ModuleRunId": {
                                    "value": {
                                        "value": "@pipeline().parameters.ModuleRunId",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                },
                                "PipelineStatus": {
                                    "value": {
                                        "value": "Failed",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                },
                                "CopyDuration": {
                                    "value": null,
                                    "type": "Double"
                                },
                                "Throughput": {
                                    "value": null,
                                    "type": "Double"
                                },
                                "ErrorMessage": {
                                    "value": {
                                        "value": "@if(\n    and(\n        contains(activity('Export File to FileShare').output, 'errors'),\n        greater(length(activity('Export File to FileShare').output.errors), 0)\n    ),\n    activity('Export File to FileShare').output.errors[0].Message,\n    null\n)",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                }
                            }
                        },
                        "linkedServiceName": {
                            "referenceName": "LS_configurationDB",
                            "type": "LinkedServiceReference"
                        }
                    },
                    {
                        "name": "spi_ExpLogInsert",
                        "description": "Executes the SP spi_ExpLogInsert to insert record into ExpLog table with the execution module information.",
                        "type": "SqlServerStoredProcedure",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "storedProcedureName": "[[dbo].[spi_ExpLogInsert]",
                            "storedProcedureParameters": {
                                "ExpOutputId": {
                                    "value": {
                                        "value": "@pipeline().parameters.FwkItem['ExpOutputId']",
                                        "type": "Expression"
                                    },
                                    "type": "Int32"
                                },
                                "EntRunId": {
                                    "value": {
                                        "value": "@pipeline().parameters.EntRunId",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                },
                                "ModuleRunId": {
                                    "value": {
                                        "value": "@pipeline().parameters.ModuleRunId",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                },
                                "PipelineStatus": {
                                    "value": {
                                        "value": "InProgress",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                },
                                "StartDate": {
                                    "value": {
                                        "value": "@formatdatetime(pipeline().TriggerTime)",
                                        "type": "Expression"
                                    },
                                    "type": "Datetime"
                                },
                                "CopyDuration": {
                                    "value": null,
                                    "type": "Double"
                                },
                                "Throughput": {
                                    "value": null,
                                    "type": "Double"
                                },
                                "ErrorMessage": {
                                    "value": null,
                                    "type": "String"
                                }
                            }
                        },
                        "linkedServiceName": {
                            "referenceName": "LS_configurationDB",
                            "type": "LinkedServiceReference"
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {}
                },
                "parameters": {
                    "FwkItem": {
                        "type": "array"
                    },
                    "PL_01TriggerTime": {
                        "type": "string"
                    },
                    "EntRunId": {
                        "type": "string"
                    },
                    "ModuleRunId": {
                        "type": "string"
                    }
                },
                "folder": {
                    "name": "03 Export Module"
                },
                "annotations": [],
                "lastPublishTime": "2023-07-06T08:29:14Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/datasets/DS_ADLS_BIN_File_Export')]",
                "[concat(variables('factoryId'), '/datasets/DS_FileShare_Binary_Target')]",
                "[concat(variables('factoryId'), '/linkedServices/LS_configurationDB')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/PL_EXP_02_02_SFTPExport')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Export File to SFTP",
                        "description": "Copy a table from a database to the configurated Sink dynamically taking by input FwkItem, SrcPath.",
                        "type": "Copy",
                        "dependsOn": [
                            {
                                "activity": "spi_ExpLogInsert",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "BinarySource",
                                "storeSettings": {
                                    "type": "AzureBlobFSReadSettings",
                                    "recursive": true,
                                    "deleteFilesAfterCompletion": true
                                },
                                "formatSettings": {
                                    "type": "BinaryReadSettings"
                                }
                            },
                            "sink": {
                                "type": "BinarySink",
                                "storeSettings": {
                                    "type": "SftpWriteSettings",
                                    "operationTimeout": "01:00:00",
                                    "useTempFileRename": true
                                }
                            },
                            "enableStaging": false
                        },
                        "inputs": [
                            {
                                "referenceName": "DS_ADLS_BIN_File_Export",
                                "type": "DatasetReference",
                                "parameters": {
                                    "InstanceURL": {
                                        "value": "@pipeline().parameters.FwkItem['InstanceURL']",
                                        "type": "Expression"
                                    },
                                    "FullPath": {
                                        "value": "@pipeline().parameters.FwkItem['Path']",
                                        "type": "Expression"
                                    }
                                }
                            }
                        ],
                        "outputs": [
                            {
                                "referenceName": "DS_SFTP_Binary_Target",
                                "type": "DatasetReference",
                                "parameters": {
                                    "FwkItem": {
                                        "value": "@pipeline().parameters.FwkItem",
                                        "type": "Expression"
                                    }
                                }
                            }
                        ]
                    },
                    {
                        "name": "spu_ExpLogUpdate_succeeded",
                        "description": "Executes the SP spu_ExpLogUpdate to update record into ExpLog table with the execution module information.",
                        "type": "SqlServerStoredProcedure",
                        "dependsOn": [
                            {
                                "activity": "Export File to SFTP",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "storedProcedureName": "[[dbo].[spu_ExpLogUpdate]",
                            "storedProcedureParameters": {
                                "ExpOutputId": {
                                    "value": {
                                        "value": "@pipeline().parameters.FwkItem['ExpOutputId']",
                                        "type": "Expression"
                                    },
                                    "type": "Int32"
                                },
                                "EntRunId": {
                                    "value": {
                                        "value": "@pipeline().parameters.EntRunId",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                },
                                "ModuleRunId": {
                                    "value": {
                                        "value": "@pipeline().parameters.ModuleRunId",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                },
                                "PipelineStatus": {
                                    "value": {
                                        "value": "Succeeded",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                },
                                "CopyDuration": {
                                    "value": {
                                        "value": "@if(\n    contains(activity('Export File to SFTP').output, 'copyDuration'),\n    activity('Export File to SFTP').output.copyDuration,\n    null\n)",
                                        "type": "Expression"
                                    },
                                    "type": "Double"
                                },
                                "Throughput": {
                                    "value": {
                                        "value": "@if(\n    contains(activity('Export File to SFTP').output, 'throughput'),\n    activity('Export File to SFTP').output.throughput,\n    null\n)",
                                        "type": "Expression"
                                    },
                                    "type": "Double"
                                },
                                "ErrorMessage": {
                                    "value": null,
                                    "type": "String"
                                }
                            }
                        },
                        "linkedServiceName": {
                            "referenceName": "LS_configurationDB",
                            "type": "LinkedServiceReference"
                        }
                    },
                    {
                        "name": "spu_ExpLogUpdate_failed",
                        "description": "Executes the SP spu_ExpLogUpdate to update record into ExpLog table with the execution module information.",
                        "type": "SqlServerStoredProcedure",
                        "dependsOn": [
                            {
                                "activity": "Export File to SFTP",
                                "dependencyConditions": [
                                    "Failed"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "storedProcedureName": "[[dbo].[spu_ExpLogUpdate]",
                            "storedProcedureParameters": {
                                "ExpOutputId": {
                                    "value": {
                                        "value": "@pipeline().parameters.FwkItem['ExpOutputId']",
                                        "type": "Expression"
                                    },
                                    "type": "Int32"
                                },
                                "EntRunId": {
                                    "value": {
                                        "value": "@pipeline().parameters.EntRunId",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                },
                                "ModuleRunId": {
                                    "value": {
                                        "value": "@pipeline().parameters.ModuleRunId",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                },
                                "PipelineStatus": {
                                    "value": {
                                        "value": "Failed",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                },
                                "CopyDuration": {
                                    "value": null,
                                    "type": "Double"
                                },
                                "Throughput": {
                                    "value": null,
                                    "type": "Double"
                                },
                                "ErrorMessage": {
                                    "value": {
                                        "value": "@if(\n    and(\n        contains(activity('Export File to SFTP').output, 'errors'),\n        greater(length(activity('Export File to SFTP').output.errors), 0)\n    ),\n    activity('Export File to SFTP').output.errors[0].Message,\n    null\n)",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                }
                            }
                        },
                        "linkedServiceName": {
                            "referenceName": "LS_configurationDB",
                            "type": "LinkedServiceReference"
                        }
                    },
                    {
                        "name": "spi_ExpLogInsert",
                        "description": "Executes the SP spi_ExpLogInsert to insert record into ExpLog table with the execution module information.",
                        "type": "SqlServerStoredProcedure",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "storedProcedureName": "[[dbo].[spi_ExpLogInsert]",
                            "storedProcedureParameters": {
                                "ExpOutputId": {
                                    "value": {
                                        "value": "@pipeline().parameters.FwkItem['ExpOutputId']",
                                        "type": "Expression"
                                    },
                                    "type": "Int32"
                                },
                                "EntRunId": {
                                    "value": {
                                        "value": "@pipeline().parameters.EntRunId",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                },
                                "ModuleRunId": {
                                    "value": {
                                        "value": "@pipeline().parameters.ModuleRunId",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                },
                                "PipelineStatus": {
                                    "value": {
                                        "value": "InProgress",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                },
                                "StartDate": {
                                    "value": {
                                        "value": "@formatdatetime(pipeline().TriggerTime)",
                                        "type": "Expression"
                                    },
                                    "type": "Datetime"
                                },
                                "CopyDuration": {
                                    "value": null,
                                    "type": "Double"
                                },
                                "Throughput": {
                                    "value": null,
                                    "type": "Double"
                                },
                                "ErrorMessage": {
                                    "value": null,
                                    "type": "String"
                                }
                            }
                        },
                        "linkedServiceName": {
                            "referenceName": "LS_configurationDB",
                            "type": "LinkedServiceReference"
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {}
                },
                "parameters": {
                    "FwkItem": {
                        "type": "array"
                    },
                    "PL_01TriggerTime": {
                        "type": "string"
                    },
                    "EntRunId": {
                        "type": "string"
                    },
                    "ModuleRunId": {
                        "type": "string"
                    }
                },
                "folder": {
                    "name": "03 Export Module"
                },
                "annotations": [],
                "lastPublishTime": "2023-07-06T08:29:14Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/datasets/DS_ADLS_BIN_File_Export')]",
                "[concat(variables('factoryId'), '/datasets/DS_SFTP_Binary_Target')]",
                "[concat(variables('factoryId'), '/linkedServices/LS_configurationDB')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/PL_EXP_02_03_SQLExport')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Export File to SQL",
                        "description": "Copy a table from a adls to the configurated Sink  database dynamically taking by input FwkItem, Path.",
                        "type": "Copy",
                        "dependsOn": [
                            {
                                "activity": "spi_ExpLogInsert",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "DelimitedTextSource",
                                "storeSettings": {
                                    "type": "AzureBlobFSReadSettings",
                                    "recursive": true,
                                    "enablePartitionDiscovery": false
                                },
                                "formatSettings": {
                                    "type": "DelimitedTextReadSettings"
                                }
                            },
                            "sink": {
                                "type": "AzureSqlSink",
                                "preCopyScript": {
                                    "value": "\n@{if(\n    equals(pipeline().parameters.FwkItem['SinkParams'], null),\n    '',\n    if(\n        contains(json(pipeline().parameters.FwkItem['SinkParams']), 'preCopyScript'),\n        json(pipeline().parameters.FwkItem['SinkParams']).preCopyScript,\n        ''\n    )\n)}",
                                    "type": "Expression"
                                },
                                "writeBehavior": "insert",
                                "sqlWriterUseTableLock": false,
                                "tableOption": "autoCreate",
                                "disableMetricsCollection": false
                            },
                            "enableStaging": false,
                            "translator": {
                                "type": "TabularTranslator",
                                "typeConversion": true,
                                "typeConversionSettings": {
                                    "allowDataTruncation": true,
                                    "treatBooleanAsNumber": false
                                }
                            }
                        },
                        "inputs": [
                            {
                                "referenceName": "DS_ADLS_CSV_File_Export",
                                "type": "DatasetReference",
                                "parameters": {
                                    "FwkItem": {
                                        "value": "@pipeline().parameters.FwkItem",
                                        "type": "Expression"
                                    }
                                }
                            }
                        ],
                        "outputs": [
                            {
                                "referenceName": "DS_SQL_Sink",
                                "type": "DatasetReference",
                                "parameters": {
                                    "FwkItem": {
                                        "value": "@pipeline().parameters.FwkItem",
                                        "type": "Expression"
                                    }
                                }
                            }
                        ]
                    },
                    {
                        "name": "spu_ExpLogUpdate_succeeded",
                        "description": "Executes the SP spu_ExpLogUpdate to update record into ExpLog table with the execution module information.",
                        "type": "SqlServerStoredProcedure",
                        "dependsOn": [
                            {
                                "activity": "Delete Temp Files",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "storedProcedureName": "[[dbo].[spu_ExpLogUpdate]",
                            "storedProcedureParameters": {
                                "ExpOutputId": {
                                    "value": {
                                        "value": "@pipeline().parameters.FwkItem['ExpOutputId']",
                                        "type": "Expression"
                                    },
                                    "type": "Int32"
                                },
                                "EntRunId": {
                                    "value": {
                                        "value": "@pipeline().parameters.EntRunId",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                },
                                "ModuleRunId": {
                                    "value": {
                                        "value": "@pipeline().parameters.ModuleRunId",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                },
                                "PipelineStatus": {
                                    "value": {
                                        "value": "Succeeded",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                },
                                "CopyDuration": {
                                    "value": {
                                        "value": "@if(\n    contains(activity('Export File to SQL').output, 'copyDuration'),\n    activity('Export File to SQL').output.copyDuration,\n    null\n)",
                                        "type": "Expression"
                                    },
                                    "type": "Double"
                                },
                                "Throughput": {
                                    "value": {
                                        "value": "@if(\n    contains(activity('Export File to SQL').output, 'throughput'),\n    activity('Export File to SQL').output.throughput,\n    null\n)",
                                        "type": "Expression"
                                    },
                                    "type": "Double"
                                },
                                "ErrorMessage": {
                                    "value": null,
                                    "type": "String"
                                }
                            }
                        },
                        "linkedServiceName": {
                            "referenceName": "LS_configurationDB",
                            "type": "LinkedServiceReference"
                        }
                    },
                    {
                        "name": "spu_ExpLogUpdate_failed",
                        "description": "Executes the SP spu_ExpLogUpdate to update record into ExpLog table with the execution module information.",
                        "type": "SqlServerStoredProcedure",
                        "dependsOn": [
                            {
                                "activity": "Export File to SQL",
                                "dependencyConditions": [
                                    "Failed"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "storedProcedureName": "[[dbo].[spu_ExpLogUpdate]",
                            "storedProcedureParameters": {
                                "ExpOutputId": {
                                    "value": {
                                        "value": "@pipeline().parameters.FwkItem['ExpOutputId']",
                                        "type": "Expression"
                                    },
                                    "type": "Int32"
                                },
                                "EntRunId": {
                                    "value": {
                                        "value": "@pipeline().parameters.EntRunId",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                },
                                "ModuleRunId": {
                                    "value": {
                                        "value": "@pipeline().parameters.ModuleRunId",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                },
                                "PipelineStatus": {
                                    "value": {
                                        "value": "Failed",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                },
                                "CopyDuration": {
                                    "value": null,
                                    "type": "Double"
                                },
                                "Throughput": {
                                    "value": null,
                                    "type": "Double"
                                },
                                "ErrorMessage": {
                                    "value": {
                                        "value": "@if(\n    and(\n        contains(activity('Export File to SQL').output, 'errors'),\n        greater(length(activity('Export File to SQL').output.errors), 0)\n    ),\n    activity('Export File to SQL').output.errors[0].Message,\n    null\n)",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                }
                            }
                        },
                        "linkedServiceName": {
                            "referenceName": "LS_configurationDB",
                            "type": "LinkedServiceReference"
                        }
                    },
                    {
                        "name": "spi_ExpLogInsert",
                        "description": "Executes the SP spi_ExpLogInsert to insert record into ExpLog table with the execution module information.",
                        "type": "SqlServerStoredProcedure",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "storedProcedureName": "[[dbo].[spi_ExpLogInsert]",
                            "storedProcedureParameters": {
                                "ExpOutputId": {
                                    "value": {
                                        "value": "@pipeline().parameters.FwkItem['ExpOutputId']",
                                        "type": "Expression"
                                    },
                                    "type": "Int32"
                                },
                                "EntRunId": {
                                    "value": {
                                        "value": "@pipeline().parameters.EntRunId",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                },
                                "ModuleRunId": {
                                    "value": {
                                        "value": "@pipeline().parameters.ModuleRunId",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                },
                                "PipelineStatus": {
                                    "value": {
                                        "value": "InProgress",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                },
                                "StartDate": {
                                    "value": {
                                        "value": "@formatdatetime(pipeline().TriggerTime)",
                                        "type": "Expression"
                                    },
                                    "type": "Datetime"
                                },
                                "CopyDuration": {
                                    "value": null,
                                    "type": "Double"
                                },
                                "Throughput": {
                                    "value": null,
                                    "type": "Double"
                                },
                                "ErrorMessage": {
                                    "value": null,
                                    "type": "String"
                                }
                            }
                        },
                        "linkedServiceName": {
                            "referenceName": "LS_configurationDB",
                            "type": "LinkedServiceReference"
                        }
                    },
                    {
                        "name": "Delete Temp Files",
                        "type": "Delete",
                        "dependsOn": [
                            {
                                "activity": "Export File to SQL",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "0.12:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "dataset": {
                                "referenceName": "DS_ADLS_CSV_File_Export",
                                "type": "DatasetReference",
                                "parameters": {
                                    "FwkItem": {
                                        "value": "@pipeline().parameters.FwkItem",
                                        "type": "Expression"
                                    }
                                }
                            },
                            "enableLogging": false,
                            "storeSettings": {
                                "type": "AzureBlobFSReadSettings",
                                "recursive": true,
                                "enablePartitionDiscovery": false
                            }
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {}
                },
                "parameters": {
                    "FwkItem": {
                        "type": "array"
                    },
                    "PL_01TriggerTime": {
                        "type": "string"
                    },
                    "EntRunId": {
                        "type": "string"
                    },
                    "ModuleRunId": {
                        "type": "string"
                    }
                },
                "folder": {
                    "name": "03 Export Module"
                },
                "annotations": [],
                "lastPublishTime": "2023-07-06T08:29:14Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/datasets/DS_ADLS_CSV_File_Export')]",
                "[concat(variables('factoryId'), '/datasets/DS_SQL_Sink')]",
                "[concat(variables('factoryId'), '/linkedServices/LS_configurationDB')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/PL_GenerateConfigurationPipeline')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Execute Ingestion Module",
                        "type": "ExecutePipeline",
                        "dependsOn": [
                            {
                                "activity": "If config generation type",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "PL_ING_01_02_PreProcessIngestion",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {
                                "EntRunId": {
                                    "value": "@pipeline().RunId",
                                    "type": "Expression"
                                },
                                "EntTriggerTime": {
                                    "value": "@pipeline().TriggerTime",
                                    "type": "Expression"
                                },
                                "FwkTriggerId": "Deployment",
                                "ADFTriggerName": "Deployment"
                            }
                        }
                    },
                    {
                        "name": "Execute ETL Config Generator Module",
                        "type": "ExecutePipeline",
                        "dependsOn": [
                            {
                                "activity": "Execute Ingestion Module",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "PL_COG_01_GenerateConfig",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {
                                "EntRunId": {
                                    "value": "@pipeline().RunId",
                                    "type": "Expression"
                                },
                                "NotebookName": "etlConfigGenerator",
                                "GenerateConfigParameter": {
                                    "value": "@pipeline().parameters.GenerateConfigParameter",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    {
                        "name": "Log Metadata Ingestion Failure To Mattermost",
                        "type": "ExecutePipeline",
                        "dependsOn": [
                            {
                                "activity": "Execute Ingestion Module",
                                "dependencyConditions": [
                                    "Failed"
                                ]
                            }
                        ],
                        "policy": {
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "PL_LogToMattermost",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {
                                "Message": "Execution of pipeline 'PL_ING_01_ProcessIngestion' responsible for ingesting metadata has failed",
                                "EntRunId": {
                                    "value": "@pipeline().RunId",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    {
                        "name": "Log ETL Metadata Execution Failure To Mattermost",
                        "type": "ExecutePipeline",
                        "dependsOn": [
                            {
                                "activity": "Execute ETL Config Generator Module",
                                "dependencyConditions": [
                                    "Failed"
                                ]
                            }
                        ],
                        "policy": {
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "PL_LogToMattermost",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {
                                "Message": "Execution of pipeline 'PL_COG_01_GenerateConfig' responsible for generating ETL configuration has failed",
                                "EntRunId": {
                                    "value": "@pipeline().RunId",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    {
                        "name": "If config generation type",
                        "type": "IfCondition",
                        "dependsOn": [
                            {
                                "activity": "If validate configuration",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "expression": {
                                "value": "@equals(pipeline().parameters.GenerateConfigParameter, 'Partial')",
                                "type": "Expression"
                            },
                            "ifFalseActivities": [
                                {
                                    "name": "Execute Metadata Ingestion Config Generator",
                                    "type": "ExecutePipeline",
                                    "dependsOn": [],
                                    "policy": {
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "pipeline": {
                                            "referenceName": "PL_COG_01_GenerateConfig",
                                            "type": "PipelineReference"
                                        },
                                        "waitOnCompletion": true,
                                        "parameters": {
                                            "EntRunId": {
                                                "value": "@pipeline().RunId",
                                                "type": "Expression"
                                            },
                                            "NotebookName": "preEtlConfigGenerator",
                                            "GenerateConfigParameter": {
                                                "value": "@pipeline().parameters.GenerateConfigParameter",
                                                "type": "Expression"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "name": "Log PreETL Metadata Execution Failure To Mattermost",
                        "type": "ExecutePipeline",
                        "dependsOn": [
                            {
                                "activity": "If config generation type",
                                "dependencyConditions": [
                                    "Failed"
                                ]
                            }
                        ],
                        "policy": {
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "PL_LogToMattermost",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {
                                "Message": "Execution of pipeline 'PL_COG_01_GenerateConfig' responsible for generating pre-ETL configuration has failed",
                                "EntRunId": {
                                    "value": "@pipeline().RunId",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    {
                        "name": "setFailedStatus1",
                        "type": "SetVariable",
                        "dependsOn": [
                            {
                                "activity": "Log PreETL Metadata Execution Failure To Mattermost",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "variableName": "pipelineReturnValue",
                            "value": [
                                {
                                    "key": "isSuccessful",
                                    "value": {
                                        "type": "Boolean",
                                        "content": false
                                    }
                                }
                            ],
                            "setSystemVariable": true
                        }
                    },
                    {
                        "name": "setFailedStatus2",
                        "type": "SetVariable",
                        "dependsOn": [
                            {
                                "activity": "Log Metadata Ingestion Failure To Mattermost",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "variableName": "pipelineReturnValue",
                            "value": [
                                {
                                    "key": "isSuccessful",
                                    "value": {
                                        "type": "Boolean",
                                        "content": false
                                    }
                                }
                            ],
                            "setSystemVariable": true
                        }
                    },
                    {
                        "name": "setFailedStatus3",
                        "type": "SetVariable",
                        "dependsOn": [
                            {
                                "activity": "Log ETL Metadata Execution Failure To Mattermost",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "variableName": "pipelineReturnValue",
                            "value": [
                                {
                                    "key": "isSuccessful",
                                    "value": {
                                        "type": "Boolean",
                                        "content": false
                                    }
                                }
                            ],
                            "setSystemVariable": true
                        }
                    },
                    {
                        "name": "setSuccessfulStatus",
                        "type": "SetVariable",
                        "dependsOn": [
                            {
                                "activity": "Execute ETL Config Generator Module",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "variableName": "pipelineReturnValue",
                            "value": [
                                {
                                    "key": "isSuccessful",
                                    "value": {
                                        "type": "Boolean",
                                        "content": true
                                    }
                                }
                            ],
                            "setSystemVariable": true
                        }
                    },
                    {
                        "name": "If validate configuration",
                        "type": "IfCondition",
                        "dependsOn": [],
                        "userProperties": [],
                        "typeProperties": {
                            "expression": {
                                "value": "@pipeline().parameters.ValidateConfiguration",
                                "type": "Expression"
                            },
                            "ifTrueActivities": [
                                {
                                    "name": "DT_RunValidationNotebook",
                                    "type": "DatabricksNotebook",
                                    "dependsOn": [],
                                    "policy": {
                                        "timeout": "0.12:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "notebookPath": "/Code/mdmf/tests/configurationTests/allFilesValidator",
                                        "baseParameters": {
                                            "FwkLogParameters": {
                                                "value": "@concat(\n    '{\"EntRunId\":','\"',pipeline().RunId,'\",\"Module\":\"Config Generation - validation\",\"ModuleRunId\":\"',pipeline().RunId,'\",\"StartDate\":\"',formatdatetime(pipeline().TriggerTime),'\",\"AdfTriggerName\":\"None\"}'\n    )",
                                                "type": "Expression"
                                            }
                                        }
                                    },
                                    "linkedServiceName": {
                                        "referenceName": "LS_databricks",
                                        "type": "LinkedServiceReference",
                                        "parameters": {
                                            "ClusterId": "0214-064848-zi0j9fjh"
                                        }
                                    }
                                },
                                {
                                    "name": "UpdateNotebookExecutionLog",
                                    "type": "Lookup",
                                    "dependsOn": [
                                        {
                                            "activity": "DT_RunValidationNotebook",
                                            "dependencyConditions": [
                                                "Failed"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "timeout": "0.12:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "source": {
                                            "type": "AzureDatabricksDeltaLakeSource",
                                            "query": {
                                                "value": "@concat(\n    'UPDATE ', pipeline().globalParameters.MetadataDB, '.FwkLog ',\n    'SET PipelineStatus = ''Failed''',\n    'EndDate = ''', formatDateTime(utcnow()), '''',\n    ' LastUpdate = ''', formatDateTime(utcnow()), '''',\n    ' JobRunUrl = ''', activity('DT_RunValidationNotebook').output.runPageUrl, '''',\n    ' ErrorMessage = ''', activity('DT_RunValidationNotebook').output.errors[0].Message, '''',\n    ' WHERE ModuleRunId = ''', pipeline().RunId, '''' \n)",
                                                "type": "Expression"
                                            }
                                        },
                                        "dataset": {
                                            "referenceName": "DS_ADB_Delta",
                                            "type": "DatasetReference",
                                            "parameters": {}
                                        },
                                        "firstRowOnly": false
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "name": "Log Validate Configuration Failure To Mattermost",
                        "type": "ExecutePipeline",
                        "dependsOn": [
                            {
                                "activity": "If validate configuration",
                                "dependencyConditions": [
                                    "Failed"
                                ]
                            }
                        ],
                        "policy": {
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "PL_LogToMattermost",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {
                                "Message": "Execution of pipeline 'PL_GenerateConfigurationPipeline' has failed because validation of configuration was not successful",
                                "EntRunId": {
                                    "value": "@pipeline().RunId",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    {
                        "name": "setFailedStatus0",
                        "type": "SetVariable",
                        "dependsOn": [
                            {
                                "activity": "Log Validate Configuration Failure To Mattermost",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "variableName": "pipelineReturnValue",
                            "value": [
                                {
                                    "key": "isSuccessful",
                                    "value": {
                                        "type": "Boolean",
                                        "content": false
                                    }
                                }
                            ],
                            "setSystemVariable": true
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {}
                },
                "parameters": {
                    "GenerateConfigParameter": {
                        "type": "string"
                    },
                    "ValidateConfiguration": {
                        "type": "bool",
                        "defaultValue": true
                    }
                },
                "annotations": [],
                "lastPublishTime": "2023-07-06T08:29:21Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/pipelines/PL_ING_01_02_PreProcessIngestion')]",
                "[concat(variables('factoryId'), '/pipelines/PL_COG_01_GenerateConfig')]",
                "[concat(variables('factoryId'), '/pipelines/PL_LogToMattermost')]",
                "[concat(variables('factoryId'), '/linkedServices/LS_databricks')]",
                "[concat(variables('factoryId'), '/datasets/DS_ADB_Delta')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/PL_ING_00_IngestionMaster')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "If has active instructions",
                        "type": "IfCondition",
                        "dependsOn": [
                            {
                                "activity": "Has active instructions",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "expression": {
                                "value": "@activity('Has active instructions').output.firstRow['Result']",
                                "type": "Expression"
                            },
                            "ifFalseActivities": [
                                {
                                    "name": "Set outputContinueETL to True",
                                    "type": "SetVariable",
                                    "dependsOn": [],
                                    "policy": {
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "variableName": "pipelineReturnValue",
                                        "value": [
                                            {
                                                "key": "outputContinueETL",
                                                "value": {
                                                    "type": "Boolean",
                                                    "content": true
                                                }
                                            }
                                        ],
                                        "setSystemVariable": true
                                    }
                                }
                            ],
                            "ifTrueActivities": [
                                {
                                    "name": "Execute PL_ING_01_00_RunIngestion",
                                    "type": "ExecutePipeline",
                                    "dependsOn": [],
                                    "policy": {
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "pipeline": {
                                            "referenceName": "PL_ING_01_00_RunIngestion",
                                            "type": "PipelineReference"
                                        },
                                        "waitOnCompletion": true,
                                        "parameters": {
                                            "EntRunId": {
                                                "value": "@pipeline().parameters.EntRunId",
                                                "type": "Expression"
                                            },
                                            "EntTriggerTime": {
                                                "value": "@pipeline().parameters.EntTriggerTime",
                                                "type": "Expression"
                                            },
                                            "FwkTriggerId": {
                                                "value": "@pipeline().parameters.FwkTriggerId",
                                                "type": "Expression"
                                            },
                                            "FwkLayerId": {
                                                "value": "@pipeline().parameters.FwkLayerId",
                                                "type": "Expression"
                                            },
                                            "ADFTriggerName": {
                                                "value": "@pipeline().parameters.ADFTriggerName",
                                                "type": "Expression"
                                            }
                                        }
                                    }
                                },
                                {
                                    "name": "Set outputContinueETL from pipeline output",
                                    "type": "SetVariable",
                                    "dependsOn": [
                                        {
                                            "activity": "Execute PL_ING_01_00_RunIngestion",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "variableName": "pipelineReturnValue",
                                        "value": [
                                            {
                                                "key": "outputContinueETL",
                                                "value": {
                                                    "type": "Expression",
                                                    "content": "@not(activity('Execute PL_ING_01_00_RunIngestion').output.pipelineReturnValue['outputStopETLAfterIngestion'])"
                                                }
                                            }
                                        ],
                                        "setSystemVariable": true
                                    }
                                },
                                {
                                    "name": "Set outputStopOrContinueETLOnFailure",
                                    "type": "SetVariable",
                                    "dependsOn": [
                                        {
                                            "activity": "Execute PL_ING_01_00_RunIngestion",
                                            "dependencyConditions": [
                                                "Failed"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "variableName": "pipelineReturnValue",
                                        "value": [
                                            {
                                                "key": "outputContinueETL",
                                                "value": {
                                                    "type": "Expression",
                                                    "content": "@not(activity('Execute PL_ING_01_00_RunIngestion').output.pipelineReturnValue['outputStopETLAfterIngestion'])"
                                                }
                                            }
                                        ],
                                        "setSystemVariable": true
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "name": "Has active instructions",
                        "type": "Lookup",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "0.12:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "AzureSqlSource",
                                "sqlReaderStoredProcedureName": "[[dbo].[sps_HasActiveIngtInstructions]",
                                "storedProcedureParameters": {
                                    "FwkLayerId": {
                                        "type": "String",
                                        "value": {
                                            "value": "@if(\n    equals(pipeline().parameters.FwkLayerId, 'none'),\n    null,\n    pipeline().parameters.FwkLayerId\n)",
                                            "type": "Expression"
                                        }
                                    },
                                    "FwkTriggerId": {
                                        "type": "String",
                                        "value": {
                                            "value": "@pipeline().parameters.FwkTriggerId",
                                            "type": "Expression"
                                        }
                                    }
                                },
                                "queryTimeout": "02:00:00",
                                "partitionOption": "None"
                            },
                            "dataset": {
                                "referenceName": "DS_SQL_Configuration",
                                "type": "DatasetReference",
                                "parameters": {}
                            },
                            "firstRowOnly": true
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {}
                },
                "parameters": {
                    "EntRunId": {
                        "type": "string"
                    },
                    "EntTriggerTime": {
                        "type": "string"
                    },
                    "FwkTriggerId": {
                        "type": "string"
                    },
                    "FwkLayerId": {
                        "type": "string"
                    },
                    "ADFTriggerName": {
                        "type": "string"
                    }
                },
                "folder": {
                    "name": "01 Ingestion Module"
                },
                "annotations": []
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/datasets/DS_SQL_Configuration')]",
                "[concat(variables('factoryId'), '/pipelines/PL_ING_01_00_RunIngestion')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/PL_ING_01_00_RunIngestion')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Execute Mandatoriness Check",
                        "type": "ExecutePipeline",
                        "dependsOn": [],
                        "policy": {
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "PL_ING_01_01_FileMandatorinessCheck",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {
                                "FwkTriggerId": {
                                    "value": "@pipeline().parameters.FwkTriggerId",
                                    "type": "Expression"
                                },
                                "EntRunId": {
                                    "value": "@pipeline().parameters.EntRunId",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    {
                        "name": "IfMandatorinessNotMisiing",
                        "type": "IfCondition",
                        "dependsOn": [
                            {
                                "activity": "Execute Mandatoriness Check",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "expression": {
                                "value": "@if(equals(activity('Execute Mandatoriness Check').output.pipelineReturnValue['outputIsMissingMandatoryFiles'],'N'),true, false)\n",
                                "type": "Expression"
                            },
                            "ifFalseActivities": [
                                {
                                    "name": "setOutputStopETLTrue",
                                    "type": "SetVariable",
                                    "dependsOn": [],
                                    "policy": {
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "variableName": "pipelineReturnValue",
                                        "value": [
                                            {
                                                "key": "outputStopETL",
                                                "value": {
                                                    "type": "Boolean",
                                                    "content": true
                                                }
                                            }
                                        ],
                                        "setSystemVariable": true
                                    }
                                }
                            ],
                            "ifTrueActivities": [
                                {
                                    "name": "Execute ProcessIngestion",
                                    "type": "ExecutePipeline",
                                    "dependsOn": [],
                                    "policy": {
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "pipeline": {
                                            "referenceName": "PL_ING_01_02_PreProcessIngestion",
                                            "type": "PipelineReference"
                                        },
                                        "waitOnCompletion": true,
                                        "parameters": {
                                            "EntRunId": {
                                                "value": "@pipeline().parameters.EntRunId",
                                                "type": "Expression"
                                            },
                                            "EntTriggerTime": {
                                                "value": "@pipeline().parameters.EntTriggerTime",
                                                "type": "Expression"
                                            },
                                            "FwkTriggerId": {
                                                "value": "@pipeline().parameters.FwkTriggerId",
                                                "type": "Expression"
                                            },
                                            "FwkLayerId": {
                                                "value": "@pipeline().parameters.FwkLayerId",
                                                "type": "Expression"
                                            },
                                            "ADFTriggerName": {
                                                "value": "@pipeline().parameters.ADFTriggerName",
                                                "type": "Expression"
                                            }
                                        }
                                    }
                                },
                                {
                                    "name": "setOutputStopETLResult",
                                    "type": "SetVariable",
                                    "dependsOn": [
                                        {
                                            "activity": "Execute ProcessIngestion",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "variableName": "pipelineReturnValue",
                                        "value": [
                                            {
                                                "key": "outputStopETL",
                                                "value": {
                                                    "type": "Expression",
                                                    "content": "@activity('Execute ProcessIngestion').output.pipelineReturnValue['outputStopETL']"
                                                }
                                            }
                                        ],
                                        "setSystemVariable": true
                                    }
                                },
                                {
                                    "name": "setOutputStoporETLResultonFailure",
                                    "type": "SetVariable",
                                    "dependsOn": [
                                        {
                                            "activity": "Execute ProcessIngestion",
                                            "dependencyConditions": [
                                                "Failed"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "variableName": "pipelineReturnValue",
                                        "value": [
                                            {
                                                "key": "outputStopETL",
                                                "value": {
                                                    "type": "Expression",
                                                    "content": "@activity('Execute ProcessIngestion').output.pipelineReturnValue['outputStopETL']"
                                                }
                                            }
                                        ],
                                        "setSystemVariable": true
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "name": "setStopETLAfterIngestion",
                        "type": "SetVariable",
                        "dependsOn": [
                            {
                                "activity": "IfMandatorinessNotMisiing",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "variableName": "pipelineReturnValue",
                            "value": [
                                {
                                    "key": "outputStopETLAfterIngestion",
                                    "value": {
                                        "type": "Expression",
                                        "content": "@activity('Execute ProcessIngestion').output.pipelineReturnValue['outputStopETL']"
                                    }
                                }
                            ],
                            "setSystemVariable": true
                        }
                    },
                    {
                        "name": "setStoporContinueETLAfterIngestionFailure",
                        "type": "SetVariable",
                        "dependsOn": [
                            {
                                "activity": "IfMandatorinessNotMisiing",
                                "dependencyConditions": [
                                    "Failed"
                                ]
                            }
                        ],
                        "policy": {
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "variableName": "pipelineReturnValue",
                            "value": [
                                {
                                    "key": "outputStopETLAfterIngestion",
                                    "value": {
                                        "type": "Expression",
                                        "content": "@activity('Execute ProcessIngestion').output.pipelineReturnValue['outputStopETL']"
                                    }
                                }
                            ],
                            "setSystemVariable": true
                        }
                    },
                    {
                        "name": "setOutputStopOnFailureFileMandatoriness",
                        "type": "SetVariable",
                        "dependsOn": [
                            {
                                "activity": "Execute Mandatoriness Check",
                                "dependencyConditions": [
                                    "Failed"
                                ]
                            }
                        ],
                        "policy": {
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "variableName": "pipelineReturnValue",
                            "value": [
                                {
                                    "key": "outputStopETLAfterIngestion",
                                    "value": {
                                        "type": "Boolean",
                                        "content": true
                                    }
                                }
                            ],
                            "setSystemVariable": true
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {}
                },
                "parameters": {
                    "EntRunId": {
                        "type": "string"
                    },
                    "EntTriggerTime": {
                        "type": "string"
                    },
                    "FwkTriggerId": {
                        "type": "string"
                    },
                    "FwkLayerId": {
                        "type": "string"
                    },
                    "ADFTriggerName": {
                        "type": "string"
                    }
                },
                "folder": {
                    "name": "01 Ingestion Module"
                },
                "annotations": [],
                "lastPublishTime": "2023-07-06T08:29:20Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/pipelines/PL_ING_01_01_FileMandatorinessCheck')]",
                "[concat(variables('factoryId'), '/pipelines/PL_ING_01_02_PreProcessIngestion')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/PL_ING_01_01_FileMandatorinessCheck')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "LookupIngtFileCheck",
                        "type": "Lookup",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "0.12:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "AzureSqlSource",
                                "sqlReaderStoredProcedureName": "[[dbo].[sps_LookupIngtFileCheck]",
                                "storedProcedureParameters": {
                                    "FwkTriggerId": {
                                        "type": "String",
                                        "value": {
                                            "value": "@pipeline().parameters.FwkTriggerId",
                                            "type": "Expression"
                                        }
                                    }
                                },
                                "queryTimeout": "02:00:00",
                                "partitionOption": "None"
                            },
                            "dataset": {
                                "referenceName": "DS_SQL_Configuration",
                                "type": "DatasetReference",
                                "parameters": {}
                            },
                            "firstRowOnly": false
                        }
                    },
                    {
                        "name": "ForEachMandatoryInstruction",
                        "description": "Iterates over a dataset and loop by number of rows it gets with the output from ‘LookupIngtFileCheck’ activity.",
                        "type": "ForEach",
                        "dependsOn": [
                            {
                                "activity": "LookupIngtFileCheck",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "items": {
                                "value": "@array(activity('LookupIngtFileCheck').output.value)",
                                "type": "Expression"
                            },
                            "isSequential": false,
                            "batchCount": 30,
                            "activities": [
                                {
                                    "name": "Switch_SourceType",
                                    "description": "Evaluates the input value ‘SourceType’ corresponding to a case that matches the condition.",
                                    "type": "Switch",
                                    "dependsOn": [],
                                    "userProperties": [],
                                    "typeProperties": {
                                        "on": {
                                            "value": "@string(item().SourceType)",
                                            "type": "Expression"
                                        },
                                        "cases": [
                                            {
                                                "value": "FileShare",
                                                "activities": [
                                                    {
                                                        "name": "Execute PL_ING_05_FileShareGetFile",
                                                        "type": "ExecutePipeline",
                                                        "dependsOn": [],
                                                        "policy": {
                                                            "secureInput": false
                                                        },
                                                        "userProperties": [],
                                                        "typeProperties": {
                                                            "pipeline": {
                                                                "referenceName": "PL_ING_05_FileShareGetFiles",
                                                                "type": "PipelineReference"
                                                            },
                                                            "waitOnCompletion": true,
                                                            "parameters": {
                                                                "FwkItem": {
                                                                    "value": "@item()",
                                                                    "type": "Expression"
                                                                }
                                                            }
                                                        }
                                                    },
                                                    {
                                                        "name": "Append Missing File_FileShare",
                                                        "type": "AppendVariable",
                                                        "dependsOn": [
                                                            {
                                                                "activity": "Execute PL_ING_05_FileShareGetFile",
                                                                "dependencyConditions": [
                                                                    "Succeeded"
                                                                ]
                                                            }
                                                        ],
                                                        "userProperties": [],
                                                        "typeProperties": {
                                                            "variableName": "varMissingFileOnPath",
                                                            "value": {
                                                                "value": "@if(equals(length(activity('Execute PL_ING_05_FileShareGetFile').output.pipelineReturnValue['outputFileName']), 0), item().Path,'')",
                                                                "type": "Expression"
                                                            }
                                                        }
                                                    }
                                                ]
                                            },
                                            {
                                                "value": "SFTP",
                                                "activities": [
                                                    {
                                                        "name": "Execute PL_ING_06_SFTPGetFile",
                                                        "type": "ExecutePipeline",
                                                        "dependsOn": [],
                                                        "policy": {
                                                            "secureInput": false
                                                        },
                                                        "userProperties": [],
                                                        "typeProperties": {
                                                            "pipeline": {
                                                                "referenceName": "PL_ING_06_SFTPGetFiles",
                                                                "type": "PipelineReference"
                                                            },
                                                            "waitOnCompletion": true,
                                                            "parameters": {
                                                                "FwkItem": {
                                                                    "value": "@item()",
                                                                    "type": "Expression"
                                                                }
                                                            }
                                                        }
                                                    },
                                                    {
                                                        "name": "Append Missing File_SFTP",
                                                        "type": "AppendVariable",
                                                        "dependsOn": [
                                                            {
                                                                "activity": "Execute PL_ING_06_SFTPGetFile",
                                                                "dependencyConditions": [
                                                                    "Succeeded"
                                                                ]
                                                            }
                                                        ],
                                                        "userProperties": [],
                                                        "typeProperties": {
                                                            "variableName": "varMissingFileOnPath",
                                                            "value": {
                                                                "value": "@if(equals(length(activity('Execute PL_ING_06_SFTPGetFile').output.pipelineReturnValue['outputFileName']), 0), item().Path,'')",
                                                                "type": "Expression"
                                                            }
                                                        }
                                                    }
                                                ]
                                            },
                                            {
                                                "value": "ADLS",
                                                "activities": [
                                                    {
                                                        "name": "Execute PL_ING_07_ADLSGetFile",
                                                        "type": "ExecutePipeline",
                                                        "dependsOn": [],
                                                        "policy": {
                                                            "secureInput": false
                                                        },
                                                        "userProperties": [],
                                                        "typeProperties": {
                                                            "pipeline": {
                                                                "referenceName": "PL_ING_07_ADLSGetFiles",
                                                                "type": "PipelineReference"
                                                            },
                                                            "waitOnCompletion": true,
                                                            "parameters": {
                                                                "FwkItem": {
                                                                    "value": "@item()",
                                                                    "type": "Expression"
                                                                }
                                                            }
                                                        }
                                                    },
                                                    {
                                                        "name": "Append Missing File_ADLS",
                                                        "type": "AppendVariable",
                                                        "dependsOn": [
                                                            {
                                                                "activity": "Execute PL_ING_07_ADLSGetFile",
                                                                "dependencyConditions": [
                                                                    "Succeeded"
                                                                ]
                                                            }
                                                        ],
                                                        "userProperties": [],
                                                        "typeProperties": {
                                                            "variableName": "varMissingFileOnPath",
                                                            "value": {
                                                                "value": "@if(equals(length(activity('Execute PL_ING_07_ADLSGetFile').output.pipelineReturnValue['outputFileName']), 0), item().Path,'')",
                                                                "type": "Expression"
                                                            }
                                                        }
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "name": "FilterOfNotExistingFiles",
                        "type": "Filter",
                        "dependsOn": [
                            {
                                "activity": "ForEachMandatoryInstruction",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "items": {
                                "value": "@variables('varMissingFileOnPath')",
                                "type": "Expression"
                            },
                            "condition": {
                                "value": "@not(equals(item(),''))",
                                "type": "Expression"
                            }
                        }
                    },
                    {
                        "name": "IfMissingFilesLogToMattermost",
                        "type": "IfCondition",
                        "dependsOn": [
                            {
                                "activity": "SetOutputIsMandatoryMissingFiles",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "expression": {
                                "value": "@empty(activity('FilterOfNotExistingFiles').output.value)",
                                "type": "Expression"
                            },
                            "ifFalseActivities": [
                                {
                                    "name": "Log Missing mandatorty files",
                                    "type": "ExecutePipeline",
                                    "dependsOn": [],
                                    "policy": {
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "pipeline": {
                                            "referenceName": "PL_LogToMattermost",
                                            "type": "PipelineReference"
                                        },
                                        "waitOnCompletion": true,
                                        "parameters": {
                                            "Message": {
                                                "value": "@concat('Execution of pipeline ''PL_ING_00_Ingestion'' for FwkTriggerId **', pipeline().parameters.FwkTriggerId,'** will not start because mandatory source file(s) are missing: \\n',replace(replace(replace(string(activity('FilterOfNotExistingFiles').output.value),'[\"','- '), '\"]', ''),'\",\"', '\\n- '))",
                                                "type": "Expression"
                                            },
                                            "EntRunId": {
                                                "value": "@pipeline().parameters.EntRunId",
                                                "type": "Expression"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "name": "SetOutputIsMandatoryMissingFiles",
                        "type": "SetVariable",
                        "dependsOn": [
                            {
                                "activity": "FilterOfNotExistingFiles",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "variableName": "pipelineReturnValue",
                            "value": [
                                {
                                    "key": "outputIsMissingMandatoryFiles",
                                    "value": {
                                        "type": "Expression",
                                        "content": "@if(empty(activity('FilterOfNotExistingFiles').output.value),'N', 'Y')"
                                    }
                                }
                            ],
                            "setSystemVariable": true
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {}
                },
                "parameters": {
                    "FwkTriggerId": {
                        "type": "string"
                    },
                    "EntRunId": {
                        "type": "string"
                    }
                },
                "variables": {
                    "varMissingFileOnPath": {
                        "type": "Array"
                    }
                },
                "folder": {
                    "name": "01 Ingestion Module"
                },
                "annotations": []
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/datasets/DS_SQL_Configuration')]",
                "[concat(variables('factoryId'), '/pipelines/PL_LogToMattermost')]",
                "[concat(variables('factoryId'), '/pipelines/PL_ING_05_FileShareGetFiles')]",
                "[concat(variables('factoryId'), '/pipelines/PL_ING_06_SFTPGetFiles')]",
                "[concat(variables('factoryId'), '/pipelines/PL_ING_07_ADLSGetFiles')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/PL_ING_01_02_PreProcessIngestion')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "sp_FwkLogInsert",
                        "description": "Executes the SP spi_FwkLogInsert to insert record into FwkLog table with the execution module information by pipeline id and with null status.",
                        "type": "SqlServerStoredProcedure",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "storedProcedureName": "[[dbo].[spi_FwkLogInsert]",
                            "storedProcedureParameters": {
                                "EntRunId": {
                                    "value": {
                                        "value": "@pipeline().parameters.EntRunId",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                },
                                "Module": {
                                    "value": {
                                        "value": "Ingestion",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                },
                                "ModuleRunId": {
                                    "value": {
                                        "value": "@pipeline().RunId",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                },
                                "StartDate": {
                                    "value": {
                                        "value": "@formatdatetime(pipeline().TriggerTime)",
                                        "type": "Expression"
                                    },
                                    "type": "DateTime"
                                },
                                "ADFTriggerName": {
                                    "value": {
                                        "value": "@pipeline().parameters.ADFTriggerName",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                }
                            }
                        },
                        "linkedServiceName": {
                            "referenceName": "LS_configurationDB",
                            "type": "LinkedServiceReference"
                        }
                    },
                    {
                        "name": "If PreTransformationNotebookRun",
                        "type": "IfCondition",
                        "dependsOn": [
                            {
                                "activity": "LookupDtLayer",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "expression": {
                                "value": "@and(\n    greater(activity('LookupDtLayer').output.count, 0),\n    not(equals(activity('LookupDtLayer').output.value[0]['PreTransformationNotebookRun'], null))\n)",
                                "type": "Expression"
                            },
                            "ifTrueActivities": [
                                {
                                    "name": "DT_RunPreTransformationNotebook",
                                    "type": "DatabricksNotebook",
                                    "dependsOn": [
                                        {
                                            "activity": "sp_FwkLogInsert_PreIngestion",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "timeout": "0.12:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "notebookPath": {
                                            "value": "@concat('/Code/compartment/', activity('LookupDtLayer').output.value[0]['PreTransformationNotebookRun'])",
                                            "type": "Expression"
                                        },
                                        "baseParameters": {
                                            "FwkTriggerId": {
                                                "value": "@pipeline().parameters.FwkTriggerId",
                                                "type": "Expression"
                                            },
                                            "ADFTriggerName": {
                                                "value": "@pipeline().parameters.ADFTriggerName",
                                                "type": "Expression"
                                            }
                                        }
                                    },
                                    "linkedServiceName": {
                                        "referenceName": "LS_databricks",
                                        "type": "LinkedServiceReference",
                                        "parameters": {
                                            "ClusterId": {
                                                "value": "@activity('LookupDtLayer').output.value[0]['ClusterId']",
                                                "type": "Expression"
                                            }
                                        }
                                    }
                                },
                                {
                                    "name": "sp_UpdatePreIngestionLog_succeeded",
                                    "description": "Executes the SP spu_FwkLogUpdate to update the record created by the ‘InsertIntoFwkLog’ activity in the table ‘FwkLog’ by updating the columns ‘PipelineStatus’ to ‘Success’.",
                                    "type": "SqlServerStoredProcedure",
                                    "dependsOn": [
                                        {
                                            "activity": "DT_RunPreTransformationNotebook",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "storedProcedureName": "[[dbo].[spu_FwkLogUpdate]",
                                        "storedProcedureParameters": {
                                            "ModuleRunId": {
                                                "value": {
                                                    "value": "@concat(pipeline().RunId, '-pre')",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            },
                                            "PipelineStatus": {
                                                "value": {
                                                    "value": "Succeeded",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            },
                                            "JobRunUrl": {
                                                "value": {
                                                    "value": "@activity('DT_RunPreTransformationNotebook').output.runPageUrl",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            }
                                        }
                                    },
                                    "linkedServiceName": {
                                        "referenceName": "LS_configurationDB",
                                        "type": "LinkedServiceReference"
                                    }
                                },
                                {
                                    "name": "sp_UpdatePreIngestionLog_failed",
                                    "description": "Executes the SP spu_FwkLogUpdate to update the record created by the ‘InsertIntoFwkLog’ activity in the table ‘FwkLog’ by updating the columns ‘PipelineStatus’ to ‘Success’.",
                                    "type": "SqlServerStoredProcedure",
                                    "dependsOn": [
                                        {
                                            "activity": "DT_RunPreTransformationNotebook",
                                            "dependencyConditions": [
                                                "Failed"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "storedProcedureName": "[[dbo].[spu_FwkLogUpdate]",
                                        "storedProcedureParameters": {
                                            "ModuleRunId": {
                                                "value": {
                                                    "value": "@concat(pipeline().RunId, '-pre')",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            },
                                            "PipelineStatus": {
                                                "value": {
                                                    "value": "Failed",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            },
                                            "JobRunUrl": {
                                                "value": {
                                                    "value": "@activity('DT_RunPreTransformationNotebook').output.runPageUrl",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            }
                                        }
                                    },
                                    "linkedServiceName": {
                                        "referenceName": "LS_configurationDB",
                                        "type": "LinkedServiceReference"
                                    }
                                },
                                {
                                    "name": "sp_FwkLogInsert_PreIngestion",
                                    "description": "Executes the SP spi_FwkLogInsert to insert record into FwkLog table with the execution module information by pipeline id and with null status.",
                                    "type": "SqlServerStoredProcedure",
                                    "dependsOn": [],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "storedProcedureName": "[[dbo].[spi_FwkLogInsert]",
                                        "storedProcedureParameters": {
                                            "EntRunId": {
                                                "value": {
                                                    "value": "@pipeline().parameters.EntRunId",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            },
                                            "Module": {
                                                "value": "Ingestion > PreTransformationNotebook",
                                                "type": "String"
                                            },
                                            "ModuleRunId": {
                                                "value": {
                                                    "value": "@concat(pipeline().RunId, '-pre')",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            },
                                            "StartDate": {
                                                "value": {
                                                    "value": "@formatdatetime(pipeline().TriggerTime)",
                                                    "type": "Expression"
                                                },
                                                "type": "DateTime"
                                            },
                                            "ADFTriggerName": {
                                                "value": {
                                                    "value": "@pipeline().parameters.ADFTriggerName",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            }
                                        }
                                    },
                                    "linkedServiceName": {
                                        "referenceName": "LS_configurationDB",
                                        "type": "LinkedServiceReference"
                                    }
                                },
                                {
                                    "name": "setPreTransformationNotebookOutput",
                                    "type": "SetVariable",
                                    "dependsOn": [
                                        {
                                            "activity": "sp_UpdatePreIngestionLog_succeeded",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "variableName": "varPreTransformationNotebookOutput",
                                        "value": {
                                            "value": "@string(activity('DT_RunPreTransformationNotebook').output)",
                                            "type": "Expression"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "name": "sp_UpdatePreIngestionExecutionLog_failed",
                        "description": "Executes the SP spu_FwkLogUpdate to update the record created by the ‘InsertIntoFwkLog’ activity in the table ‘FwkLog’ by updating the columns ‘PipelineStatus’ to ‘Success’.",
                        "type": "SqlServerStoredProcedure",
                        "dependsOn": [
                            {
                                "activity": "If PreTransformationNotebookRun",
                                "dependencyConditions": [
                                    "Failed"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "storedProcedureName": "[[dbo].[spu_FwkLogUpdate]",
                            "storedProcedureParameters": {
                                "ModuleRunId": {
                                    "value": {
                                        "value": "@pipeline().RunId",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                },
                                "PipelineStatus": {
                                    "value": {
                                        "value": "Failed",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                },
                                "JobRunUrl": {
                                    "value": null,
                                    "type": "String"
                                },
                                "ErrorMessage": {
                                    "value": null,
                                    "type": "String"
                                }
                            }
                        },
                        "linkedServiceName": {
                            "referenceName": "LS_configurationDB",
                            "type": "LinkedServiceReference"
                        }
                    },
                    {
                        "name": "LookupDtLayer",
                        "description": "Executes the SP ‘sps_LookupDtLayer’ to get the information about DtLayer .",
                        "type": "Lookup",
                        "dependsOn": [
                            {
                                "activity": "sp_FwkLogInsert",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "AzureSqlSource",
                                "sqlReaderStoredProcedureName": "[[dbo].[sps_LookupDtLayer]",
                                "storedProcedureParameters": {
                                    "DtOrder": {
                                        "type": "Int32",
                                        "value": {
                                            "value": "@if(equals(pipeline().parameters.FwkTriggerId, 'Deployment'),  -100, -1)",
                                            "type": "Expression"
                                        }
                                    },
                                    "FwkLayerId": {
                                        "type": "String",
                                        "value": null
                                    },
                                    "FwkTriggerId": {
                                        "type": "String",
                                        "value": {
                                            "value": "@pipeline().parameters.FwkTriggerId",
                                            "type": "Expression"
                                        }
                                    }
                                },
                                "queryTimeout": "02:00:00",
                                "partitionOption": "None"
                            },
                            "dataset": {
                                "referenceName": "DS_SQL_Configuration",
                                "type": "DatasetReference",
                                "parameters": {}
                            },
                            "firstRowOnly": false
                        }
                    },
                    {
                        "name": "IfStopETL",
                        "type": "IfCondition",
                        "dependsOn": [
                            {
                                "activity": "IfWorkflowDefined",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "expression": {
                                "value": "@if(contains(json(variables('varPreTransformationNotebookOutput')), 'runOutput'),\n\tif(contains(json(variables('varPreTransformationNotebookOutput')).runOutput, 'stopETL'), \n\t\tjson(variables('varPreTransformationNotebookOutput')).runOutput['stopETL'], \n\t\t'false'\n\t),\n'false')\n\n",
                                "type": "Expression"
                            },
                            "ifFalseActivities": [
                                {
                                    "name": "Execute ProcessIngestion",
                                    "type": "ExecutePipeline",
                                    "dependsOn": [],
                                    "policy": {
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "pipeline": {
                                            "referenceName": "PL_ING_01_03_ProcessIngestion",
                                            "type": "PipelineReference"
                                        },
                                        "waitOnCompletion": true,
                                        "parameters": {
                                            "EntRunId": {
                                                "value": "@pipeline().parameters.EntRunId",
                                                "type": "Expression"
                                            },
                                            "EntTriggerTime": {
                                                "value": "@pipeline().parameters.EntTriggerTime",
                                                "type": "Expression"
                                            },
                                            "FwkTriggerId": {
                                                "value": "@pipeline().parameters.FwkTriggerId",
                                                "type": "Expression"
                                            },
                                            "LookupDtLayerOutput": {
                                                "value": "@activity('LookupDtLayer').output",
                                                "type": "Expression"
                                            },
                                            "ModuleRunId": {
                                                "value": "@pipeline().RunId",
                                                "type": "Expression"
                                            },
                                            "ADFTriggerName": {
                                                "value": "@pipeline().parameters.ADFTriggerName",
                                                "type": "Expression"
                                            }
                                        }
                                    }
                                },
                                {
                                    "name": "setOutputStopETLResult",
                                    "type": "SetVariable",
                                    "dependsOn": [
                                        {
                                            "activity": "Execute ProcessIngestion",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "variableName": "pipelineReturnValue",
                                        "value": [
                                            {
                                                "key": "outputStopETL",
                                                "value": {
                                                    "type": "Expression",
                                                    "content": "@activity('Execute ProcessIngestion').output.pipelineReturnValue['outputStopETL']"
                                                }
                                            }
                                        ],
                                        "setSystemVariable": true
                                    }
                                },
                                {
                                    "name": "setOutputStopETLResult_copy1",
                                    "type": "SetVariable",
                                    "dependsOn": [
                                        {
                                            "activity": "Execute ProcessIngestion",
                                            "dependencyConditions": [
                                                "Failed"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "variableName": "pipelineReturnValue",
                                        "value": [
                                            {
                                                "key": "outputStopETL",
                                                "value": {
                                                    "type": "Expression",
                                                    "content": "@activity('Execute ProcessIngestion').output.pipelineReturnValue['outputStopETL']"
                                                }
                                            }
                                        ],
                                        "setSystemVariable": true
                                    }
                                }
                            ],
                            "ifTrueActivities": [
                                {
                                    "name": "sp_UpdatePreIngestionExecutionLog_stopped",
                                    "description": "",
                                    "type": "SqlServerStoredProcedure",
                                    "dependsOn": [],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "storedProcedureName": "[[dbo].[spu_FwkLogUpdate]",
                                        "storedProcedureParameters": {
                                            "ModuleRunId": {
                                                "value": {
                                                    "value": "@pipeline().RunId",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            },
                                            "PipelineStatus": {
                                                "value": {
                                                    "value": "Stopped - Request from PreTransformationNotebook",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            },
                                            "JobRunUrl": {
                                                "value": null,
                                                "type": "String"
                                            },
                                            "ErrorMessage": {
                                                "value": null,
                                                "type": "String"
                                            }
                                        }
                                    },
                                    "linkedServiceName": {
                                        "referenceName": "LS_configurationDB",
                                        "type": "LinkedServiceReference"
                                    }
                                },
                                {
                                    "name": "setOutputStopETLTrue",
                                    "type": "SetVariable",
                                    "dependsOn": [
                                        {
                                            "activity": "sp_UpdatePreIngestionExecutionLog_stopped",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "variableName": "pipelineReturnValue",
                                        "value": [
                                            {
                                                "key": "outputStopETL",
                                                "value": {
                                                    "type": "Boolean",
                                                    "content": true
                                                }
                                            }
                                        ],
                                        "setSystemVariable": true
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "name": "IfWorkflowDefined",
                        "type": "IfCondition",
                        "dependsOn": [
                            {
                                "activity": "If PreTransformationNotebookRun",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "expression": {
                                "value": "@if(contains(json(variables('varPreTransformationNotebookOutput')), 'runOutput'),\n\tif(contains(json(variables('varPreTransformationNotebookOutput')).runOutput, 'workflow'),\n\t\tcontains(string(json(variables('varPreTransformationNotebookOutput')).runOutput), 'WorkflowId'),\n\t\t'false'\n\t),\n'false')",
                                "type": "Expression"
                            },
                            "ifTrueActivities": [
                                {
                                    "name": "Execute PL_TriggerWorkflow",
                                    "type": "ExecutePipeline",
                                    "dependsOn": [],
                                    "policy": {
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "pipeline": {
                                            "referenceName": "PL_TriggerWorkflow",
                                            "type": "PipelineReference"
                                        },
                                        "waitOnCompletion": true,
                                        "parameters": {
                                            "Workflow": {
                                                "value": "@json(variables('varPreTransformationNotebookOutput')).runOutput['workflow']",
                                                "type": "Expression"
                                            },
                                            "EntRunId": {
                                                "value": "@pipeline().parameters.EntRunId",
                                                "type": "Expression"
                                            },
                                            "Module": "Ingestion"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "name": "sp_UpdateWorkflowExecutionLog_failed",
                        "description": "Executes the SP spu_FwkLogUpdate to update the record created by the ‘InsertIntoFwkLog’ activity in the table ‘FwkLog’ by updating the columns ‘PipelineStatus’ to ‘Success’.",
                        "type": "SqlServerStoredProcedure",
                        "dependsOn": [
                            {
                                "activity": "IfWorkflowDefined",
                                "dependencyConditions": [
                                    "Failed"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "storedProcedureName": "[[dbo].[spu_FwkLogUpdate]",
                            "storedProcedureParameters": {
                                "ModuleRunId": {
                                    "value": {
                                        "value": "@pipeline().RunId",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                },
                                "PipelineStatus": {
                                    "value": {
                                        "value": "Failed",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                },
                                "JobRunUrl": {
                                    "value": null,
                                    "type": "String"
                                },
                                "ErrorMessage": {
                                    "value": null,
                                    "type": "String"
                                }
                            }
                        },
                        "linkedServiceName": {
                            "referenceName": "LS_configurationDB",
                            "type": "LinkedServiceReference"
                        }
                    },
                    {
                        "name": "setOutputStopOnFailurePreIngestionFailure",
                        "type": "SetVariable",
                        "dependsOn": [
                            {
                                "activity": "sp_UpdatePreIngestionExecutionLog_failed",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "variableName": "pipelineReturnValue",
                            "value": [
                                {
                                    "key": "outputStopETL",
                                    "value": {
                                        "type": "Boolean",
                                        "content": true
                                    }
                                }
                            ],
                            "setSystemVariable": true
                        }
                    },
                    {
                        "name": "setOutputStopOnFailureWorkflowFailure",
                        "type": "SetVariable",
                        "dependsOn": [
                            {
                                "activity": "sp_UpdateWorkflowExecutionLog_failed",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "variableName": "pipelineReturnValue",
                            "value": [
                                {
                                    "key": "outputStopETL",
                                    "value": {
                                        "type": "Boolean",
                                        "content": true
                                    }
                                }
                            ],
                            "setSystemVariable": true
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {}
                },
                "parameters": {
                    "EntRunId": {
                        "type": "string"
                    },
                    "EntTriggerTime": {
                        "type": "string"
                    },
                    "FwkTriggerId": {
                        "type": "string"
                    },
                    "FwkLayerId": {
                        "type": "string"
                    },
                    "ADFTriggerName": {
                        "type": "string"
                    }
                },
                "variables": {
                    "varPreTransformationNotebookOutput": {
                        "type": "String",
                        "defaultValue": "{}"
                    }
                },
                "folder": {
                    "name": "01 Ingestion Module"
                },
                "annotations": []
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/LS_configurationDB')]",
                "[concat(variables('factoryId'), '/datasets/DS_SQL_Configuration')]",
                "[concat(variables('factoryId'), '/linkedServices/LS_databricks')]",
                "[concat(variables('factoryId'), '/pipelines/PL_ING_01_03_ProcessIngestion')]",
                "[concat(variables('factoryId'), '/pipelines/PL_TriggerWorkflow')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/PL_ING_01_03_ProcessIngestion')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "sp_UpdateExecutionLog_failed",
                        "description": "Executes the SP spu_FwkLogUpdate to update the record created by the ‘InsertIntoFwkLog’ activity in the table ‘FwkLog’ by updating the columns ‘PipelineStatus’ to ‘Success’.",
                        "type": "SqlServerStoredProcedure",
                        "dependsOn": [
                            {
                                "activity": "If PostTransformationNotebookRun",
                                "dependencyConditions": [
                                    "Failed"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "storedProcedureName": "[[dbo].[spu_FwkLogUpdate]",
                            "storedProcedureParameters": {
                                "ModuleRunId": {
                                    "value": {
                                        "value": "@pipeline().parameters.ModuleRunId",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                },
                                "PipelineStatus": {
                                    "value": {
                                        "value": "Failed",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                },
                                "JobRunUrl": {
                                    "value": null,
                                    "type": "String"
                                },
                                "ErrorMessage": {
                                    "value": null,
                                    "type": "String"
                                }
                            }
                        },
                        "linkedServiceName": {
                            "referenceName": "LS_configurationDB",
                            "type": "LinkedServiceReference"
                        }
                    },
                    {
                        "name": "LookupIngtBatch",
                        "type": "Lookup",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "0.12:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "AzureSqlSource",
                                "sqlReaderStoredProcedureName": "[[dbo].[sps_LookupIngtBatch]",
                                "storedProcedureParameters": {
                                    "FwkTriggerId": {
                                        "type": "String",
                                        "value": {
                                            "value": "@pipeline().parameters.FwkTriggerId",
                                            "type": "Expression"
                                        }
                                    }
                                },
                                "queryTimeout": "02:00:00",
                                "partitionOption": "None"
                            },
                            "dataset": {
                                "referenceName": "DS_SQL_Configuration",
                                "type": "DatasetReference",
                                "parameters": {}
                            },
                            "firstRowOnly": false
                        }
                    },
                    {
                        "name": "ForEachBatch",
                        "type": "ForEach",
                        "dependsOn": [
                            {
                                "activity": "LookupIngtBatch",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "items": {
                                "value": "@array(activity('LookupIngtBatch').output.value)",
                                "type": "Expression"
                            },
                            "isSequential": true,
                            "activities": [
                                {
                                    "name": "IfBatchIsStopped",
                                    "type": "IfCondition",
                                    "dependsOn": [],
                                    "userProperties": [],
                                    "typeProperties": {
                                        "expression": {
                                            "value": "@variables('varStopforBatch')",
                                            "type": "Expression"
                                        },
                                        "ifFalseActivities": [
                                            {
                                                "name": "Execute PL_ING_01_01_ProcessBatch",
                                                "type": "ExecutePipeline",
                                                "dependsOn": [],
                                                "policy": {
                                                    "secureInput": false
                                                },
                                                "userProperties": [],
                                                "typeProperties": {
                                                    "pipeline": {
                                                        "referenceName": "PL_ING_01_04_ProcessBatches",
                                                        "type": "PipelineReference"
                                                    },
                                                    "waitOnCompletion": true,
                                                    "parameters": {
                                                        "BatchItem": {
                                                            "value": "@item()",
                                                            "type": "Expression"
                                                        },
                                                        "EntRunId": {
                                                            "value": "@pipeline().parameters.EntRunId",
                                                            "type": "Expression"
                                                        },
                                                        "EntTriggerTime": {
                                                            "value": "@pipeline().parameters.EntTriggerTime",
                                                            "type": "Expression"
                                                        },
                                                        "ADFTriggerName": {
                                                            "value": "@pipeline().parameters.ADFTriggerName",
                                                            "type": "Expression"
                                                        },
                                                        "LookupDtLayerOutput": {
                                                            "value": "@pipeline().parameters.LookupDtLayerOutput",
                                                            "type": "Expression"
                                                        }
                                                    }
                                                }
                                            },
                                            {
                                                "name": "setVarStopETLforBatch",
                                                "type": "SetVariable",
                                                "dependsOn": [
                                                    {
                                                        "activity": "Execute PL_ING_01_01_ProcessBatch",
                                                        "dependencyConditions": [
                                                            "Succeeded"
                                                        ]
                                                    }
                                                ],
                                                "policy": {
                                                    "secureOutput": false,
                                                    "secureInput": false
                                                },
                                                "userProperties": [],
                                                "typeProperties": {
                                                    "variableName": "varStopforBatch",
                                                    "value": {
                                                        "value": "@activity('Execute PL_ING_01_01_ProcessBatch').output.pipelineReturnValue['outputStopETL']",
                                                        "type": "Expression"
                                                    }
                                                }
                                            },
                                            {
                                                "name": "setOutputBatchStopOnFailureResult",
                                                "type": "SetVariable",
                                                "dependsOn": [
                                                    {
                                                        "activity": "Execute PL_ING_01_01_ProcessBatch",
                                                        "dependencyConditions": [
                                                            "Failed"
                                                        ]
                                                    }
                                                ],
                                                "policy": {
                                                    "secureOutput": false,
                                                    "secureInput": false
                                                },
                                                "userProperties": [],
                                                "typeProperties": {
                                                    "variableName": "varStopforBatch",
                                                    "value": {
                                                        "value": "@activity('Execute PL_ING_01_01_ProcessBatch').output.pipelineReturnValue['outputStopETL']",
                                                        "type": "Expression"
                                                    }
                                                }
                                            }
                                        ]
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "name": "If PostTransformationNotebookRun",
                        "type": "IfCondition",
                        "dependsOn": [
                            {
                                "activity": "ForEachBatch",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "expression": {
                                "value": "@and(\n    greater(pipeline().parameters.LookupDtLayerOutput['count'], 0),\n    not(equals(pipeline().parameters.LookupDtLayerOutput['value'][0]['PostTransformationNotebookRun'], null))\n)",
                                "type": "Expression"
                            },
                            "ifTrueActivities": [
                                {
                                    "name": "DT_RunPostTransformationNotebook",
                                    "type": "DatabricksNotebook",
                                    "dependsOn": [
                                        {
                                            "activity": "sp_FwkLogInsertPostIngestion",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "timeout": "0.12:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "notebookPath": {
                                            "value": "@concat('/Code/compartment/', pipeline().parameters.LookupDtLayerOutput['value'][0]['PostTransformationNotebookRun'])",
                                            "type": "Expression"
                                        },
                                        "baseParameters": {
                                            "FwkTriggerId": {
                                                "value": "@pipeline().parameters.FwkTriggerId",
                                                "type": "Expression"
                                            },
                                            "ADFTriggerName": {
                                                "value": "@pipeline().parameters.ADFTriggerName",
                                                "type": "Expression"
                                            }
                                        }
                                    },
                                    "linkedServiceName": {
                                        "referenceName": "LS_databricks",
                                        "type": "LinkedServiceReference",
                                        "parameters": {
                                            "ClusterId": {
                                                "value": "@pipeline().parameters.LookupDtLayerOutput['value'][0]['ClusterId']\n",
                                                "type": "Expression"
                                            }
                                        }
                                    }
                                },
                                {
                                    "name": "sp_UpdatePostIngestionLog_succeeded",
                                    "description": "Executes the SP spu_FwkLogUpdate to update the record created by the ‘InsertIntoFwkLog’ activity in the table ‘FwkLog’ by updating the columns ‘PipelineStatus’ to ‘Success’.",
                                    "type": "SqlServerStoredProcedure",
                                    "dependsOn": [
                                        {
                                            "activity": "DT_RunPostTransformationNotebook",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "storedProcedureName": "[[dbo].[spu_FwkLogUpdate]",
                                        "storedProcedureParameters": {
                                            "ModuleRunId": {
                                                "value": {
                                                    "value": "@concat(pipeline().RunId, '-post')",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            },
                                            "PipelineStatus": {
                                                "value": {
                                                    "value": "Succeeded",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            },
                                            "JobRunUrl": {
                                                "value": {
                                                    "value": "@activity('DT_RunPostTransformationNotebook').output.runPageUrl",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            }
                                        }
                                    },
                                    "linkedServiceName": {
                                        "referenceName": "LS_configurationDB",
                                        "type": "LinkedServiceReference"
                                    }
                                },
                                {
                                    "name": "sp_UpdatePostIngestionLog_failed",
                                    "description": "Executes the SP spu_FwkLogUpdate to update the record created by the ‘InsertIntoFwkLog’ activity in the table ‘FwkLog’ by updating the columns ‘PipelineStatus’ to ‘Success’.",
                                    "type": "SqlServerStoredProcedure",
                                    "dependsOn": [
                                        {
                                            "activity": "DT_RunPostTransformationNotebook",
                                            "dependencyConditions": [
                                                "Failed"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "storedProcedureName": "[[dbo].[spu_FwkLogUpdate]",
                                        "storedProcedureParameters": {
                                            "ModuleRunId": {
                                                "value": {
                                                    "value": "@concat(pipeline().RunId, '-post')",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            },
                                            "PipelineStatus": {
                                                "value": {
                                                    "value": "Failed",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            },
                                            "JobRunUrl": {
                                                "value": {
                                                    "value": "@activity('DT_RunPostTransformationNotebook').output.runPageUrl",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            }
                                        }
                                    },
                                    "linkedServiceName": {
                                        "referenceName": "LS_configurationDB",
                                        "type": "LinkedServiceReference"
                                    }
                                },
                                {
                                    "name": "sp_FwkLogInsertPostIngestion",
                                    "description": "Executes the SP spi_FwkLogInsert to insert record into FwkLog table with the execution module information by pipeline id and with null status.",
                                    "type": "SqlServerStoredProcedure",
                                    "dependsOn": [],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "storedProcedureName": "[[dbo].[spi_FwkLogInsert]",
                                        "storedProcedureParameters": {
                                            "EntRunId": {
                                                "value": {
                                                    "value": "@pipeline().parameters.EntRunId",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            },
                                            "Module": {
                                                "value": {
                                                    "value": "Ingestion > PostTransformationNotebook",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            },
                                            "ModuleRunId": {
                                                "value": {
                                                    "value": "@concat(pipeline().RunId, '-post')",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            },
                                            "StartDate": {
                                                "value": {
                                                    "value": "@formatdatetime(pipeline().TriggerTime)",
                                                    "type": "Expression"
                                                },
                                                "type": "DateTime"
                                            },
                                            "ADFTriggerName": {
                                                "value": {
                                                    "value": "@pipeline().parameters.ADFTriggerName",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            }
                                        }
                                    },
                                    "linkedServiceName": {
                                        "referenceName": "LS_configurationDB",
                                        "type": "LinkedServiceReference"
                                    }
                                },
                                {
                                    "name": "setPostTransformationNotebookOutput",
                                    "type": "SetVariable",
                                    "dependsOn": [
                                        {
                                            "activity": "sp_UpdatePostIngestionLog_succeeded",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "variableName": "varPostTransformationNotebookOutput",
                                        "value": {
                                            "value": "@string(activity('DT_RunPostTransformationNotebook').output)",
                                            "type": "Expression"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "name": "sp_UpdateForEachLog_failed",
                        "description": "Executes the SP spu_FwkLogUpdate to update the record created by the ‘InsertIntoFwkLog’ activity in the table ‘FwkLog’ by updating the columns ‘PipelineStatus’ to ‘Success’.",
                        "type": "SqlServerStoredProcedure",
                        "dependsOn": [
                            {
                                "activity": "setOutputStopOnFailureResult",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "storedProcedureName": "[[dbo].[spu_FwkLogUpdate]",
                            "storedProcedureParameters": {
                                "ModuleRunId": {
                                    "value": {
                                        "value": "@pipeline().parameters.ModuleRunId",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                },
                                "PipelineStatus": {
                                    "value": {
                                        "value": "Failed",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                },
                                "JobRunUrl": {
                                    "value": null,
                                    "type": "String"
                                },
                                "ErrorMessage": {
                                    "value": null,
                                    "type": "String"
                                }
                            }
                        },
                        "linkedServiceName": {
                            "referenceName": "LS_configurationDB",
                            "type": "LinkedServiceReference"
                        }
                    },
                    {
                        "name": "IfStopETL",
                        "type": "IfCondition",
                        "dependsOn": [
                            {
                                "activity": "IfWorkflowDefined",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "expression": {
                                "value": "@if(contains(json(variables('varPostTransformationNotebookOutput')), 'runOutput'),\n\tif(contains(json(variables('varPostTransformationNotebookOutput')).runOutput, 'stopETL'), \n\t\tjson(variables('varPostTransformationNotebookOutput')).runOutput['stopETL'], \n\t\t'false'\n\t),\n'false')\n",
                                "type": "Expression"
                            },
                            "ifFalseActivities": [
                                {
                                    "name": "sp_UpdateExecutionLog_succeeded",
                                    "description": "Executes the SP spu_FwkLogUpdate to update the record created by the ‘InsertIntoFwkLog’ activity in the table ‘FwkLog’ by updating the columns ‘PipelineStatus’ to ‘Success’.",
                                    "type": "SqlServerStoredProcedure",
                                    "dependsOn": [],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "storedProcedureName": "[[dbo].[spu_FwkLogUpdate]",
                                        "storedProcedureParameters": {
                                            "ModuleRunId": {
                                                "value": {
                                                    "value": "@pipeline().parameters.ModuleRunId",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            },
                                            "PipelineStatus": {
                                                "value": {
                                                    "value": "@if(greater(activity('LookupIngtBatch').output.count, 0), 'Succeeded', 'Skipped')",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            },
                                            "JobRunUrl": {
                                                "value": null,
                                                "type": "String"
                                            },
                                            "ErrorMessage": {
                                                "value": null,
                                                "type": "String"
                                            }
                                        }
                                    },
                                    "linkedServiceName": {
                                        "referenceName": "LS_configurationDB",
                                        "type": "LinkedServiceReference"
                                    }
                                },
                                {
                                    "name": "setOutputStopETLFalse",
                                    "type": "SetVariable",
                                    "dependsOn": [
                                        {
                                            "activity": "sp_UpdateExecutionLog_succeeded",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "variableName": "pipelineReturnValue",
                                        "value": [
                                            {
                                                "key": "outputStopETL",
                                                "value": {
                                                    "type": "Boolean",
                                                    "content": false
                                                }
                                            }
                                        ],
                                        "setSystemVariable": true
                                    }
                                }
                            ],
                            "ifTrueActivities": [
                                {
                                    "name": "sp_UpdateExecutionLog_Stopped",
                                    "description": "",
                                    "type": "SqlServerStoredProcedure",
                                    "dependsOn": [],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "storedProcedureName": "[[dbo].[spu_FwkLogUpdate]",
                                        "storedProcedureParameters": {
                                            "ModuleRunId": {
                                                "value": {
                                                    "value": "@pipeline().parameters.ModuleRunId",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            },
                                            "PipelineStatus": {
                                                "value": {
                                                    "value": "Stopped - Request from PostTransformationNotebook",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            },
                                            "JobRunUrl": {
                                                "value": null,
                                                "type": "String"
                                            },
                                            "ErrorMessage": {
                                                "value": null,
                                                "type": "String"
                                            }
                                        }
                                    },
                                    "linkedServiceName": {
                                        "referenceName": "LS_configurationDB",
                                        "type": "LinkedServiceReference"
                                    }
                                },
                                {
                                    "name": "setOutputStopETLTrue",
                                    "type": "SetVariable",
                                    "dependsOn": [
                                        {
                                            "activity": "sp_UpdateExecutionLog_Stopped",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "variableName": "pipelineReturnValue",
                                        "value": [
                                            {
                                                "key": "outputStopETL",
                                                "value": {
                                                    "type": "Boolean",
                                                    "content": true
                                                }
                                            }
                                        ],
                                        "setSystemVariable": true
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "name": "IfWorkflowDefined",
                        "type": "IfCondition",
                        "dependsOn": [
                            {
                                "activity": "If PostTransformationNotebookRun",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "expression": {
                                "value": "@if(contains(json(variables('varPostTransformationNotebookOutput')), 'runOutput'),\n\tif(contains(json(variables('varPostTransformationNotebookOutput')).runOutput, 'workflow'),\n\t\tcontains(string(json(variables('varPostTransformationNotebookOutput')).runOutput), 'WorkflowId'),\n\t\t'false'\n\t),\n'false')",
                                "type": "Expression"
                            },
                            "ifTrueActivities": [
                                {
                                    "name": "Execute PL_TriggerWorkflow",
                                    "type": "ExecutePipeline",
                                    "dependsOn": [],
                                    "policy": {
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "pipeline": {
                                            "referenceName": "PL_TriggerWorkflow",
                                            "type": "PipelineReference"
                                        },
                                        "waitOnCompletion": true,
                                        "parameters": {
                                            "Workflow": {
                                                "value": "@json(variables('varPostTransformationNotebookOutput')).runOutput['workflow']",
                                                "type": "Expression"
                                            },
                                            "EntRunId": {
                                                "value": "@pipeline().parameters.EntRunId",
                                                "type": "Expression"
                                            },
                                            "Module": "Ingestion"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "name": "sp_UpdateWorkflowExecutionLog_failed",
                        "description": "Executes the SP spu_FwkLogUpdate to update the record created by the ‘InsertIntoFwkLog’ activity in the table ‘FwkLog’ by updating the columns ‘PipelineStatus’ to ‘Success’.",
                        "type": "SqlServerStoredProcedure",
                        "dependsOn": [
                            {
                                "activity": "IfWorkflowDefined",
                                "dependencyConditions": [
                                    "Failed"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "storedProcedureName": "[[dbo].[spu_FwkLogUpdate]",
                            "storedProcedureParameters": {
                                "ModuleRunId": {
                                    "value": {
                                        "value": "@pipeline().parameters.ModuleRunId",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                },
                                "PipelineStatus": {
                                    "value": {
                                        "value": "Failed",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                },
                                "JobRunUrl": {
                                    "value": null,
                                    "type": "String"
                                },
                                "ErrorMessage": {
                                    "value": null,
                                    "type": "String"
                                }
                            }
                        },
                        "linkedServiceName": {
                            "referenceName": "LS_configurationDB",
                            "type": "LinkedServiceReference"
                        }
                    },
                    {
                        "name": "setOutputStopOnFailurePostIngestion",
                        "type": "SetVariable",
                        "dependsOn": [
                            {
                                "activity": "sp_UpdateExecutionLog_failed",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "variableName": "pipelineReturnValue",
                            "value": [
                                {
                                    "key": "outputStopETL",
                                    "value": {
                                        "type": "Boolean",
                                        "content": true
                                    }
                                }
                            ],
                            "setSystemVariable": true
                        }
                    },
                    {
                        "name": "setOutputStopOnFailureResult",
                        "type": "SetVariable",
                        "dependsOn": [
                            {
                                "activity": "ForEachBatch",
                                "dependencyConditions": [
                                    "Failed"
                                ]
                            }
                        ],
                        "policy": {
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "variableName": "pipelineReturnValue",
                            "value": [
                                {
                                    "key": "outputStopETL",
                                    "value": {
                                        "type": "Expression",
                                        "content": "@or(\n    if(\n    equals(\n        toUpper(string(pipeline().parameters.LookupDtLayerOutput['value'][0]['StopIfFailure'])),\n         'TRUE'\n    ), \n    true,\n    false\n    ),\n    variables('varStopforBatch')\n)"
                                    }
                                }
                            ],
                            "setSystemVariable": true
                        }
                    },
                    {
                        "name": "setOutputStopOnFailureWorkflowFailure",
                        "type": "SetVariable",
                        "dependsOn": [
                            {
                                "activity": "sp_UpdateWorkflowExecutionLog_failed",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "variableName": "pipelineReturnValue",
                            "value": [
                                {
                                    "key": "outputStopETL",
                                    "value": {
                                        "type": "Boolean",
                                        "content": true
                                    }
                                }
                            ],
                            "setSystemVariable": true
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {}
                },
                "parameters": {
                    "EntRunId": {
                        "type": "string"
                    },
                    "EntTriggerTime": {
                        "type": "string"
                    },
                    "FwkTriggerId": {
                        "type": "string"
                    },
                    "LookupDtLayerOutput": {
                        "type": "array"
                    },
                    "ModuleRunId": {
                        "type": "string"
                    },
                    "ADFTriggerName": {
                        "type": "string"
                    }
                },
                "variables": {
                    "varPostTransformationNotebookOutput": {
                        "type": "String",
                        "defaultValue": "{}"
                    },
                    "varStopforBatch": {
                        "type": "Boolean",
                        "defaultValue": false
                    }
                },
                "folder": {
                    "name": "01 Ingestion Module"
                },
                "annotations": []
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/LS_configurationDB')]",
                "[concat(variables('factoryId'), '/datasets/DS_SQL_Configuration')]",
                "[concat(variables('factoryId'), '/linkedServices/LS_databricks')]",
                "[concat(variables('factoryId'), '/pipelines/PL_TriggerWorkflow')]",
                "[concat(variables('factoryId'), '/pipelines/PL_ING_01_04_ProcessBatches')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/PL_ING_01_04_ProcessBatches')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "LookupIngtOutput",
                        "description": "Executes the SP ‘sps_LookupIngOutput’ to get the source and the sink information of the data to ingest.",
                        "type": "Lookup",
                        "dependsOn": [
                            {
                                "activity": "sp_FwkLogInsert",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "AzureSqlSource",
                                "sqlReaderStoredProcedureName": "[[dbo].[sps_LookupIngtOutput]",
                                "storedProcedureParameters": {
                                    "BatchNumber": {
                                        "type": "Int32",
                                        "value": {
                                            "value": "@pipeline().parameters.BatchItem['BatchNumber']\n",
                                            "type": "Expression"
                                        }
                                    },
                                    "FwkTriggerId": {
                                        "type": "String",
                                        "value": {
                                            "value": "@pipeline().parameters.BatchItem['FwkTriggerId']",
                                            "type": "Expression"
                                        }
                                    }
                                },
                                "queryTimeout": "02:00:00",
                                "partitionOption": "None"
                            },
                            "dataset": {
                                "referenceName": "DS_SQL_Configuration",
                                "type": "DatasetReference",
                                "parameters": {}
                            },
                            "firstRowOnly": false
                        }
                    },
                    {
                        "name": "ForEachObject",
                        "description": "Iterates over a dataset and loop by number of rows it gets with the output from ‘LookupIngOutput’ activity.",
                        "type": "ForEach",
                        "dependsOn": [
                            {
                                "activity": "LookupIngtOutput",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "items": {
                                "value": "@array(activity('LookupIngtOutput').output.value)",
                                "type": "Expression"
                            },
                            "isSequential": false,
                            "batchCount": 30,
                            "activities": [
                                {
                                    "name": "Switch_SourceType",
                                    "description": "Evaluates the input value ‘SourceType’ corresponding to a case that matches the condition.",
                                    "type": "Switch",
                                    "dependsOn": [
                                        {
                                            "activity": "DeleteLandingSinkFolder",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "userProperties": [],
                                    "typeProperties": {
                                        "on": {
                                            "value": "@string(item().SourceType)",
                                            "type": "Expression"
                                        },
                                        "cases": [
                                            {
                                                "value": "SQL",
                                                "activities": [
                                                    {
                                                        "name": "Execute PL_ING_02_SQLLoad",
                                                        "description": "This pipeline is used to execute all the inner activities that are included in the ingestion module.",
                                                        "type": "ExecutePipeline",
                                                        "dependsOn": [],
                                                        "policy": {
                                                            "secureInput": false
                                                        },
                                                        "userProperties": [],
                                                        "typeProperties": {
                                                            "pipeline": {
                                                                "referenceName": "PL_ING_02_SQLLoad",
                                                                "type": "PipelineReference"
                                                            },
                                                            "waitOnCompletion": true,
                                                            "parameters": {
                                                                "FwkItem": {
                                                                    "value": "@item()",
                                                                    "type": "Expression"
                                                                },
                                                                "PL_01TriggerTime": {
                                                                    "value": "@pipeline().parameters.EntTriggerTime",
                                                                    "type": "Expression"
                                                                },
                                                                "EntRunId": {
                                                                    "value": "@pipeline().parameters.EntRunId",
                                                                    "type": "Expression"
                                                                },
                                                                "ModuleRunId": {
                                                                    "value": "@pipeline().RunId",
                                                                    "type": "Expression"
                                                                }
                                                            }
                                                        }
                                                    }
                                                ]
                                            },
                                            {
                                                "value": "Oracle",
                                                "activities": [
                                                    {
                                                        "name": "Execute PL_ING_04_OracleLoad",
                                                        "description": "This pipeline is used to execute all the inner activities that are included in the ingestion module.",
                                                        "type": "ExecutePipeline",
                                                        "dependsOn": [],
                                                        "policy": {
                                                            "secureInput": false
                                                        },
                                                        "userProperties": [],
                                                        "typeProperties": {
                                                            "pipeline": {
                                                                "referenceName": "PL_ING_04_OracleLoad",
                                                                "type": "PipelineReference"
                                                            },
                                                            "waitOnCompletion": true,
                                                            "parameters": {
                                                                "FwkItem": {
                                                                    "value": "@item()",
                                                                    "type": "Expression"
                                                                },
                                                                "PL_01TriggerTime": {
                                                                    "value": "@pipeline().parameters.EntTriggerTime",
                                                                    "type": "Expression"
                                                                },
                                                                "EntRunId": {
                                                                    "value": "@pipeline().parameters.EntRunId",
                                                                    "type": "Expression"
                                                                },
                                                                "ModuleRunId": {
                                                                    "value": "@pipeline().RunId",
                                                                    "type": "Expression"
                                                                }
                                                            }
                                                        }
                                                    }
                                                ]
                                            },
                                            {
                                                "value": "FileShare",
                                                "activities": [
                                                    {
                                                        "name": "Execute PL_ING_05_FileShareLoad",
                                                        "type": "ExecutePipeline",
                                                        "dependsOn": [],
                                                        "policy": {
                                                            "secureInput": false
                                                        },
                                                        "userProperties": [],
                                                        "typeProperties": {
                                                            "pipeline": {
                                                                "referenceName": "PL_ING_05_FileShareLoad",
                                                                "type": "PipelineReference"
                                                            },
                                                            "waitOnCompletion": true,
                                                            "parameters": {
                                                                "FwkItem": {
                                                                    "value": "@item()",
                                                                    "type": "Expression"
                                                                },
                                                                "PL_01TriggerTime": {
                                                                    "value": "@pipeline().parameters.EntTriggerTime",
                                                                    "type": "Expression"
                                                                },
                                                                "EntRunId": {
                                                                    "value": "@pipeline().parameters.EntRunId",
                                                                    "type": "Expression"
                                                                },
                                                                "ModuleRunId": {
                                                                    "value": "@pipeline().RunId",
                                                                    "type": "Expression"
                                                                }
                                                            }
                                                        }
                                                    }
                                                ]
                                            },
                                            {
                                                "value": "SQLOnPrem",
                                                "activities": [
                                                    {
                                                        "name": "Execute PL_ING_03_SQLOnPremLoad",
                                                        "description": "This pipeline is used to execute all the inner activities that are included in the ingestion module.",
                                                        "type": "ExecutePipeline",
                                                        "dependsOn": [],
                                                        "policy": {
                                                            "secureInput": false
                                                        },
                                                        "userProperties": [],
                                                        "typeProperties": {
                                                            "pipeline": {
                                                                "referenceName": "PL_ING_03_SQLOnPremLoad",
                                                                "type": "PipelineReference"
                                                            },
                                                            "waitOnCompletion": true,
                                                            "parameters": {
                                                                "FwkItem": {
                                                                    "value": "@item()",
                                                                    "type": "Expression"
                                                                },
                                                                "PL_01TriggerTime": {
                                                                    "value": "@pipeline().parameters.EntTriggerTime",
                                                                    "type": "Expression"
                                                                },
                                                                "EntRunId": {
                                                                    "value": "@pipeline().parameters.EntRunId",
                                                                    "type": "Expression"
                                                                },
                                                                "ModuleRunId": {
                                                                    "value": "@pipeline().RunId",
                                                                    "type": "Expression"
                                                                }
                                                            }
                                                        }
                                                    }
                                                ]
                                            },
                                            {
                                                "value": "SFTP",
                                                "activities": [
                                                    {
                                                        "name": "Execute PL_ING_06_SFTPLoad",
                                                        "type": "ExecutePipeline",
                                                        "dependsOn": [],
                                                        "policy": {
                                                            "secureInput": false
                                                        },
                                                        "userProperties": [],
                                                        "typeProperties": {
                                                            "pipeline": {
                                                                "referenceName": "PL_ING_06_SFTPLoad",
                                                                "type": "PipelineReference"
                                                            },
                                                            "waitOnCompletion": true,
                                                            "parameters": {
                                                                "FwkItem": {
                                                                    "value": "@item()",
                                                                    "type": "Expression"
                                                                },
                                                                "PL_01TriggerTime": {
                                                                    "value": "@pipeline().parameters.EntTriggerTime",
                                                                    "type": "Expression"
                                                                },
                                                                "EntRunId": {
                                                                    "value": "@pipeline().parameters.EntRunId",
                                                                    "type": "Expression"
                                                                },
                                                                "ModuleRunId": {
                                                                    "value": "@pipeline().RunId",
                                                                    "type": "Expression"
                                                                }
                                                            }
                                                        }
                                                    }
                                                ]
                                            },
                                            {
                                                "value": "ADLS",
                                                "activities": [
                                                    {
                                                        "name": "Execute PL_ING_07_ADLSLoad",
                                                        "type": "ExecutePipeline",
                                                        "dependsOn": [],
                                                        "policy": {
                                                            "secureInput": false
                                                        },
                                                        "userProperties": [],
                                                        "typeProperties": {
                                                            "pipeline": {
                                                                "referenceName": "PL_ING_07_ADLSLoad",
                                                                "type": "PipelineReference"
                                                            },
                                                            "waitOnCompletion": true,
                                                            "parameters": {
                                                                "FwkItem": {
                                                                    "value": "@item()",
                                                                    "type": "Expression"
                                                                },
                                                                "PL_01TriggerTime": {
                                                                    "value": "@pipeline().parameters.EntTriggerTime",
                                                                    "type": "Expression"
                                                                },
                                                                "EntRunId": {
                                                                    "value": "@pipeline().parameters.EntRunId",
                                                                    "type": "Expression"
                                                                },
                                                                "ModuleRunId": {
                                                                    "value": "@pipeline().RunId",
                                                                    "type": "Expression"
                                                                }
                                                            }
                                                        }
                                                    }
                                                ]
                                            },
                                            {
                                                "value": "Snowflake",
                                                "activities": [
                                                    {
                                                        "name": "Execute PL_ING_08_SnowflakeLoad",
                                                        "type": "ExecutePipeline",
                                                        "dependsOn": [],
                                                        "policy": {
                                                            "secureInput": false
                                                        },
                                                        "userProperties": [],
                                                        "typeProperties": {
                                                            "pipeline": {
                                                                "referenceName": "PL_ING_02_SnowflakeLoad",
                                                                "type": "PipelineReference"
                                                            },
                                                            "waitOnCompletion": true,
                                                            "parameters": {
                                                                "FwkItem": {
                                                                    "value": "@item()",
                                                                    "type": "Expression"
                                                                },
                                                                "PL_01TriggerTime": {
                                                                    "value": "@pipeline().parameters.EntTriggerTime",
                                                                    "type": "Expression"
                                                                },
                                                                "EntRunId": {
                                                                    "value": "@pipeline().parameters.EntRunId",
                                                                    "type": "Expression"
                                                                },
                                                                "ModuleRunId": {
                                                                    "value": "@pipeline().RunId",
                                                                    "type": "Expression"
                                                                }
                                                            }
                                                        }
                                                    }
                                                ]
                                            },
                                            {
                                                "value": "OData",
                                                "activities": [
                                                    {
                                                        "name": "Execute PL_ING_09_ODataLoad",
                                                        "type": "ExecutePipeline",
                                                        "dependsOn": [],
                                                        "policy": {
                                                            "secureInput": false
                                                        },
                                                        "userProperties": [],
                                                        "typeProperties": {
                                                            "pipeline": {
                                                                "referenceName": "PL_ING_09_ODataLoad",
                                                                "type": "PipelineReference"
                                                            },
                                                            "waitOnCompletion": true,
                                                            "parameters": {
                                                                "FwkItem": {
                                                                    "value": "@item()",
                                                                    "type": "Expression"
                                                                },
                                                                "PL_01TriggerTime": {
                                                                    "value": "@pipeline().parameters.EntTriggerTime",
                                                                    "type": "Expression"
                                                                },
                                                                "EntRunId": {
                                                                    "value": "@pipeline().parameters.EntRunId",
                                                                    "type": "Expression"
                                                                },
                                                                "ModuleRunId": {
                                                                    "value": "@pipeline().RunId",
                                                                    "type": "Expression"
                                                                }
                                                            }
                                                        }
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                },
                                {
                                    "name": "DeleteLandingSinkFolder",
                                    "type": "Delete",
                                    "dependsOn": [],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "dataset": {
                                            "referenceName": "DS_ADLS_BIN_Folder",
                                            "type": "DatasetReference",
                                            "parameters": {
                                                "InstanceURL": {
                                                    "value": "@item().SinkInstanceURL",
                                                    "type": "Expression"
                                                },
                                                "FullPath": {
                                                    "value": "@item().SinkPath",
                                                    "type": "Expression"
                                                }
                                            }
                                        },
                                        "enableLogging": false,
                                        "storeSettings": {
                                            "type": "AzureBlobFSReadSettings",
                                            "recursive": true,
                                            "enablePartitionDiscovery": false
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "name": "sp_FwkLogInsert",
                        "description": "Executes the SP spi_FwkLogInsert to insert record into FwkLog table with the execution module information by pipeline id and with null status.",
                        "type": "SqlServerStoredProcedure",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "0.12:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "storedProcedureName": "[[dbo].[spi_FwkLogInsert]",
                            "storedProcedureParameters": {
                                "EntRunId": {
                                    "value": {
                                        "value": "@pipeline().parameters.EntRunId",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                },
                                "Module": {
                                    "value": {
                                        "value": "@concat('Ingestion > Batch ', pipeline().parameters.BatchItem['BatchNumber'])",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                },
                                "ModuleRunId": {
                                    "value": {
                                        "value": "@pipeline().RunId",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                },
                                "StartDate": {
                                    "value": {
                                        "value": "@formatdatetime(pipeline().TriggerTime)",
                                        "type": "Expression"
                                    },
                                    "type": "DateTime"
                                },
                                "ADFTriggerName": {
                                    "value": {
                                        "value": "@pipeline().parameters.ADFTriggerName",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                }
                            }
                        },
                        "linkedServiceName": {
                            "referenceName": "LS_configurationDB",
                            "type": "LinkedServiceReference"
                        }
                    },
                    {
                        "name": "sp_UpdateExecutionLog_succeeded",
                        "description": "Executes the SP spu_FwkLogUpdate to update the record created by the ‘InsertIntoFwkLog’ activity in the table ‘FwkLog’ by updating the columns ‘PipelineStatus’ to ‘Success’.",
                        "type": "SqlServerStoredProcedure",
                        "dependsOn": [
                            {
                                "activity": "ForEachObject",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "0.12:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "storedProcedureName": "[[dbo].[spu_FwkLogUpdate]",
                            "storedProcedureParameters": {
                                "ErrorMessage": {
                                    "value": null,
                                    "type": "String"
                                },
                                "JobRunUrl": {
                                    "value": null,
                                    "type": "String"
                                },
                                "ModuleRunId": {
                                    "value": {
                                        "value": "@pipeline().RunId",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                },
                                "PipelineStatus": {
                                    "value": {
                                        "value": "Succeeded",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                }
                            }
                        },
                        "linkedServiceName": {
                            "referenceName": "LS_configurationDB",
                            "type": "LinkedServiceReference"
                        }
                    },
                    {
                        "name": "sp_UpdateExecutionLog_failed",
                        "description": "Executes the SP spu_FwkLogUpdate to update the record created by the ‘InsertIntoFwkLog’ activity in the table ‘FwkLog’ by updating the columns ‘PipelineStatus’ to ‘Success’.",
                        "type": "SqlServerStoredProcedure",
                        "dependsOn": [
                            {
                                "activity": "ForEachObject",
                                "dependencyConditions": [
                                    "Failed"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "0.12:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "storedProcedureName": "[[dbo].[spu_FwkLogUpdate]",
                            "storedProcedureParameters": {
                                "ErrorMessage": {
                                    "value": null,
                                    "type": "String"
                                },
                                "JobRunUrl": {
                                    "value": null,
                                    "type": "String"
                                },
                                "ModuleRunId": {
                                    "value": {
                                        "value": "@pipeline().RunId",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                },
                                "PipelineStatus": {
                                    "value": {
                                        "value": "Failed",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                }
                            }
                        },
                        "linkedServiceName": {
                            "referenceName": "LS_configurationDB",
                            "type": "LinkedServiceReference"
                        }
                    },
                    {
                        "name": "setOutputStopBatchOnFailure",
                        "type": "SetVariable",
                        "dependsOn": [
                            {
                                "activity": "sp_UpdateExecutionLog_failed",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "variableName": "pipelineReturnValue",
                            "value": [
                                {
                                    "key": "outputStopETL",
                                    "value": {
                                        "type": "Expression",
                                        "content": "@if(\n    equals(\n        toUpper(string(pipeline().parameters.LookupDtLayerOutput['value'][0]['StopBatchIfFailure'])),\n         'TRUE'\n    ), \n    true,\n    false\n)"
                                    }
                                }
                            ],
                            "setSystemVariable": true
                        }
                    },
                    {
                        "name": "setOutputStopBatch",
                        "type": "SetVariable",
                        "dependsOn": [
                            {
                                "activity": "sp_UpdateExecutionLog_succeeded",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "variableName": "pipelineReturnValue",
                            "value": [
                                {
                                    "key": "outputStopETL",
                                    "value": {
                                        "type": "Boolean",
                                        "content": false
                                    }
                                }
                            ],
                            "setSystemVariable": true
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {}
                },
                "parameters": {
                    "BatchItem": {
                        "type": "array"
                    },
                    "EntRunId": {
                        "type": "string"
                    },
                    "EntTriggerTime": {
                        "type": "string"
                    },
                    "ADFTriggerName": {
                        "type": "string"
                    },
                    "LookupDtLayerOutput": {
                        "type": "array"
                    }
                },
                "folder": {
                    "name": "01 Ingestion Module"
                },
                "annotations": [],
                "lastPublishTime": "2023-07-06T08:29:19Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/datasets/DS_SQL_Configuration')]",
                "[concat(variables('factoryId'), '/linkedServices/LS_configurationDB')]",
                "[concat(variables('factoryId'), '/datasets/DS_ADLS_BIN_Folder')]",
                "[concat(variables('factoryId'), '/pipelines/PL_ING_02_SQLLoad')]",
                "[concat(variables('factoryId'), '/pipelines/PL_ING_04_OracleLoad')]",
                "[concat(variables('factoryId'), '/pipelines/PL_ING_05_FileShareLoad')]",
                "[concat(variables('factoryId'), '/pipelines/PL_ING_03_SQLOnPremLoad')]",
                "[concat(variables('factoryId'), '/pipelines/PL_ING_06_SFTPLoad')]",
                "[concat(variables('factoryId'), '/pipelines/PL_ING_07_ADLSLoad')]",
                "[concat(variables('factoryId'), '/pipelines/PL_ING_02_SnowflakeLoad')]",
                "[concat(variables('factoryId'), '/pipelines/PL_ING_09_ODataLoad')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/PL_ING_02_01_SQLFullLoad')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "FullLoad Copy into Landing",
                        "description": "Copy a table from a database to the configurated Sink dynamically taking by input FwkItem, SrcPath.",
                        "type": "Copy",
                        "dependsOn": [
                            {
                                "activity": "spi_IngtLogInsert",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "AzureSqlSource",
                                "sqlReaderQuery": {
                                    "value": "@if(empty(string(pipeline().parameters.FwkItem['Query'])),concat('SELECT ', coalesce(pipeline().parameters.FwkItem['SelectedColumnNames'], '*'), ' FROM ',pipeline().parameters.FwkItem['Schemaname'], '.', pipeline().parameters.FwkItem['EntityName'], ' ', pipeline().parameters.FwkItem['TableHint'], ' ', pipeline().parameters.FwkItem['QueryHint']), pipeline().parameters.FwkItem['Query'])",
                                    "type": "Expression"
                                },
                                "queryTimeout": "02:00:00",
                                "partitionOption": "None"
                            },
                            "sink": {
                                "type": "ParquetSink",
                                "storeSettings": {
                                    "type": "AzureBlobFSWriteSettings"
                                },
                                "formatSettings": {
                                    "type": "ParquetWriteSettings"
                                }
                            },
                            "enableStaging": false,
                            "validateDataConsistency": true
                        },
                        "inputs": [
                            {
                                "referenceName": "DS_SQL_Source",
                                "type": "DatasetReference",
                                "parameters": {
                                    "FwkItem": {
                                        "value": "@pipeline().parameters.FwkItem",
                                        "type": "Expression"
                                    }
                                }
                            }
                        ],
                        "outputs": [
                            {
                                "referenceName": "DS_ADLS_PRQ_Sink",
                                "type": "DatasetReference",
                                "parameters": {
                                    "InstanceURL": {
                                        "value": "@pipeline().parameters.FwkItem['SinkInstanceURL']",
                                        "type": "Expression"
                                    },
                                    "FullPath": {
                                        "value": "@concat(pipeline().parameters.FwkItem['SinkPath'], \n\t'/',\n\tformatDateTime(pipeline().parameters.PL_01TriggerTime,'yyyy'),\n\tformatDateTime(pipeline().parameters.PL_01TriggerTime,'MM'),\n\tformatDateTime(pipeline().parameters.PL_01TriggerTime,'dd'),\n\tformatDateTime(pipeline().parameters.PL_01TriggerTime,'HH'),\n\tformatDateTime(pipeline().parameters.PL_01TriggerTime,'mm'),\n\t'_',\n\tpipeline().parameters.FwkItem['EntityName'],\n\t'.snappy.parquet'\n)",
                                        "type": "Expression"
                                    }
                                }
                            }
                        ]
                    },
                    {
                        "name": "spi_IngtLogInsert",
                        "description": "Executes the SP spi_IngtLogInsert to insert record into IngtLog table with the execution module information.",
                        "type": "SqlServerStoredProcedure",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "storedProcedureName": "[[dbo].[spi_IngtLogInsert]",
                            "storedProcedureParameters": {
                                "IngtOutputId": {
                                    "value": {
                                        "value": "@pipeline().parameters.FwkItem['IngtOutputId']",
                                        "type": "Expression"
                                    },
                                    "type": "Int32"
                                },
                                "EntRunId": {
                                    "value": {
                                        "value": "@pipeline().parameters.EntRunId",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                },
                                "ModuleRunId": {
                                    "value": {
                                        "value": "@pipeline().parameters.ModuleRunId",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                },
                                "PipelineStatus": {
                                    "value": {
                                        "value": "InProgress",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                },
                                "StartDate": {
                                    "value": {
                                        "value": "@formatdatetime(pipeline().TriggerTime)",
                                        "type": "Expression"
                                    },
                                    "type": "Datetime"
                                },
                                "RowsRead": {
                                    "value": null,
                                    "type": "Int64"
                                },
                                "RowsCopied": {
                                    "value": null,
                                    "type": "Int64"
                                },
                                "CopyDuration": {
                                    "value": null,
                                    "type": "Double"
                                },
                                "Throughput": {
                                    "value": null,
                                    "type": "Double"
                                },
                                "ErrorMessage": {
                                    "value": null,
                                    "type": "String"
                                },
                                "FileName": {
                                    "value": null,
                                    "type": "String"
                                }
                            }
                        },
                        "linkedServiceName": {
                            "referenceName": "LS_configurationDB",
                            "type": "LinkedServiceReference"
                        }
                    },
                    {
                        "name": "spu_IngtLogUpdate_succeeded",
                        "description": "Executes the SP spu_IngtLogUpdate to update record into IngtLog table with the execution module information.",
                        "type": "SqlServerStoredProcedure",
                        "dependsOn": [
                            {
                                "activity": "FullLoad Copy into Landing",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "storedProcedureName": "[[dbo].[spu_IngtLogUpdate]",
                            "storedProcedureParameters": {
                                "IngtOutputId": {
                                    "value": {
                                        "value": "@pipeline().parameters.FwkItem['IngtOutputId']",
                                        "type": "Expression"
                                    },
                                    "type": "Int32"
                                },
                                "EntRunId": {
                                    "value": {
                                        "value": "@pipeline().parameters.EntRunId",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                },
                                "ModuleRunId": {
                                    "value": {
                                        "value": "@pipeline().parameters.ModuleRunId",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                },
                                "PipelineStatus": {
                                    "value": {
                                        "value": "Succeeded",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                },
                                "RowsRead": {
                                    "value": {
                                        "value": "@if(\n    contains(activity('FullLoad Copy into Landing').output, 'rowsRead'),\n    activity('FullLoad Copy into Landing').output.rowsRead,\n    null\n)",
                                        "type": "Expression"
                                    },
                                    "type": "Int64"
                                },
                                "RowsCopied": {
                                    "value": {
                                        "value": "@if(\n    contains(activity('FullLoad Copy into Landing').output, 'rowsCopied'),\n    activity('FullLoad Copy into Landing').output.rowsCopied,\n    null\n)",
                                        "type": "Expression"
                                    },
                                    "type": "Int64"
                                },
                                "CopyDuration": {
                                    "value": {
                                        "value": "@if(\n    contains(activity('FullLoad Copy into Landing').output, 'copyDuration'),\n    activity('FullLoad Copy into Landing').output.copyDuration,\n    null\n)",
                                        "type": "Expression"
                                    },
                                    "type": "Double"
                                },
                                "Throughput": {
                                    "value": {
                                        "value": "@if(\n    contains(activity('FullLoad Copy into Landing').output, 'throughput'),\n    activity('FullLoad Copy into Landing').output.throughput,\n    null\n)",
                                        "type": "Expression"
                                    },
                                    "type": "Double"
                                },
                                "ErrorMessage": {
                                    "value": null,
                                    "type": "String"
                                },
                                "RowsSkipped": {
                                    "value": null,
                                    "type": "Int64"
                                },
                                "LogFilePath": {
                                    "value": null,
                                    "type": "String"
                                },
                                "FileName": {
                                    "value": null,
                                    "type": "String"
                                }
                            }
                        },
                        "linkedServiceName": {
                            "referenceName": "LS_configurationDB",
                            "type": "LinkedServiceReference"
                        }
                    },
                    {
                        "name": "spu_IngtLogUpdate_failed",
                        "description": "Executes the SP spu_IngtLogUpdate to update record into IngtLog table with the execution module information.",
                        "type": "SqlServerStoredProcedure",
                        "dependsOn": [
                            {
                                "activity": "FullLoad Copy into Landing",
                                "dependencyConditions": [
                                    "Failed"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "storedProcedureName": "[[dbo].[spu_IngtLogUpdate]",
                            "storedProcedureParameters": {
                                "IngtOutputId": {
                                    "value": {
                                        "value": "@pipeline().parameters.FwkItem['IngtOutputId']",
                                        "type": "Expression"
                                    },
                                    "type": "Int32"
                                },
                                "EntRunId": {
                                    "value": {
                                        "value": "@pipeline().parameters.EntRunId",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                },
                                "ModuleRunId": {
                                    "value": {
                                        "value": "@pipeline().parameters.ModuleRunId",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                },
                                "PipelineStatus": {
                                    "value": {
                                        "value": "Failed",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                },
                                "RowsRead": {
                                    "value": null,
                                    "type": "Int64"
                                },
                                "RowsCopied": {
                                    "value": null,
                                    "type": "Int64"
                                },
                                "CopyDuration": {
                                    "value": null,
                                    "type": "Double"
                                },
                                "Throughput": {
                                    "value": null,
                                    "type": "Double"
                                },
                                "ErrorMessage": {
                                    "value": {
                                        "value": "@if(\n    and(\n        contains(activity('FullLoad Copy into Landing').output, 'errors'),\n        greater(length(activity('FullLoad Copy into Landing').output.errors), 0)\n    ),\n    activity('FullLoad Copy into Landing').output.errors[0].Message,\n    null\n)",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                },
                                "RowsSkipped": {
                                    "value": null,
                                    "type": "Int64"
                                },
                                "LogFilePath": {
                                    "value": null,
                                    "type": "String"
                                },
                                "FileName": {
                                    "value": null,
                                    "type": "String"
                                }
                            }
                        },
                        "linkedServiceName": {
                            "referenceName": "LS_configurationDB",
                            "type": "LinkedServiceReference"
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {}
                },
                "parameters": {
                    "FwkItem": {
                        "type": "array"
                    },
                    "PL_01TriggerTime": {
                        "type": "string"
                    },
                    "EntRunId": {
                        "type": "string"
                    },
                    "ModuleRunId": {
                        "type": "string"
                    }
                },
                "folder": {
                    "name": "01 Ingestion Module/02 SQL"
                },
                "annotations": [],
                "lastPublishTime": "2023-07-06T08:29:13Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/datasets/DS_SQL_Source')]",
                "[concat(variables('factoryId'), '/datasets/DS_ADLS_PRQ_Sink')]",
                "[concat(variables('factoryId'), '/linkedServices/LS_configurationDB')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/PL_ING_02_02_SQLDeltaLoad')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Delta Copy into Landing",
                        "description": "Copy a table from a database to the configurated Sink dynamically taking by input FwkItem, SrcPath.",
                        "type": "Copy",
                        "dependsOn": [
                            {
                                "activity": "IF numeric",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            },
                            {
                                "activity": "LookupOldWmkConfig",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "AzureSqlSource",
                                "sqlReaderQuery": {
                                    "value": "@concat(\n    'SELECT * FROM (',\n        if(empty(string(pipeline().parameters.FwkItem['Query'])),\n            concat('SELECT ', coalesce(pipeline().parameters.FwkItem['SelectedColumnNames'], '*'), ' FROM ', pipeline().parameters.FwkItem['SchemaName'], '.', pipeline().parameters.FwkItem['EntityName'], ' ', pipeline().parameters.FwkItem['TableHint'])\n            , pipeline().parameters.FwkItem['Query']\n          ),\n    ') T1 WHERE ( ''', pipeline().parameters.FwkItem['WmkDataType'], ''' = ''datetime'' AND ', pipeline().parameters.FwkItem['WmkColumnName'], ' > ''', convertToUtc(activity('LookupOldWmkConfig').output.firstRow.NewValueWatermark, 'UTC', 'yyyy-MM-ddTHH:mm:ss'), '''',' ) \n\t \t\tOR ( ''', pipeline().parameters.FwkItem['WmkDataType'], ''' = ''numeric'' AND ', pipeline().parameters.FwkItem['WmkColumnName'], ' > ''', coalesce(activity('LookupOldWmkConfig').output.firstRow.NewValueWatermark, 0), '''', ' )\n            OR ( ''', pipeline().parameters.FwkItem['WmkDataType'], ''' = ''stringDatetime'' AND convert(datetime, ', pipeline().parameters.FwkItem['WmkColumnName'], ') > ''', convertToUtc(activity('LookupOldWmkConfig').output.firstRow.NewValueWatermark, 'UTC', 'yyyy-MM-ddTHH:mm:ss'), '''',')',\n    ' ', pipeline().parameters.FwkItem['QueryHint']\n)",
                                    "type": "Expression"
                                },
                                "queryTimeout": "02:00:00",
                                "partitionOption": "None"
                            },
                            "sink": {
                                "type": "ParquetSink",
                                "storeSettings": {
                                    "type": "AzureBlobFSWriteSettings"
                                },
                                "formatSettings": {
                                    "type": "ParquetWriteSettings"
                                }
                            },
                            "enableStaging": false,
                            "validateDataConsistency": true
                        },
                        "inputs": [
                            {
                                "referenceName": "DS_SQL_Source",
                                "type": "DatasetReference",
                                "parameters": {
                                    "FwkItem": {
                                        "value": "@pipeline().parameters.FwkItem",
                                        "type": "Expression"
                                    }
                                }
                            }
                        ],
                        "outputs": [
                            {
                                "referenceName": "DS_ADLS_PRQ_Sink",
                                "type": "DatasetReference",
                                "parameters": {
                                    "InstanceURL": {
                                        "value": "@pipeline().parameters.FwkItem['SinkInstanceURL']",
                                        "type": "Expression"
                                    },
                                    "FullPath": {
                                        "value": "@concat(pipeline().parameters.FwkItem['SinkPath'], \n\t'/',\n\tformatDateTime(pipeline().parameters.PL_01TriggerTime,'yyyy'),\n\tformatDateTime(pipeline().parameters.PL_01TriggerTime,'MM'),\n\tformatDateTime(pipeline().parameters.PL_01TriggerTime,'dd'),\n\tformatDateTime(pipeline().parameters.PL_01TriggerTime,'HH'),\n\tformatDateTime(pipeline().parameters.PL_01TriggerTime,'mm'),\n\t'_',\n\tpipeline().parameters.FwkItem['EntityName'],\n\t'.snappy.parquet'\n)",
                                        "type": "Expression"
                                    }
                                }
                            }
                        ]
                    },
                    {
                        "name": "spu_UpdateWmk",
                        "description": "Executes the SP ‘spu_FwkWatermarkIntUpdate’ to Update the watermark value for objects using watermark datatype \"1\"",
                        "type": "SqlServerStoredProcedure",
                        "dependsOn": [
                            {
                                "activity": "Delta Copy into Landing",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "storedProcedureName": "[[dbo].[spu_IngtWatermarkUpdate]",
                            "storedProcedureParameters": {
                                "FwkEntityId": {
                                    "value": {
                                        "value": "@pipeline().parameters.FwkItem['FwkEntityId']",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                },
                                "NewValueWmkInt": {
                                    "value": {
                                        "value": "@if(equals(pipeline().parameters.FwkItem['WmkDataType'], 'numeric'), activity('LookupNewWmkSrc').output.firstRow.NewWatermarkValue, null)",
                                        "type": "Expression"
                                    },
                                    "type": "Int64"
                                },
                                "NewValueWmkDt": {
                                    "value": {
                                        "value": "@if(equals(pipeline().parameters.FwkItem['WmkDataType'], 'datetime'), convertToUtc(pipeline().parameters.PL_01TriggerTime, 'UTC', 'yyyy-MM-ddTHH:mm:ss'), if(equals(pipeline().parameters.FwkItem['WmkDataType'], 'stringDatetime'), pipeline().parameters.PL_01TriggerTime, null))",
                                        "type": "Expression"
                                    },
                                    "type": "Datetime"
                                }
                            }
                        },
                        "linkedServiceName": {
                            "referenceName": "LS_configurationDB",
                            "type": "LinkedServiceReference"
                        }
                    },
                    {
                        "name": "spi_NewRowsToWmkInt",
                        "description": "Executes the SP ‘spi_FwkWatermarkInsert’ to create watermark for the source object.",
                        "type": "SqlServerStoredProcedure",
                        "dependsOn": [
                            {
                                "activity": "spi_IngtLogInsert",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "storedProcedureName": "[[dbo].[spi_IngtWatermarkInsert]",
                            "storedProcedureParameters": {
                                "FwkEntityId": {
                                    "value": {
                                        "value": "@pipeline().parameters.FwkItem['FwkEntityId']",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                },
                                "WmkDataType": {
                                    "value": {
                                        "value": "@pipeline().parameters.FwkItem['WmkDataType']",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                }
                            }
                        },
                        "linkedServiceName": {
                            "referenceName": "LS_configurationDB",
                            "type": "LinkedServiceReference"
                        }
                    },
                    {
                        "name": "LookupOldWmkConfig",
                        "description": "Executes the SP ‘sps_LookupIngtWatermark’ to retrieve the information from the table  ‘FwkWatermark’ by SrcObjectChild and FwkTriggerId.",
                        "type": "Lookup",
                        "dependsOn": [
                            {
                                "activity": "spi_NewRowsToWmkInt",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "AzureSqlSource",
                                "sqlReaderStoredProcedureName": "[[dbo].[sps_LookupIngtWatermark]",
                                "storedProcedureParameters": {
                                    "FwkEntityId": {
                                        "type": "String",
                                        "value": {
                                            "value": "@pipeline().parameters.FwkItem['FwkEntityId']",
                                            "type": "Expression"
                                        }
                                    },
                                    "WmkDataType": {
                                        "type": "String",
                                        "value": {
                                            "value": "@pipeline().parameters.FwkItem['WmkDataType']",
                                            "type": "Expression"
                                        }
                                    }
                                },
                                "queryTimeout": "02:00:00",
                                "partitionOption": "None"
                            },
                            "dataset": {
                                "referenceName": "DS_SQL_Configuration",
                                "type": "DatasetReference",
                                "parameters": {}
                            },
                            "firstRowOnly": true
                        }
                    },
                    {
                        "name": "IF numeric",
                        "type": "IfCondition",
                        "dependsOn": [
                            {
                                "activity": "spi_NewRowsToWmkInt",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "expression": {
                                "value": "@equals(pipeline().parameters.FwkItem['WmkDataType'], 'numeric')\n",
                                "type": "Expression"
                            },
                            "ifTrueActivities": [
                                {
                                    "name": "LookupNewWmkSrc",
                                    "description": "Executes a query to the ‘FwkWatermark’ table  to get the ‘NewWatermarkValue’ column value.",
                                    "type": "Lookup",
                                    "dependsOn": [],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "source": {
                                            "type": "AzureSqlSource",
                                            "sqlReaderQuery": {
                                                "value": "SELECT MAX(@{pipeline().parameters.FwkItem['WmkColumnName']}) as NewWatermarkValue from [@{pipeline().parameters.FwkItem['SchemaName']}].[@{pipeline().parameters.FwkItem['EntityName']}]",
                                                "type": "Expression"
                                            },
                                            "queryTimeout": "02:00:00",
                                            "partitionOption": "None"
                                        },
                                        "dataset": {
                                            "referenceName": "DS_SQL_Source",
                                            "type": "DatasetReference",
                                            "parameters": {
                                                "FwkItem": {
                                                    "value": "@pipeline().parameters.FwkItem",
                                                    "type": "Expression"
                                                }
                                            }
                                        },
                                        "firstRowOnly": true
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "name": "spi_IngtIfNumeric_failed",
                        "description": "Executes the SP spi_IngtLogInsert to insert record into IngtLog table with the execution module information.",
                        "type": "SqlServerStoredProcedure",
                        "dependsOn": [
                            {
                                "activity": "IF numeric",
                                "dependencyConditions": [
                                    "Failed"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "storedProcedureName": "[[dbo].[spi_IngtLogInsert]",
                            "storedProcedureParameters": {
                                "IngtOutputId": {
                                    "value": {
                                        "value": "@pipeline().parameters.FwkItem['IngtOutputId']",
                                        "type": "Expression"
                                    },
                                    "type": "Int32"
                                },
                                "EntRunId": {
                                    "value": {
                                        "value": "@pipeline().parameters.EntRunId",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                },
                                "ModuleRunId": {
                                    "value": {
                                        "value": "@pipeline().parameters.ModuleRunId",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                },
                                "PipelineStatus": {
                                    "value": "Failed",
                                    "type": "String"
                                },
                                "StartDate": {
                                    "value": {
                                        "value": "@formatdatetime(pipeline().TriggerTime)",
                                        "type": "Expression"
                                    },
                                    "type": "Datetime"
                                },
                                "RowsRead": {
                                    "value": null,
                                    "type": "Int64"
                                },
                                "RowsCopied": {
                                    "value": null,
                                    "type": "Int64"
                                },
                                "CopyDuration": {
                                    "value": null,
                                    "type": "Double"
                                },
                                "Throughput": {
                                    "value": null,
                                    "type": "Double"
                                },
                                "ErrorMessage": {
                                    "value": null,
                                    "type": "String"
                                },
                                "FileName": {
                                    "value": null,
                                    "type": "String"
                                }
                            }
                        },
                        "linkedServiceName": {
                            "referenceName": "LS_configurationDB",
                            "type": "LinkedServiceReference"
                        }
                    },
                    {
                        "name": "spi_IngtLogInsert",
                        "description": "Executes the SP spi_IngtLogInsert to insert record into IngtLog table with the execution module information.",
                        "type": "SqlServerStoredProcedure",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "storedProcedureName": "[[dbo].[spi_IngtLogInsert]",
                            "storedProcedureParameters": {
                                "IngtOutputId": {
                                    "value": {
                                        "value": "@pipeline().parameters.FwkItem['IngtOutputId']",
                                        "type": "Expression"
                                    },
                                    "type": "Int32"
                                },
                                "EntRunId": {
                                    "value": {
                                        "value": "@pipeline().parameters.EntRunId",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                },
                                "ModuleRunId": {
                                    "value": {
                                        "value": "@pipeline().parameters.ModuleRunId",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                },
                                "PipelineStatus": {
                                    "value": {
                                        "value": "InProgress",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                },
                                "StartDate": {
                                    "value": {
                                        "value": "@formatdatetime(pipeline().TriggerTime)",
                                        "type": "Expression"
                                    },
                                    "type": "Datetime"
                                },
                                "RowsRead": {
                                    "value": null,
                                    "type": "Int64"
                                },
                                "RowsCopied": {
                                    "value": null,
                                    "type": "Int64"
                                },
                                "CopyDuration": {
                                    "value": null,
                                    "type": "Double"
                                },
                                "Throughput": {
                                    "value": null,
                                    "type": "Double"
                                },
                                "ErrorMessage": {
                                    "value": null,
                                    "type": "String"
                                },
                                "FileName": {
                                    "value": null,
                                    "type": "String"
                                }
                            }
                        },
                        "linkedServiceName": {
                            "referenceName": "LS_configurationDB",
                            "type": "LinkedServiceReference"
                        }
                    },
                    {
                        "name": "spu_IngtLogUpdate_succeeded",
                        "description": "Executes the SP spu_IngtLogUpdate to update record into IngtLog table with the execution module information.",
                        "type": "SqlServerStoredProcedure",
                        "dependsOn": [
                            {
                                "activity": "spu_UpdateWmk",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "storedProcedureName": "[[dbo].[spu_IngtLogUpdate]",
                            "storedProcedureParameters": {
                                "IngtOutputId": {
                                    "value": {
                                        "value": "@pipeline().parameters.FwkItem['IngtOutputId']",
                                        "type": "Expression"
                                    },
                                    "type": "Int32"
                                },
                                "EntRunId": {
                                    "value": {
                                        "value": "@pipeline().parameters.EntRunId",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                },
                                "ModuleRunId": {
                                    "value": {
                                        "value": "@pipeline().parameters.ModuleRunId",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                },
                                "PipelineStatus": {
                                    "value": {
                                        "value": "Succeeded",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                },
                                "RowsRead": {
                                    "value": {
                                        "value": "@if(\n    contains(activity('Delta Copy into Landing').output, 'rowsRead'),\n    activity('Delta Copy into Landing').output.rowsRead,\n    null\n)",
                                        "type": "Expression"
                                    },
                                    "type": "Int64"
                                },
                                "RowsCopied": {
                                    "value": {
                                        "value": "@if(\n    contains(activity('Delta Copy into Landing').output, 'rowsCopied'),\n    activity('Delta Copy into Landing').output.rowsCopied,\n    null\n)",
                                        "type": "Expression"
                                    },
                                    "type": "Int64"
                                },
                                "CopyDuration": {
                                    "value": {
                                        "value": "@if(\n    contains(activity('Delta Copy into Landing').output, 'copyDuration'),\n    activity('Delta Copy into Landing').output.copyDuration,\n    null\n)",
                                        "type": "Expression"
                                    },
                                    "type": "Double"
                                },
                                "Throughput": {
                                    "value": {
                                        "value": "@if(\n    contains(activity('Delta Copy into Landing').output, 'throughput'),\n    activity('Delta Copy into Landing').output.throughput,\n    null\n)",
                                        "type": "Expression"
                                    },
                                    "type": "Double"
                                },
                                "ErrorMessage": {
                                    "value": null,
                                    "type": "String"
                                },
                                "RowsSkipped": {
                                    "value": null,
                                    "type": "Int64"
                                },
                                "LogFilePath": {
                                    "value": null,
                                    "type": "String"
                                },
                                "FileName": {
                                    "value": null,
                                    "type": "String"
                                }
                            }
                        },
                        "linkedServiceName": {
                            "referenceName": "LS_configurationDB",
                            "type": "LinkedServiceReference"
                        }
                    },
                    {
                        "name": "spu_IngtLogUpdate_failed",
                        "description": "Executes the SP spu_IngtLogUpdate to update record into IngtLog table with the execution module information.",
                        "type": "SqlServerStoredProcedure",
                        "dependsOn": [
                            {
                                "activity": "Delta Copy into Landing",
                                "dependencyConditions": [
                                    "Failed"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "storedProcedureName": "[[dbo].[spu_IngtLogUpdate]",
                            "storedProcedureParameters": {
                                "IngtOutputId": {
                                    "value": {
                                        "value": "@pipeline().parameters.FwkItem['IngtOutputId']",
                                        "type": "Expression"
                                    },
                                    "type": "Int32"
                                },
                                "EntRunId": {
                                    "value": {
                                        "value": "@pipeline().parameters.EntRunId",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                },
                                "ModuleRunId": {
                                    "value": {
                                        "value": "@pipeline().parameters.ModuleRunId",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                },
                                "PipelineStatus": {
                                    "value": {
                                        "value": "Failed",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                },
                                "RowsRead": {
                                    "value": null,
                                    "type": "Int64"
                                },
                                "RowsCopied": {
                                    "value": null,
                                    "type": "Int64"
                                },
                                "CopyDuration": {
                                    "value": null,
                                    "type": "Double"
                                },
                                "Throughput": {
                                    "value": null,
                                    "type": "Double"
                                },
                                "ErrorMessage": {
                                    "value": {
                                        "value": "@if(\n    and(\n        contains(activity('Delta Copy into Landing').output, 'errors'),\n        greater(length(activity('Delta Copy into Landing').output.errors), 0)\n    ),\n    activity('Delta Copy into Landing').output.errors[0].Message,\n    null\n)",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                },
                                "RowsSkipped": {
                                    "value": null,
                                    "type": "Int64"
                                },
                                "LogFilePath": {
                                    "value": null,
                                    "type": "String"
                                },
                                "FileName": {
                                    "value": null,
                                    "type": "String"
                                }
                            }
                        },
                        "linkedServiceName": {
                            "referenceName": "LS_configurationDB",
                            "type": "LinkedServiceReference"
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {}
                },
                "parameters": {
                    "FwkItem": {
                        "type": "array"
                    },
                    "PL_01TriggerTime": {
                        "type": "string"
                    },
                    "EntRunId": {
                        "type": "string"
                    },
                    "ModuleRunId": {
                        "type": "string"
                    }
                },
                "folder": {
                    "name": "01 Ingestion Module/02 SQL"
                },
                "annotations": [],
                "lastPublishTime": "2023-07-06T08:29:13Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/datasets/DS_SQL_Source')]",
                "[concat(variables('factoryId'), '/datasets/DS_ADLS_PRQ_Sink')]",
                "[concat(variables('factoryId'), '/linkedServices/LS_configurationDB')]",
                "[concat(variables('factoryId'), '/datasets/DS_SQL_Configuration')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/PL_ING_02_SQLLoad')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "If is FullLoad",
                        "description": "Evaluates the ‘LoadType’ and go in case it matches.",
                        "type": "IfCondition",
                        "dependsOn": [],
                        "userProperties": [],
                        "typeProperties": {
                            "expression": {
                                "value": "@equals(pipeline().parameters.FwkItem['TypeLoad'], 'Full')",
                                "type": "Expression"
                            },
                            "ifFalseActivities": [
                                {
                                    "name": "Execute PL_ING_02_02_SQLDeltaLoad",
                                    "description": "This pipeline is used to execute all the inner activities that are included in the ingestion module.",
                                    "type": "ExecutePipeline",
                                    "dependsOn": [],
                                    "policy": {
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "pipeline": {
                                            "referenceName": "PL_ING_02_02_SQLDeltaLoad",
                                            "type": "PipelineReference"
                                        },
                                        "waitOnCompletion": true,
                                        "parameters": {
                                            "FwkItem": {
                                                "value": "@pipeline().parameters.FwkItem",
                                                "type": "Expression"
                                            },
                                            "PL_01TriggerTime": {
                                                "value": "@pipeline().parameters.PL_01TriggerTime",
                                                "type": "Expression"
                                            },
                                            "EntRunId": {
                                                "value": "@pipeline().parameters.EntRunId",
                                                "type": "Expression"
                                            },
                                            "ModuleRunId": {
                                                "value": "@pipeline().parameters.ModuleRunId",
                                                "type": "Expression"
                                            }
                                        }
                                    }
                                }
                            ],
                            "ifTrueActivities": [
                                {
                                    "name": "Execute PL_ING_02_01_SQLFullLoad",
                                    "description": "This pipeline is used to execute all the inner activities that are included in the ingestion module.",
                                    "type": "ExecutePipeline",
                                    "dependsOn": [],
                                    "policy": {
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "pipeline": {
                                            "referenceName": "PL_ING_02_01_SQLFullLoad",
                                            "type": "PipelineReference"
                                        },
                                        "waitOnCompletion": true,
                                        "parameters": {
                                            "FwkItem": {
                                                "value": "@pipeline().parameters.FwkItem",
                                                "type": "Expression"
                                            },
                                            "PL_01TriggerTime": {
                                                "value": "@pipeline().parameters.PL_01TriggerTime",
                                                "type": "Expression"
                                            },
                                            "EntRunId": {
                                                "value": "@pipeline().parameters.EntRunId",
                                                "type": "Expression"
                                            },
                                            "ModuleRunId": {
                                                "value": "@pipeline().parameters.ModuleRunId",
                                                "type": "Expression"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {}
                },
                "parameters": {
                    "FwkItem": {
                        "type": "array"
                    },
                    "PL_01TriggerTime": {
                        "type": "string"
                    },
                    "EntRunId": {
                        "type": "string"
                    },
                    "ModuleRunId": {
                        "type": "string"
                    }
                },
                "folder": {
                    "name": "01 Ingestion Module/02 SQL"
                },
                "annotations": [],
                "lastPublishTime": "2023-07-06T08:29:15Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/pipelines/PL_ING_02_02_SQLDeltaLoad')]",
                "[concat(variables('factoryId'), '/pipelines/PL_ING_02_01_SQLFullLoad')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/PL_ING_02_SnowflakeLoad')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "If is FullLoad",
                        "description": "Evaluates the ‘LoadType’ and go in case it matches.",
                        "type": "IfCondition",
                        "dependsOn": [],
                        "userProperties": [],
                        "typeProperties": {
                            "expression": {
                                "value": "@equals(pipeline().parameters.FwkItem['TypeLoad'], 'Full')",
                                "type": "Expression"
                            },
                            "ifFalseActivities": [
                                {
                                    "name": "Execute PL_ING_08_02_SnowflakeDeltaLoad",
                                    "description": "This pipeline is used to execute all the inner activities that are included in the ingestion module.",
                                    "type": "ExecutePipeline",
                                    "dependsOn": [],
                                    "policy": {
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "pipeline": {
                                            "referenceName": "PL_ING_08_02_SnowflakeDeltaLoad",
                                            "type": "PipelineReference"
                                        },
                                        "waitOnCompletion": true,
                                        "parameters": {
                                            "FwkItem": {
                                                "value": "@pipeline().parameters.FwkItem",
                                                "type": "Expression"
                                            },
                                            "PL_01TriggerTime": {
                                                "value": "@pipeline().parameters.PL_01TriggerTime",
                                                "type": "Expression"
                                            },
                                            "EntRunId": {
                                                "value": "@pipeline().parameters.EntRunId",
                                                "type": "Expression"
                                            },
                                            "ModuleRunId": {
                                                "value": "@pipeline().parameters.ModuleRunId",
                                                "type": "Expression"
                                            }
                                        }
                                    }
                                }
                            ],
                            "ifTrueActivities": [
                                {
                                    "name": "Execute PL_ING_08_01_SnowflakeFullLoad",
                                    "description": "This pipeline is used to execute all the inner activities that are included in the ingestion module.",
                                    "type": "ExecutePipeline",
                                    "dependsOn": [],
                                    "policy": {
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "pipeline": {
                                            "referenceName": "PL_ING_08_01_SnowflakeFullLoad",
                                            "type": "PipelineReference"
                                        },
                                        "waitOnCompletion": true,
                                        "parameters": {
                                            "FwkItem": {
                                                "value": "@pipeline().parameters.FwkItem",
                                                "type": "Expression"
                                            },
                                            "PL_01TriggerTime": {
                                                "value": "@pipeline().parameters.PL_01TriggerTime",
                                                "type": "Expression"
                                            },
                                            "EntRunId": {
                                                "value": "@pipeline().parameters.EntRunId",
                                                "type": "Expression"
                                            },
                                            "ModuleRunId": {
                                                "value": "@pipeline().parameters.ModuleRunId",
                                                "type": "Expression"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {}
                },
                "parameters": {
                    "FwkItem": {
                        "type": "array"
                    },
                    "PL_01TriggerTime": {
                        "type": "string"
                    },
                    "EntRunId": {
                        "type": "string"
                    },
                    "ModuleRunId": {
                        "type": "string"
                    }
                },
                "folder": {
                    "name": "01 Ingestion Module/08 Snowflake"
                },
                "annotations": [],
                "lastPublishTime": "2023-07-06T08:29:15Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/pipelines/PL_ING_08_02_SnowflakeDeltaLoad')]",
                "[concat(variables('factoryId'), '/pipelines/PL_ING_08_01_SnowflakeFullLoad')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/PL_ING_03_01_SQLOnPremFullLoad')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "FullLoad Copy into Landing",
                        "description": "Copy a table from a database to the configurated Sink dynamically taking by input FwkItem, SrcPath.",
                        "type": "Copy",
                        "dependsOn": [
                            {
                                "activity": "spi_IngtLogInsert",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "SqlServerSource",
                                "sqlReaderQuery": {
                                    "value": "@if(empty(string(pipeline().parameters.FwkItem['Query'])),concat('SELECT ', coalesce(pipeline().parameters.FwkItem['SelectedColumnNames'], '*'), ' FROM ',pipeline().parameters.FwkItem['Schemaname'], '.', pipeline().parameters.FwkItem['EntityName'], ' ', pipeline().parameters.FwkItem['TableHint'], ' ', pipeline().parameters.FwkItem['QueryHint']), pipeline().parameters.FwkItem['Query'])",
                                    "type": "Expression"
                                },
                                "queryTimeout": "02:00:00",
                                "partitionOption": "None"
                            },
                            "sink": {
                                "type": "ParquetSink",
                                "storeSettings": {
                                    "type": "AzureBlobFSWriteSettings"
                                },
                                "formatSettings": {
                                    "type": "ParquetWriteSettings"
                                }
                            },
                            "enableStaging": false,
                            "validateDataConsistency": true
                        },
                        "inputs": [
                            {
                                "referenceName": "DS_SQLOnPrem_Source",
                                "type": "DatasetReference",
                                "parameters": {
                                    "FwkItem": {
                                        "value": "@pipeline().parameters.FwkItem",
                                        "type": "Expression"
                                    }
                                }
                            }
                        ],
                        "outputs": [
                            {
                                "referenceName": "DS_ADLS_PRQ_Sink",
                                "type": "DatasetReference",
                                "parameters": {
                                    "InstanceURL": {
                                        "value": "@pipeline().parameters.FwkItem['SinkInstanceURL']",
                                        "type": "Expression"
                                    },
                                    "FullPath": {
                                        "value": "@concat(pipeline().parameters.FwkItem['SinkPath'], \n\t'/',\n\tformatDateTime(pipeline().parameters.PL_01TriggerTime,'yyyy'),\n\tformatDateTime(pipeline().parameters.PL_01TriggerTime,'MM'),\n\tformatDateTime(pipeline().parameters.PL_01TriggerTime,'dd'),\n\tformatDateTime(pipeline().parameters.PL_01TriggerTime,'HH'),\n\tformatDateTime(pipeline().parameters.PL_01TriggerTime,'mm'),\n\t'_',\n\tpipeline().parameters.FwkItem['EntityName'],\n\t'.snappy.parquet'\n)",
                                        "type": "Expression"
                                    }
                                }
                            }
                        ]
                    },
                    {
                        "name": "spi_IngtLogInsert",
                        "description": "Executes the SP spi_IngtLogInsert to insert record into IngtLog table with the execution module information.",
                        "type": "SqlServerStoredProcedure",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "storedProcedureName": "[[dbo].[spi_IngtLogInsert]",
                            "storedProcedureParameters": {
                                "IngtOutputId": {
                                    "value": {
                                        "value": "@pipeline().parameters.FwkItem['IngtOutputId']",
                                        "type": "Expression"
                                    },
                                    "type": "Int32"
                                },
                                "EntRunId": {
                                    "value": {
                                        "value": "@pipeline().parameters.EntRunId",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                },
                                "ModuleRunId": {
                                    "value": {
                                        "value": "@pipeline().parameters.ModuleRunId",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                },
                                "PipelineStatus": {
                                    "value": {
                                        "value": "InProgress",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                },
                                "StartDate": {
                                    "value": {
                                        "value": "@formatdatetime(pipeline().TriggerTime)",
                                        "type": "Expression"
                                    },
                                    "type": "Datetime"
                                },
                                "RowsRead": {
                                    "value": null,
                                    "type": "Int64"
                                },
                                "RowsCopied": {
                                    "value": null,
                                    "type": "Int64"
                                },
                                "CopyDuration": {
                                    "value": null,
                                    "type": "Double"
                                },
                                "Throughput": {
                                    "value": null,
                                    "type": "Double"
                                },
                                "ErrorMessage": {
                                    "value": null,
                                    "type": "String"
                                },
                                "FileName": {
                                    "value": null,
                                    "type": "String"
                                }
                            }
                        },
                        "linkedServiceName": {
                            "referenceName": "LS_configurationDB",
                            "type": "LinkedServiceReference"
                        }
                    },
                    {
                        "name": "spu_IngtLogUpdate_succeeded",
                        "description": "Executes the SP spu_IngtLogUpdate to update record into IngtLog table with the execution module information.",
                        "type": "SqlServerStoredProcedure",
                        "dependsOn": [
                            {
                                "activity": "FullLoad Copy into Landing",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "storedProcedureName": "[[dbo].[spu_IngtLogUpdate]",
                            "storedProcedureParameters": {
                                "IngtOutputId": {
                                    "value": {
                                        "value": "@pipeline().parameters.FwkItem['IngtOutputId']",
                                        "type": "Expression"
                                    },
                                    "type": "Int32"
                                },
                                "EntRunId": {
                                    "value": {
                                        "value": "@pipeline().parameters.EntRunId",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                },
                                "ModuleRunId": {
                                    "value": {
                                        "value": "@pipeline().parameters.ModuleRunId",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                },
                                "PipelineStatus": {
                                    "value": {
                                        "value": "Succeeded",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                },
                                "RowsRead": {
                                    "value": {
                                        "value": "@if(\n    contains(activity('FullLoad Copy into Landing').output, 'rowsRead'),\n    activity('FullLoad Copy into Landing').output.rowsRead,\n    null\n)",
                                        "type": "Expression"
                                    },
                                    "type": "Int64"
                                },
                                "RowsCopied": {
                                    "value": {
                                        "value": "@if(\n    contains(activity('FullLoad Copy into Landing').output, 'rowsCopied'),\n    activity('FullLoad Copy into Landing').output.rowsCopied,\n    null\n)",
                                        "type": "Expression"
                                    },
                                    "type": "Int64"
                                },
                                "CopyDuration": {
                                    "value": {
                                        "value": "@if(\n    contains(activity('FullLoad Copy into Landing').output, 'copyDuration'),\n    activity('FullLoad Copy into Landing').output.copyDuration,\n    null\n)",
                                        "type": "Expression"
                                    },
                                    "type": "Double"
                                },
                                "Throughput": {
                                    "value": {
                                        "value": "@if(\n    contains(activity('FullLoad Copy into Landing').output, 'throughput'),\n    activity('FullLoad Copy into Landing').output.throughput,\n    null\n)",
                                        "type": "Expression"
                                    },
                                    "type": "Double"
                                },
                                "ErrorMessage": {
                                    "value": null,
                                    "type": "String"
                                },
                                "RowsSkipped": {
                                    "value": null,
                                    "type": "Int64"
                                },
                                "LogFilePath": {
                                    "value": null,
                                    "type": "String"
                                },
                                "FileName": {
                                    "value": null,
                                    "type": "String"
                                }
                            }
                        },
                        "linkedServiceName": {
                            "referenceName": "LS_configurationDB",
                            "type": "LinkedServiceReference"
                        }
                    },
                    {
                        "name": "spu_IngtLogUpdate_failed",
                        "description": "Executes the SP spu_IngtLogUpdate to update record into IngtLog table with the execution module information.",
                        "type": "SqlServerStoredProcedure",
                        "dependsOn": [
                            {
                                "activity": "FullLoad Copy into Landing",
                                "dependencyConditions": [
                                    "Failed"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "storedProcedureName": "[[dbo].[spu_IngtLogUpdate]",
                            "storedProcedureParameters": {
                                "IngtOutputId": {
                                    "value": {
                                        "value": "@pipeline().parameters.FwkItem['IngtOutputId']",
                                        "type": "Expression"
                                    },
                                    "type": "Int32"
                                },
                                "EntRunId": {
                                    "value": {
                                        "value": "@pipeline().parameters.EntRunId",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                },
                                "ModuleRunId": {
                                    "value": {
                                        "value": "@pipeline().parameters.ModuleRunId",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                },
                                "PipelineStatus": {
                                    "value": {
                                        "value": "Failed",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                },
                                "RowsRead": {
                                    "value": null,
                                    "type": "Int64"
                                },
                                "RowsCopied": {
                                    "value": null,
                                    "type": "Int64"
                                },
                                "CopyDuration": {
                                    "value": null,
                                    "type": "Double"
                                },
                                "Throughput": {
                                    "value": null,
                                    "type": "Double"
                                },
                                "ErrorMessage": {
                                    "value": {
                                        "value": "@if(\n    and(\n        contains(activity('FullLoad Copy into Landing').output, 'errors'),\n        greater(length(activity('FullLoad Copy into Landing').output.errors), 0)\n    ),\n    activity('FullLoad Copy into Landing').output.errors[0].Message,\n    null\n)",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                },
                                "RowsSkipped": {
                                    "value": null,
                                    "type": "Int64"
                                },
                                "LogFilePath": {
                                    "value": null,
                                    "type": "String"
                                },
                                "FileName": {
                                    "value": null,
                                    "type": "String"
                                }
                            }
                        },
                        "linkedServiceName": {
                            "referenceName": "LS_configurationDB",
                            "type": "LinkedServiceReference"
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {}
                },
                "parameters": {
                    "FwkItem": {
                        "type": "array"
                    },
                    "PL_01TriggerTime": {
                        "type": "string"
                    },
                    "EntRunId": {
                        "type": "string"
                    },
                    "ModuleRunId": {
                        "type": "string"
                    }
                },
                "folder": {
                    "name": "01 Ingestion Module/03 SQLOnPrem"
                },
                "annotations": [],
                "lastPublishTime": "2023-07-06T08:29:14Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/datasets/DS_SQLOnPrem_Source')]",
                "[concat(variables('factoryId'), '/datasets/DS_ADLS_PRQ_Sink')]",
                "[concat(variables('factoryId'), '/linkedServices/LS_configurationDB')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/PL_ING_03_02_SQLOnPremDeltaLoad')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Delta Copy into Landing",
                        "description": "Copy a table from a database to the configurated Sink dynamically taking by input FwkItem, SrcPath.",
                        "type": "Copy",
                        "dependsOn": [
                            {
                                "activity": "IF numeric",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            },
                            {
                                "activity": "LookupOldWmkConfig",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "SqlServerSource",
                                "sqlReaderQuery": {
                                    "value": "@concat(\n    'SELECT * FROM (',\n        if(empty(string(pipeline().parameters.FwkItem['Query'])),\n            concat('SELECT ', coalesce(pipeline().parameters.FwkItem['SelectedColumnNames'], '*'), ' FROM ', pipeline().parameters.FwkItem['SchemaName'], '.', pipeline().parameters.FwkItem['EntityName'], ' ', pipeline().parameters.FwkItem['TableHint'])\n            , pipeline().parameters.FwkItem['Query']\n          ),\n    ') T1 WHERE ( ''', pipeline().parameters.FwkItem['WmkDataType'], ''' = ''datetime'' AND ', pipeline().parameters.FwkItem['WmkColumnName'], ' > ''', convertToUtc(activity('LookupOldWmkConfig').output.firstRow.NewValueWatermark, 'UTC', 'yyyy-MM-ddTHH:mm:ss'), '''',' ) \n\t \t\tOR ( ''', pipeline().parameters.FwkItem['WmkDataType'], ''' = ''numeric'' AND ', pipeline().parameters.FwkItem['WmkColumnName'], ' > ''', coalesce(activity('LookupOldWmkConfig').output.firstRow.NewValueWatermark, 0), '''', ' )\n            OR ( ''', pipeline().parameters.FwkItem['WmkDataType'], ''' = ''stringDatetime'' AND convert(datetime, ', pipeline().parameters.FwkItem['WmkColumnName'], ') > ''', convertToUtc(activity('LookupOldWmkConfig').output.firstRow.NewValueWatermark, 'UTC', 'yyyy-MM-ddTHH:mm:ss'), '''',')',\n    ' ', pipeline().parameters.FwkItem['QueryHint']\n)",
                                    "type": "Expression"
                                },
                                "queryTimeout": "02:00:00",
                                "partitionOption": "None"
                            },
                            "sink": {
                                "type": "ParquetSink",
                                "storeSettings": {
                                    "type": "AzureBlobFSWriteSettings"
                                },
                                "formatSettings": {
                                    "type": "ParquetWriteSettings"
                                }
                            },
                            "enableStaging": false,
                            "validateDataConsistency": true
                        },
                        "inputs": [
                            {
                                "referenceName": "DS_SQLOnPrem_Source",
                                "type": "DatasetReference",
                                "parameters": {
                                    "FwkItem": {
                                        "value": "@pipeline().parameters.FwkItem",
                                        "type": "Expression"
                                    }
                                }
                            }
                        ],
                        "outputs": [
                            {
                                "referenceName": "DS_ADLS_PRQ_Sink",
                                "type": "DatasetReference",
                                "parameters": {
                                    "InstanceURL": {
                                        "value": "@pipeline().parameters.FwkItem['SinkInstanceURL']",
                                        "type": "Expression"
                                    },
                                    "FullPath": {
                                        "value": "@concat(pipeline().parameters.FwkItem['SinkPath'], \n\t'/',\n\tformatDateTime(pipeline().parameters.PL_01TriggerTime,'yyyy'),\n\tformatDateTime(pipeline().parameters.PL_01TriggerTime,'MM'),\n\tformatDateTime(pipeline().parameters.PL_01TriggerTime,'dd'),\n\tformatDateTime(pipeline().parameters.PL_01TriggerTime,'HH'),\n\tformatDateTime(pipeline().parameters.PL_01TriggerTime,'mm'),\n\t'_',\n\tpipeline().parameters.FwkItem['EntityName'],\n\t'.snappy.parquet'\n)",
                                        "type": "Expression"
                                    }
                                }
                            }
                        ]
                    },
                    {
                        "name": "spu_UpdateWmk",
                        "description": "Executes the SP ‘spu_FwkWatermarkIntUpdate’ to Update the watermark value for objects using watermark datatype \"1\"",
                        "type": "SqlServerStoredProcedure",
                        "dependsOn": [
                            {
                                "activity": "Delta Copy into Landing",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "storedProcedureName": "[[dbo].[spu_IngtWatermarkUpdate]",
                            "storedProcedureParameters": {
                                "FwkEntityId": {
                                    "value": {
                                        "value": "@pipeline().parameters.FwkItem['FwkEntityId']",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                },
                                "NewValueWmkInt": {
                                    "value": {
                                        "value": "@if(equals(pipeline().parameters.FwkItem['WmkDataType'], 'numeric'), activity('LookupNewWmkSrc').output.firstRow.NewWatermarkValue, null)",
                                        "type": "Expression"
                                    },
                                    "type": "Int64"
                                },
                                "NewValueWmkDt": {
                                    "value": {
                                        "value": "@if(equals(pipeline().parameters.FwkItem['WmkDataType'], 'datetime'), convertToUtc(pipeline().parameters.PL_01TriggerTime, 'UTC', 'yyyy-MM-ddTHH:mm:ss'), if(equals(pipeline().parameters.FwkItem['WmkDataType'], 'stringDatetime'), pipeline().parameters.PL_01TriggerTime, null))",
                                        "type": "Expression"
                                    },
                                    "type": "Datetime"
                                }
                            }
                        },
                        "linkedServiceName": {
                            "referenceName": "LS_configurationDB",
                            "type": "LinkedServiceReference"
                        }
                    },
                    {
                        "name": "spi_NewRowsToWmkInt",
                        "description": "Executes the SP ‘spi_FwkWatermarkInsert’ to create watermark for the source object.",
                        "type": "SqlServerStoredProcedure",
                        "dependsOn": [
                            {
                                "activity": "spi_IngtLogInsert",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "storedProcedureName": "[[dbo].[spi_IngtWatermarkInsert]",
                            "storedProcedureParameters": {
                                "FwkEntityId": {
                                    "value": {
                                        "value": "@pipeline().parameters.FwkItem['FwkEntityId']",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                },
                                "WmkDataType": {
                                    "value": {
                                        "value": "@pipeline().parameters.FwkItem['WmkDataType']",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                }
                            }
                        },
                        "linkedServiceName": {
                            "referenceName": "LS_configurationDB",
                            "type": "LinkedServiceReference"
                        }
                    },
                    {
                        "name": "LookupOldWmkConfig",
                        "description": "Executes the SP ‘sps_LookupIngtWatermark’ to retrieve the information from the table  ‘FwkWatermark’ by SrcObjectChild and FwkTriggerId.",
                        "type": "Lookup",
                        "dependsOn": [
                            {
                                "activity": "spi_NewRowsToWmkInt",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "AzureSqlSource",
                                "sqlReaderStoredProcedureName": "[[dbo].[sps_LookupIngtWatermark]",
                                "storedProcedureParameters": {
                                    "FwkEntityId": {
                                        "type": "String",
                                        "value": {
                                            "value": "@pipeline().parameters.FwkItem['FwkEntityId']",
                                            "type": "Expression"
                                        }
                                    },
                                    "WmkDataType": {
                                        "type": "String",
                                        "value": {
                                            "value": "@pipeline().parameters.FwkItem['WmkDataType']",
                                            "type": "Expression"
                                        }
                                    }
                                },
                                "queryTimeout": "02:00:00",
                                "partitionOption": "None"
                            },
                            "dataset": {
                                "referenceName": "DS_SQL_Configuration",
                                "type": "DatasetReference",
                                "parameters": {}
                            },
                            "firstRowOnly": true
                        }
                    },
                    {
                        "name": "IF numeric",
                        "type": "IfCondition",
                        "dependsOn": [
                            {
                                "activity": "spi_NewRowsToWmkInt",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "expression": {
                                "value": "@equals(pipeline().parameters.FwkItem['WmkDataType'], 'numeric')\n",
                                "type": "Expression"
                            },
                            "ifTrueActivities": [
                                {
                                    "name": "LookupNewWmkSrc",
                                    "description": "Executes a query to the ‘FwkWatermark’ table  to get the ‘NewWatermarkValue’ column value.",
                                    "type": "Lookup",
                                    "dependsOn": [],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "source": {
                                            "type": "SqlServerSource",
                                            "sqlReaderQuery": {
                                                "value": "SELECT MAX(@{pipeline().parameters.FwkItem['WmkColumnName']}) as NewWatermarkValue from [@{pipeline().parameters.FwkItem['SchemaName']}].[@{pipeline().parameters.FwkItem['EntityName']}]",
                                                "type": "Expression"
                                            },
                                            "queryTimeout": "02:00:00",
                                            "partitionOption": "None"
                                        },
                                        "dataset": {
                                            "referenceName": "DS_SQLOnPrem_Source",
                                            "type": "DatasetReference",
                                            "parameters": {
                                                "FwkItem": {
                                                    "value": "@pipeline().parameters.FwkItem",
                                                    "type": "Expression"
                                                }
                                            }
                                        },
                                        "firstRowOnly": true
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "name": "spi_IngtIfNumeric_failed",
                        "description": "Executes the SP spi_IngtLogInsert to insert record into IngtLog table with the execution module information.",
                        "type": "SqlServerStoredProcedure",
                        "dependsOn": [
                            {
                                "activity": "IF numeric",
                                "dependencyConditions": [
                                    "Failed"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "storedProcedureName": "[[dbo].[spi_IngtLogInsert]",
                            "storedProcedureParameters": {
                                "IngtOutputId": {
                                    "value": {
                                        "value": "@pipeline().parameters.FwkItem['IngtOutputId']",
                                        "type": "Expression"
                                    },
                                    "type": "Int32"
                                },
                                "EntRunId": {
                                    "value": {
                                        "value": "@pipeline().parameters.EntRunId",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                },
                                "ModuleRunId": {
                                    "value": {
                                        "value": "@pipeline().parameters.ModuleRunId",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                },
                                "PipelineStatus": {
                                    "value": "Failed",
                                    "type": "String"
                                },
                                "StartDate": {
                                    "value": {
                                        "value": "@formatdatetime(pipeline().TriggerTime)",
                                        "type": "Expression"
                                    },
                                    "type": "Datetime"
                                },
                                "RowsRead": {
                                    "value": null,
                                    "type": "Int64"
                                },
                                "RowsCopied": {
                                    "value": null,
                                    "type": "Int64"
                                },
                                "CopyDuration": {
                                    "value": null,
                                    "type": "Double"
                                },
                                "Throughput": {
                                    "value": null,
                                    "type": "Double"
                                },
                                "ErrorMessage": {
                                    "value": null,
                                    "type": "String"
                                },
                                "FileName": {
                                    "value": null,
                                    "type": "String"
                                }
                            }
                        },
                        "linkedServiceName": {
                            "referenceName": "LS_configurationDB",
                            "type": "LinkedServiceReference"
                        }
                    },
                    {
                        "name": "spi_IngtLogInsert",
                        "description": "Executes the SP spi_IngtLogInsert to insert record into IngtLog table with the execution module information.",
                        "type": "SqlServerStoredProcedure",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "storedProcedureName": "[[dbo].[spi_IngtLogInsert]",
                            "storedProcedureParameters": {
                                "IngtOutputId": {
                                    "value": {
                                        "value": "@pipeline().parameters.FwkItem['IngtOutputId']",
                                        "type": "Expression"
                                    },
                                    "type": "Int32"
                                },
                                "EntRunId": {
                                    "value": {
                                        "value": "@pipeline().parameters.EntRunId",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                },
                                "ModuleRunId": {
                                    "value": {
                                        "value": "@pipeline().parameters.ModuleRunId",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                },
                                "PipelineStatus": {
                                    "value": {
                                        "value": "InProgress",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                },
                                "StartDate": {
                                    "value": {
                                        "value": "@formatdatetime(pipeline().TriggerTime)",
                                        "type": "Expression"
                                    },
                                    "type": "Datetime"
                                },
                                "RowsRead": {
                                    "value": null,
                                    "type": "Int64"
                                },
                                "RowsCopied": {
                                    "value": null,
                                    "type": "Int64"
                                },
                                "CopyDuration": {
                                    "value": null,
                                    "type": "Double"
                                },
                                "Throughput": {
                                    "value": null,
                                    "type": "Double"
                                },
                                "ErrorMessage": {
                                    "value": null,
                                    "type": "String"
                                },
                                "FileName": {
                                    "value": null,
                                    "type": "String"
                                }
                            }
                        },
                        "linkedServiceName": {
                            "referenceName": "LS_configurationDB",
                            "type": "LinkedServiceReference"
                        }
                    },
                    {
                        "name": "spu_IngtLogUpdate_succeeded",
                        "description": "Executes the SP spu_IngtLogUpdate to update record into IngtLog table with the execution module information.",
                        "type": "SqlServerStoredProcedure",
                        "dependsOn": [
                            {
                                "activity": "spu_UpdateWmk",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "storedProcedureName": "[[dbo].[spu_IngtLogUpdate]",
                            "storedProcedureParameters": {
                                "IngtOutputId": {
                                    "value": {
                                        "value": "@pipeline().parameters.FwkItem['IngtOutputId']",
                                        "type": "Expression"
                                    },
                                    "type": "Int32"
                                },
                                "EntRunId": {
                                    "value": {
                                        "value": "@pipeline().parameters.EntRunId",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                },
                                "ModuleRunId": {
                                    "value": {
                                        "value": "@pipeline().parameters.ModuleRunId",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                },
                                "PipelineStatus": {
                                    "value": {
                                        "value": "Succeeded",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                },
                                "RowsRead": {
                                    "value": {
                                        "value": "@if(\n    contains(activity('Delta Copy into Landing').output, 'rowsRead'),\n    activity('Delta Copy into Landing').output.rowsRead,\n    null\n)",
                                        "type": "Expression"
                                    },
                                    "type": "Int64"
                                },
                                "RowsCopied": {
                                    "value": {
                                        "value": "@if(\n    contains(activity('Delta Copy into Landing').output, 'rowsCopied'),\n    activity('Delta Copy into Landing').output.rowsCopied,\n    null\n)",
                                        "type": "Expression"
                                    },
                                    "type": "Int64"
                                },
                                "CopyDuration": {
                                    "value": {
                                        "value": "@if(\n    contains(activity('Delta Copy into Landing').output, 'copyDuration'),\n    activity('Delta Copy into Landing').output.copyDuration,\n    null\n)",
                                        "type": "Expression"
                                    },
                                    "type": "Double"
                                },
                                "Throughput": {
                                    "value": {
                                        "value": "@if(\n    contains(activity('Delta Copy into Landing').output, 'throughput'),\n    activity('Delta Copy into Landing').output.throughput,\n    null\n)",
                                        "type": "Expression"
                                    },
                                    "type": "Double"
                                },
                                "ErrorMessage": {
                                    "value": null,
                                    "type": "String"
                                },
                                "RowsSkipped": {
                                    "value": null,
                                    "type": "Int64"
                                },
                                "LogFilePath": {
                                    "value": null,
                                    "type": "String"
                                },
                                "FileName": {
                                    "value": null,
                                    "type": "String"
                                }
                            }
                        },
                        "linkedServiceName": {
                            "referenceName": "LS_configurationDB",
                            "type": "LinkedServiceReference"
                        }
                    },
                    {
                        "name": "spu_IngtLogUpdate_failed",
                        "description": "Executes the SP spu_IngtLogUpdate to update record into IngtLog table with the execution module information.",
                        "type": "SqlServerStoredProcedure",
                        "dependsOn": [
                            {
                                "activity": "Delta Copy into Landing",
                                "dependencyConditions": [
                                    "Failed"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "storedProcedureName": "[[dbo].[spu_IngtLogUpdate]",
                            "storedProcedureParameters": {
                                "IngtOutputId": {
                                    "value": {
                                        "value": "@pipeline().parameters.FwkItem['IngtOutputId']",
                                        "type": "Expression"
                                    },
                                    "type": "Int32"
                                },
                                "EntRunId": {
                                    "value": {
                                        "value": "@pipeline().parameters.EntRunId",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                },
                                "ModuleRunId": {
                                    "value": {
                                        "value": "@pipeline().parameters.ModuleRunId",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                },
                                "PipelineStatus": {
                                    "value": {
                                        "value": "Failed",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                },
                                "RowsRead": {
                                    "value": null,
                                    "type": "Int64"
                                },
                                "RowsCopied": {
                                    "value": null,
                                    "type": "Int64"
                                },
                                "CopyDuration": {
                                    "value": null,
                                    "type": "Double"
                                },
                                "Throughput": {
                                    "value": null,
                                    "type": "Double"
                                },
                                "ErrorMessage": {
                                    "value": {
                                        "value": "@if(\n    and(\n        contains(activity('Delta Copy into Landing').output, 'errors'),\n        greater(length(activity('Delta Copy into Landing').output.errors), 0)\n    ),\n    activity('Delta Copy into Landing').output.errors[0].Message,\n    null\n)",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                },
                                "RowsSkipped": {
                                    "value": null,
                                    "type": "Int64"
                                },
                                "LogFilePath": {
                                    "value": null,
                                    "type": "String"
                                },
                                "FileName": {
                                    "value": null,
                                    "type": "String"
                                }
                            }
                        },
                        "linkedServiceName": {
                            "referenceName": "LS_configurationDB",
                            "type": "LinkedServiceReference"
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {}
                },
                "parameters": {
                    "FwkItem": {
                        "type": "array"
                    },
                    "PL_01TriggerTime": {
                        "type": "string"
                    },
                    "EntRunId": {
                        "type": "string"
                    },
                    "ModuleRunId": {
                        "type": "string"
                    }
                },
                "folder": {
                    "name": "01 Ingestion Module/03 SQLOnPrem"
                },
                "annotations": [],
                "lastPublishTime": "2023-07-06T08:29:14Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/datasets/DS_SQLOnPrem_Source')]",
                "[concat(variables('factoryId'), '/datasets/DS_ADLS_PRQ_Sink')]",
                "[concat(variables('factoryId'), '/linkedServices/LS_configurationDB')]",
                "[concat(variables('factoryId'), '/datasets/DS_SQL_Configuration')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/PL_ING_03_SQLOnPremLoad')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "If is FullLoad",
                        "description": "Evaluates the ‘LoadType’ and go in case it matches.",
                        "type": "IfCondition",
                        "dependsOn": [],
                        "userProperties": [],
                        "typeProperties": {
                            "expression": {
                                "value": "@equals(pipeline().parameters.FwkItem['TypeLoad'], 'Full')",
                                "type": "Expression"
                            },
                            "ifFalseActivities": [
                                {
                                    "name": "Execute PL_ING_03_02_SQLOnPremDeltaLoad",
                                    "description": "This pipeline is used to execute all the inner activities that are included in the ingestion module.",
                                    "type": "ExecutePipeline",
                                    "dependsOn": [],
                                    "policy": {
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "pipeline": {
                                            "referenceName": "PL_ING_03_02_SQLOnPremDeltaLoad",
                                            "type": "PipelineReference"
                                        },
                                        "waitOnCompletion": true,
                                        "parameters": {
                                            "FwkItem": {
                                                "value": "@pipeline().parameters.FwkItem",
                                                "type": "Expression"
                                            },
                                            "PL_01TriggerTime": {
                                                "value": "@pipeline().parameters.PL_01TriggerTime",
                                                "type": "Expression"
                                            },
                                            "EntRunId": {
                                                "value": "@pipeline().parameters.EntRunId",
                                                "type": "Expression"
                                            },
                                            "ModuleRunId": {
                                                "value": "@pipeline().parameters.ModuleRunId",
                                                "type": "Expression"
                                            }
                                        }
                                    }
                                }
                            ],
                            "ifTrueActivities": [
                                {
                                    "name": "Execute PL_ING_03_01_SQLOnPremFullLoad",
                                    "description": "This pipeline is used to execute all the inner activities that are included in the ingestion module.",
                                    "type": "ExecutePipeline",
                                    "dependsOn": [],
                                    "policy": {
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "pipeline": {
                                            "referenceName": "PL_ING_03_01_SQLOnPremFullLoad",
                                            "type": "PipelineReference"
                                        },
                                        "waitOnCompletion": true,
                                        "parameters": {
                                            "FwkItem": {
                                                "value": "@pipeline().parameters.FwkItem",
                                                "type": "Expression"
                                            },
                                            "PL_01TriggerTime": {
                                                "value": "@pipeline().parameters.PL_01TriggerTime",
                                                "type": "Expression"
                                            },
                                            "EntRunId": {
                                                "value": "@pipeline().parameters.EntRunId",
                                                "type": "Expression"
                                            },
                                            "ModuleRunId": {
                                                "value": "@pipeline().parameters.ModuleRunId",
                                                "type": "Expression"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {}
                },
                "parameters": {
                    "FwkItem": {
                        "type": "array"
                    },
                    "PL_01TriggerTime": {
                        "type": "string"
                    },
                    "EntRunId": {
                        "type": "string"
                    },
                    "ModuleRunId": {
                        "type": "string"
                    }
                },
                "folder": {
                    "name": "01 Ingestion Module/03 SQLOnPrem"
                },
                "annotations": [],
                "lastPublishTime": "2023-07-06T08:29:16Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/pipelines/PL_ING_03_02_SQLOnPremDeltaLoad')]",
                "[concat(variables('factoryId'), '/pipelines/PL_ING_03_01_SQLOnPremFullLoad')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/PL_ING_04_01_OracleFullLoad')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "FullLoad Copy into Landing",
                        "description": "Copy a table from a database to the configurated Sink dynamically taking by input FwkItem, SrcPath.",
                        "type": "Copy",
                        "dependsOn": [
                            {
                                "activity": "spi_IngtLogInsert",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "OracleSource",
                                "oracleReaderQuery": {
                                    "value": "@if(empty(string(pipeline().parameters.FwkItem['Query'])),concat('SELECT ', pipeline().parameters.FwkItem['QueryHint'], ' ', coalesce(pipeline().parameters.FwkItem['SelectedColumnNames'], '*'), ' FROM ',pipeline().parameters.FwkItem['Schemaname'], '.', pipeline().parameters.FwkItem['EntityName'], ''), pipeline().parameters.FwkItem['Query'])",
                                    "type": "Expression"
                                },
                                "partitionOption": "None",
                                "convertDecimalToInteger": true,
                                "queryTimeout": "02:00:00"
                            },
                            "sink": {
                                "type": "ParquetSink",
                                "storeSettings": {
                                    "type": "AzureBlobFSWriteSettings"
                                },
                                "formatSettings": {
                                    "type": "ParquetWriteSettings"
                                }
                            },
                            "enableStaging": false,
                            "validateDataConsistency": true
                        },
                        "inputs": [
                            {
                                "referenceName": "DS_Oracle_Source",
                                "type": "DatasetReference",
                                "parameters": {
                                    "FwkItem": {
                                        "value": "@pipeline().parameters.FwkItem",
                                        "type": "Expression"
                                    }
                                }
                            }
                        ],
                        "outputs": [
                            {
                                "referenceName": "DS_ADLS_PRQ_Sink",
                                "type": "DatasetReference",
                                "parameters": {
                                    "InstanceURL": {
                                        "value": "@pipeline().parameters.FwkItem['SinkInstanceURL']",
                                        "type": "Expression"
                                    },
                                    "FullPath": {
                                        "value": "@concat(pipeline().parameters.FwkItem['SinkPath'], \n\t'/',\n\tformatDateTime(pipeline().parameters.PL_01TriggerTime,'yyyy'),\n\tformatDateTime(pipeline().parameters.PL_01TriggerTime,'MM'),\n\tformatDateTime(pipeline().parameters.PL_01TriggerTime,'dd'),\n\tformatDateTime(pipeline().parameters.PL_01TriggerTime,'HH'),\n\tformatDateTime(pipeline().parameters.PL_01TriggerTime,'mm'),\n\t'_',\n\tpipeline().parameters.FwkItem['EntityName'],\n\t'.snappy.parquet'\n)",
                                        "type": "Expression"
                                    }
                                }
                            }
                        ]
                    },
                    {
                        "name": "spi_IngtLogInsert",
                        "description": "Executes the SP spi_IngtLogInsert to insert record into IngtLog table with the execution module information.",
                        "type": "SqlServerStoredProcedure",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "storedProcedureName": "[[dbo].[spi_IngtLogInsert]",
                            "storedProcedureParameters": {
                                "IngtOutputId": {
                                    "value": {
                                        "value": "@pipeline().parameters.FwkItem['IngtOutputId']",
                                        "type": "Expression"
                                    },
                                    "type": "Int32"
                                },
                                "EntRunId": {
                                    "value": {
                                        "value": "@pipeline().parameters.EntRunId",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                },
                                "ModuleRunId": {
                                    "value": {
                                        "value": "@pipeline().parameters.ModuleRunId",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                },
                                "PipelineStatus": {
                                    "value": {
                                        "value": "InProgress",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                },
                                "StartDate": {
                                    "value": {
                                        "value": "@formatdatetime(pipeline().TriggerTime)",
                                        "type": "Expression"
                                    },
                                    "type": "Datetime"
                                },
                                "RowsRead": {
                                    "value": null,
                                    "type": "Int64"
                                },
                                "RowsCopied": {
                                    "value": null,
                                    "type": "Int64"
                                },
                                "CopyDuration": {
                                    "value": null,
                                    "type": "Double"
                                },
                                "Throughput": {
                                    "value": null,
                                    "type": "Double"
                                },
                                "ErrorMessage": {
                                    "value": null,
                                    "type": "String"
                                },
                                "FileName": {
                                    "value": null,
                                    "type": "String"
                                }
                            }
                        },
                        "linkedServiceName": {
                            "referenceName": "LS_configurationDB",
                            "type": "LinkedServiceReference"
                        }
                    },
                    {
                        "name": "spu_IngtLogUpdate_succeeded",
                        "description": "Executes the SP spu_IngtLogUpdate to update record into IngtLog table with the execution module information.",
                        "type": "SqlServerStoredProcedure",
                        "dependsOn": [
                            {
                                "activity": "FullLoad Copy into Landing",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "storedProcedureName": "[[dbo].[spu_IngtLogUpdate]",
                            "storedProcedureParameters": {
                                "IngtOutputId": {
                                    "value": {
                                        "value": "@pipeline().parameters.FwkItem['IngtOutputId']",
                                        "type": "Expression"
                                    },
                                    "type": "Int32"
                                },
                                "EntRunId": {
                                    "value": {
                                        "value": "@pipeline().parameters.EntRunId",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                },
                                "ModuleRunId": {
                                    "value": {
                                        "value": "@pipeline().parameters.ModuleRunId",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                },
                                "PipelineStatus": {
                                    "value": {
                                        "value": "Succeeded",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                },
                                "RowsRead": {
                                    "value": {
                                        "value": "@if(\n    contains(activity('FullLoad Copy into Landing').output, 'rowsRead'),\n    activity('FullLoad Copy into Landing').output.rowsRead,\n    null\n)",
                                        "type": "Expression"
                                    },
                                    "type": "Int64"
                                },
                                "RowsCopied": {
                                    "value": {
                                        "value": "@if(\n    contains(activity('FullLoad Copy into Landing').output, 'rowsCopied'),\n    activity('FullLoad Copy into Landing').output.rowsCopied,\n    null\n)",
                                        "type": "Expression"
                                    },
                                    "type": "Int64"
                                },
                                "CopyDuration": {
                                    "value": {
                                        "value": "@if(\n    contains(activity('FullLoad Copy into Landing').output, 'copyDuration'),\n    activity('FullLoad Copy into Landing').output.copyDuration,\n    null\n)",
                                        "type": "Expression"
                                    },
                                    "type": "Double"
                                },
                                "Throughput": {
                                    "value": {
                                        "value": "@if(\n    contains(activity('FullLoad Copy into Landing').output, 'throughput'),\n    activity('FullLoad Copy into Landing').output.throughput,\n    null\n)",
                                        "type": "Expression"
                                    },
                                    "type": "Double"
                                },
                                "ErrorMessage": {
                                    "value": null,
                                    "type": "String"
                                },
                                "RowsSkipped": {
                                    "value": null,
                                    "type": "Int64"
                                },
                                "LogFilePath": {
                                    "value": null,
                                    "type": "String"
                                },
                                "FileName": {
                                    "value": null,
                                    "type": "String"
                                }
                            }
                        },
                        "linkedServiceName": {
                            "referenceName": "LS_configurationDB",
                            "type": "LinkedServiceReference"
                        }
                    },
                    {
                        "name": "spu_IngtLogUpdate_failed",
                        "description": "Executes the SP spu_IngtLogUpdate to update record into IngtLog table with the execution module information.",
                        "type": "SqlServerStoredProcedure",
                        "dependsOn": [
                            {
                                "activity": "FullLoad Copy into Landing",
                                "dependencyConditions": [
                                    "Failed"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "storedProcedureName": "[[dbo].[spu_IngtLogUpdate]",
                            "storedProcedureParameters": {
                                "IngtOutputId": {
                                    "value": {
                                        "value": "@pipeline().parameters.FwkItem['IngtOutputId']",
                                        "type": "Expression"
                                    },
                                    "type": "Int32"
                                },
                                "EntRunId": {
                                    "value": {
                                        "value": "@pipeline().parameters.EntRunId",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                },
                                "ModuleRunId": {
                                    "value": {
                                        "value": "@pipeline().parameters.ModuleRunId",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                },
                                "PipelineStatus": {
                                    "value": {
                                        "value": "Failed",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                },
                                "RowsRead": {
                                    "value": null,
                                    "type": "Int64"
                                },
                                "RowsCopied": {
                                    "value": null,
                                    "type": "Int64"
                                },
                                "CopyDuration": {
                                    "value": null,
                                    "type": "Double"
                                },
                                "Throughput": {
                                    "value": null,
                                    "type": "Double"
                                },
                                "ErrorMessage": {
                                    "value": {
                                        "value": "@if(\n    and(\n        contains(activity('FullLoad Copy into Landing').output, 'errors'),\n        greater(length(activity('FullLoad Copy into Landing').output.errors), 0)\n    ),\n    activity('FullLoad Copy into Landing').output.errors[0].Message,\n    null\n)",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                },
                                "RowsSkipped": {
                                    "value": null,
                                    "type": "Int64"
                                },
                                "LogFilePath": {
                                    "value": null,
                                    "type": "String"
                                },
                                "FileName": {
                                    "value": null,
                                    "type": "String"
                                }
                            }
                        },
                        "linkedServiceName": {
                            "referenceName": "LS_configurationDB",
                            "type": "LinkedServiceReference"
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {}
                },
                "parameters": {
                    "FwkItem": {
                        "type": "array"
                    },
                    "PL_01TriggerTime": {
                        "type": "string"
                    },
                    "EntRunId": {
                        "type": "string"
                    },
                    "ModuleRunId": {
                        "type": "string"
                    }
                },
                "folder": {
                    "name": "01 Ingestion Module/04 Oracle"
                },
                "annotations": [],
                "lastPublishTime": "2023-07-06T08:29:14Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/datasets/DS_Oracle_Source')]",
                "[concat(variables('factoryId'), '/datasets/DS_ADLS_PRQ_Sink')]",
                "[concat(variables('factoryId'), '/linkedServices/LS_configurationDB')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/PL_ING_04_02_OracleDeltaLoad')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Delta Copy into Landing",
                        "description": "Copy a table from a database to the configurated Sink dynamically taking by input FwkItem, SrcPath.",
                        "type": "Copy",
                        "dependsOn": [
                            {
                                "activity": "LookupOldWmkConfig",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            },
                            {
                                "activity": "IF numeric",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "OracleSource",
                                "oracleReaderQuery": {
                                    "value": "@concat(\n    'SELECT * FROM (',\n        if(empty(string(pipeline().parameters.FwkItem['Query'])),\n            concat('SELECT ', pipeline().parameters.FwkItem['QueryHint'], ' ', coalesce(pipeline().parameters.FwkItem['SelectedColumnNames'], '*'), ' FROM ', pipeline().parameters.FwkItem['SchemaName'], '.', pipeline().parameters.FwkItem['EntityName'])\n            , pipeline().parameters.FwkItem['Query']\n          ),\n     ') WHERE ( ''',pipeline().parameters.FwkItem['WmkDataType'], ''' = ''datetime'' AND ', pipeline().parameters.FwkItem['WmkColumnName'], ' > to_timestamp(''', replace(string(coalesce(activity('LookupOldWmkConfig').output.firstRow.NewValueWatermark, '1000-01-01 00:00:00')),'T', ' '), '''',', ''YYYY-MM-DD HH24:MI:SS.FF'')) \n            OR ( ''',pipeline().parameters.FwkItem['WmkDataType'], ''' = ''numeric'' AND ', pipeline().parameters.FwkItem['WmkColumnName'], ' > ''', coalesce(activity('LookupOldWmkConfig').output.firstRow.NewValueWatermark, 0), '''',') \n            OR ( ''', pipeline().parameters.FwkItem['WmkDataType'], ''' = ''stringDatetime'' AND to_timestamp(', pipeline().parameters.FwkItem['WmkColumnName'], ', ''YYYY-MM-DD HH24:MI:SS.FF'') > to_timestamp(''', replace(string(coalesce(activity('LookupOldWmkConfig').output.firstRow.NewValueWatermark, '1000-01-01 00:00:00')),'T', ' '), '''',', ''YYYY-MM-DD HH24:MI:SS.FF''))'\n)\n",
                                    "type": "Expression"
                                },
                                "partitionOption": "None",
                                "convertDecimalToInteger": true,
                                "queryTimeout": "02:00:00"
                            },
                            "sink": {
                                "type": "ParquetSink",
                                "storeSettings": {
                                    "type": "AzureBlobFSWriteSettings"
                                },
                                "formatSettings": {
                                    "type": "ParquetWriteSettings"
                                }
                            },
                            "enableStaging": false,
                            "validateDataConsistency": true
                        },
                        "inputs": [
                            {
                                "referenceName": "DS_Oracle_Source",
                                "type": "DatasetReference",
                                "parameters": {
                                    "FwkItem": {
                                        "value": "@pipeline().parameters.FwkItem",
                                        "type": "Expression"
                                    }
                                }
                            }
                        ],
                        "outputs": [
                            {
                                "referenceName": "DS_ADLS_PRQ_Sink",
                                "type": "DatasetReference",
                                "parameters": {
                                    "InstanceURL": {
                                        "value": "@pipeline().parameters.FwkItem['SinkInstanceURL']",
                                        "type": "Expression"
                                    },
                                    "FullPath": {
                                        "value": "@concat(pipeline().parameters.FwkItem['SinkPath'], \n\t'/',\n\tformatDateTime(pipeline().parameters.PL_01TriggerTime,'yyyy'),\n\tformatDateTime(pipeline().parameters.PL_01TriggerTime,'MM'),\n\tformatDateTime(pipeline().parameters.PL_01TriggerTime,'dd'),\n\tformatDateTime(pipeline().parameters.PL_01TriggerTime,'HH'),\n\tformatDateTime(pipeline().parameters.PL_01TriggerTime,'mm'),\n\t'_',\n\tpipeline().parameters.FwkItem['EntityName'],\n\t'.snappy.parquet'\n)",
                                        "type": "Expression"
                                    }
                                }
                            }
                        ]
                    },
                    {
                        "name": "spu_UpdateWmk",
                        "description": "Executes the SP ‘spu_FwkWatermarkIntUpdate’ to Update the watermark value for objects using watermark datatype \"1\"",
                        "type": "SqlServerStoredProcedure",
                        "dependsOn": [
                            {
                                "activity": "Delta Copy into Landing",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "storedProcedureName": "[[dbo].[spu_IngtWatermarkUpdate]",
                            "storedProcedureParameters": {
                                "FwkEntityId": {
                                    "value": {
                                        "value": "@pipeline().parameters.FwkItem['FwkEntityId']",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                },
                                "NewValueWmkInt": {
                                    "value": {
                                        "value": "@if(equals(pipeline().parameters.FwkItem['WmkDataType'], 'numeric'), activity('LookupNewWmkSrc').output.firstRow.NewWatermarkValue, null)\n",
                                        "type": "Expression"
                                    },
                                    "type": "Int64"
                                },
                                "NewValueWmkDt": {
                                    "value": {
                                        "value": "@if(equals(pipeline().parameters.FwkItem['WmkDataType'], 'datetime'), convertToUtc(pipeline().parameters.PL_01TriggerTime, 'UTC', 'yyyy-MM-ddTHH:mm:ss'), if(equals(pipeline().parameters.FwkItem['WmkDataType'], 'stringDatetime'), pipeline().parameters.PL_01TriggerTime, null))",
                                        "type": "Expression"
                                    },
                                    "type": "Datetime"
                                }
                            }
                        },
                        "linkedServiceName": {
                            "referenceName": "LS_configurationDB",
                            "type": "LinkedServiceReference"
                        }
                    },
                    {
                        "name": "spi_NewRowsToWmkInt",
                        "description": "Executes the SP ‘spi_FwkWatermarkInsert’ to create watermark for the source object.",
                        "type": "SqlServerStoredProcedure",
                        "dependsOn": [
                            {
                                "activity": "spi_IngtLogInsert",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "storedProcedureName": "[[dbo].[spi_IngtWatermarkInsert]",
                            "storedProcedureParameters": {
                                "FwkEntityId": {
                                    "value": {
                                        "value": "@pipeline().parameters.FwkItem['FwkEntityId']",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                },
                                "WmkDataType": {
                                    "value": {
                                        "value": "@pipeline().parameters.FwkItem['WmkDataType']",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                }
                            }
                        },
                        "linkedServiceName": {
                            "referenceName": "LS_configurationDB",
                            "type": "LinkedServiceReference"
                        }
                    },
                    {
                        "name": "LookupOldWmkConfig",
                        "description": "Executes the SP ‘sps_LookupIngtWatermark’ to retrieve the information from the table  ‘FwkWatermark’ by SrcObjectChild and FwkTriggerId.",
                        "type": "Lookup",
                        "dependsOn": [
                            {
                                "activity": "spi_NewRowsToWmkInt",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "AzureSqlSource",
                                "sqlReaderStoredProcedureName": "[[dbo].[sps_LookupIngtWatermark]",
                                "storedProcedureParameters": {
                                    "FwkEntityId": {
                                        "type": "String",
                                        "value": {
                                            "value": "@pipeline().parameters.FwkItem['FwkEntityId']",
                                            "type": "Expression"
                                        }
                                    },
                                    "WmkDataType": {
                                        "type": "String",
                                        "value": {
                                            "value": "@pipeline().parameters.FwkItem['WmkDataType']",
                                            "type": "Expression"
                                        }
                                    }
                                },
                                "queryTimeout": "02:00:00",
                                "partitionOption": "None"
                            },
                            "dataset": {
                                "referenceName": "DS_SQL_Configuration",
                                "type": "DatasetReference",
                                "parameters": {}
                            },
                            "firstRowOnly": true
                        }
                    },
                    {
                        "name": "IF numeric",
                        "type": "IfCondition",
                        "dependsOn": [
                            {
                                "activity": "spi_NewRowsToWmkInt",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "expression": {
                                "value": "@equals(pipeline().parameters.FwkItem['WmkDataType'], 'numeric')\n",
                                "type": "Expression"
                            },
                            "ifTrueActivities": [
                                {
                                    "name": "LookupNewWmkSrc",
                                    "description": "Executes a query to the ‘FwkWatermark’ table  to get the ‘NewWatermarkValue’ column value.",
                                    "type": "Lookup",
                                    "dependsOn": [],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "source": {
                                            "type": "OracleSource",
                                            "oracleReaderQuery": {
                                                "value": "SELECT MAX(@{pipeline().parameters.FwkItem['WmkColumnName']}) as NewWatermarkValue from @{pipeline().parameters.FwkItem['SchemaName']}.@{pipeline().parameters.FwkItem['EntityName']}",
                                                "type": "Expression"
                                            },
                                            "partitionOption": "None",
                                            "convertDecimalToInteger": false,
                                            "queryTimeout": "02:00:00"
                                        },
                                        "dataset": {
                                            "referenceName": "DS_Oracle_Source",
                                            "type": "DatasetReference",
                                            "parameters": {
                                                "FwkItem": {
                                                    "value": "@pipeline().parameters.FwkItem",
                                                    "type": "Expression"
                                                }
                                            }
                                        },
                                        "firstRowOnly": true
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "name": "spi_IngtIfNumeric_failed",
                        "description": "Executes the SP spi_IngtLogInsert to insert record into IngtLog table with the execution module information.",
                        "type": "SqlServerStoredProcedure",
                        "dependsOn": [
                            {
                                "activity": "IF numeric",
                                "dependencyConditions": [
                                    "Failed"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "storedProcedureName": "[[dbo].[spi_IngtLogInsert]",
                            "storedProcedureParameters": {
                                "IngtOutputId": {
                                    "value": {
                                        "value": "@pipeline().parameters.FwkItem['IngtOutputId']",
                                        "type": "Expression"
                                    },
                                    "type": "Int32"
                                },
                                "EntRunId": {
                                    "value": {
                                        "value": "@pipeline().parameters.EntRunId",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                },
                                "ModuleRunId": {
                                    "value": {
                                        "value": "@pipeline().parameters.ModuleRunId",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                },
                                "PipelineStatus": {
                                    "value": "Failed",
                                    "type": "String"
                                },
                                "StartDate": {
                                    "value": {
                                        "value": "@formatdatetime(pipeline().TriggerTime)",
                                        "type": "Expression"
                                    },
                                    "type": "Datetime"
                                },
                                "RowsRead": {
                                    "value": null,
                                    "type": "Int64"
                                },
                                "RowsCopied": {
                                    "value": null,
                                    "type": "Int64"
                                },
                                "CopyDuration": {
                                    "value": null,
                                    "type": "Double"
                                },
                                "Throughput": {
                                    "value": null,
                                    "type": "Double"
                                },
                                "ErrorMessage": {
                                    "value": null,
                                    "type": "String"
                                },
                                "FileName": {
                                    "value": null,
                                    "type": "String"
                                }
                            }
                        },
                        "linkedServiceName": {
                            "referenceName": "LS_configurationDB",
                            "type": "LinkedServiceReference"
                        }
                    },
                    {
                        "name": "spi_IngtLogInsert",
                        "description": "Executes the SP spi_IngtLogInsert to insert record into IngtLog table with the execution module information.",
                        "type": "SqlServerStoredProcedure",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "storedProcedureName": "[[dbo].[spi_IngtLogInsert]",
                            "storedProcedureParameters": {
                                "IngtOutputId": {
                                    "value": {
                                        "value": "@pipeline().parameters.FwkItem['IngtOutputId']",
                                        "type": "Expression"
                                    },
                                    "type": "Int32"
                                },
                                "EntRunId": {
                                    "value": {
                                        "value": "@pipeline().parameters.EntRunId",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                },
                                "ModuleRunId": {
                                    "value": {
                                        "value": "@pipeline().parameters.ModuleRunId",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                },
                                "PipelineStatus": {
                                    "value": {
                                        "value": "InProgress",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                },
                                "StartDate": {
                                    "value": {
                                        "value": "@formatdatetime(pipeline().TriggerTime)",
                                        "type": "Expression"
                                    },
                                    "type": "Datetime"
                                },
                                "RowsRead": {
                                    "value": null,
                                    "type": "Int64"
                                },
                                "RowsCopied": {
                                    "value": null,
                                    "type": "Int64"
                                },
                                "CopyDuration": {
                                    "value": null,
                                    "type": "Double"
                                },
                                "Throughput": {
                                    "value": null,
                                    "type": "Double"
                                },
                                "ErrorMessage": {
                                    "value": null,
                                    "type": "String"
                                },
                                "FileName": {
                                    "value": null,
                                    "type": "String"
                                }
                            }
                        },
                        "linkedServiceName": {
                            "referenceName": "LS_configurationDB",
                            "type": "LinkedServiceReference"
                        }
                    },
                    {
                        "name": "spu_IngtLogUpdate_succeeded",
                        "description": "Executes the SP spu_IngtLogUpdate to update record into IngtLog table with the execution module information.",
                        "type": "SqlServerStoredProcedure",
                        "dependsOn": [
                            {
                                "activity": "spu_UpdateWmk",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "storedProcedureName": "[[dbo].[spu_IngtLogUpdate]",
                            "storedProcedureParameters": {
                                "IngtOutputId": {
                                    "value": {
                                        "value": "@pipeline().parameters.FwkItem['IngtOutputId']",
                                        "type": "Expression"
                                    },
                                    "type": "Int32"
                                },
                                "EntRunId": {
                                    "value": {
                                        "value": "@pipeline().parameters.EntRunId",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                },
                                "ModuleRunId": {
                                    "value": {
                                        "value": "@pipeline().parameters.ModuleRunId",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                },
                                "PipelineStatus": {
                                    "value": {
                                        "value": "Succeeded",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                },
                                "RowsRead": {
                                    "value": {
                                        "value": "@if(\n    contains(activity('Delta Copy into Landing').output, 'rowsRead'),\n    activity('Delta Copy into Landing').output.rowsRead,\n    null\n)",
                                        "type": "Expression"
                                    },
                                    "type": "Int64"
                                },
                                "RowsCopied": {
                                    "value": {
                                        "value": "@if(\n    contains(activity('Delta Copy into Landing').output, 'rowsCopied'),\n    activity('Delta Copy into Landing').output.rowsCopied,\n    null\n)",
                                        "type": "Expression"
                                    },
                                    "type": "Int64"
                                },
                                "CopyDuration": {
                                    "value": {
                                        "value": "@if(\n    contains(activity('Delta Copy into Landing').output, 'copyDuration'),\n    activity('Delta Copy into Landing').output.copyDuration,\n    null\n)",
                                        "type": "Expression"
                                    },
                                    "type": "Double"
                                },
                                "Throughput": {
                                    "value": {
                                        "value": "@if(\n    contains(activity('Delta Copy into Landing').output, 'throughput'),\n    activity('Delta Copy into Landing').output.throughput,\n    null\n)",
                                        "type": "Expression"
                                    },
                                    "type": "Double"
                                },
                                "ErrorMessage": {
                                    "value": null,
                                    "type": "String"
                                },
                                "RowsSkipped": {
                                    "value": null,
                                    "type": "Int64"
                                },
                                "LogFilePath": {
                                    "value": null,
                                    "type": "String"
                                },
                                "FileName": {
                                    "value": null,
                                    "type": "String"
                                }
                            }
                        },
                        "linkedServiceName": {
                            "referenceName": "LS_configurationDB",
                            "type": "LinkedServiceReference"
                        }
                    },
                    {
                        "name": "spu_IngtLogUpdate_failed",
                        "description": "Executes the SP spu_IngtLogUpdate to update record into IngtLog table with the execution module information.",
                        "type": "SqlServerStoredProcedure",
                        "dependsOn": [
                            {
                                "activity": "Delta Copy into Landing",
                                "dependencyConditions": [
                                    "Failed"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "storedProcedureName": "[[dbo].[spu_IngtLogUpdate]",
                            "storedProcedureParameters": {
                                "IngtOutputId": {
                                    "value": {
                                        "value": "@pipeline().parameters.FwkItem['IngtOutputId']",
                                        "type": "Expression"
                                    },
                                    "type": "Int32"
                                },
                                "EntRunId": {
                                    "value": {
                                        "value": "@pipeline().parameters.EntRunId",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                },
                                "ModuleRunId": {
                                    "value": {
                                        "value": "@pipeline().parameters.ModuleRunId",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                },
                                "PipelineStatus": {
                                    "value": {
                                        "value": "Failed",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                },
                                "RowsRead": {
                                    "value": null,
                                    "type": "Int64"
                                },
                                "RowsCopied": {
                                    "value": null,
                                    "type": "Int64"
                                },
                                "CopyDuration": {
                                    "value": null,
                                    "type": "Double"
                                },
                                "Throughput": {
                                    "value": null,
                                    "type": "Double"
                                },
                                "ErrorMessage": {
                                    "value": {
                                        "value": "@if(\n    and(\n        contains(activity('Delta Copy into Landing').output, 'errors'),\n        greater(length(activity('Delta Copy into Landing').output.errors), 0)\n    ),\n    activity('Delta Copy into Landing').output.errors[0].Message,\n    null\n)",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                },
                                "RowsSkipped": {
                                    "value": null,
                                    "type": "Int64"
                                },
                                "LogFilePath": {
                                    "value": null,
                                    "type": "String"
                                },
                                "FileName": {
                                    "value": null,
                                    "type": "String"
                                }
                            }
                        },
                        "linkedServiceName": {
                            "referenceName": "LS_configurationDB",
                            "type": "LinkedServiceReference"
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {}
                },
                "parameters": {
                    "FwkItem": {
                        "type": "array"
                    },
                    "PL_01TriggerTime": {
                        "type": "string"
                    },
                    "EntRunId": {
                        "type": "string"
                    },
                    "ModuleRunId": {
                        "type": "string"
                    }
                },
                "folder": {
                    "name": "01 Ingestion Module/04 Oracle"
                },
                "annotations": [],
                "lastPublishTime": "2023-07-06T08:29:14Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/datasets/DS_Oracle_Source')]",
                "[concat(variables('factoryId'), '/datasets/DS_ADLS_PRQ_Sink')]",
                "[concat(variables('factoryId'), '/linkedServices/LS_configurationDB')]",
                "[concat(variables('factoryId'), '/datasets/DS_SQL_Configuration')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/PL_ING_04_OracleLoad')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "If is FullLoad",
                        "description": "Evaluates the ‘LoadType’ and go in case it matches.",
                        "type": "IfCondition",
                        "dependsOn": [],
                        "userProperties": [],
                        "typeProperties": {
                            "expression": {
                                "value": "@equals(pipeline().parameters.FwkItem['TypeLoad'], 'Full')",
                                "type": "Expression"
                            },
                            "ifFalseActivities": [
                                {
                                    "name": "Execute PL_ING_04_02_OracleDeltaLoad",
                                    "type": "ExecutePipeline",
                                    "dependsOn": [],
                                    "policy": {
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "pipeline": {
                                            "referenceName": "PL_ING_04_02_OracleDeltaLoad",
                                            "type": "PipelineReference"
                                        },
                                        "waitOnCompletion": true,
                                        "parameters": {
                                            "FwkItem": {
                                                "value": "@pipeline().parameters.FwkItem",
                                                "type": "Expression"
                                            },
                                            "PL_01TriggerTime": {
                                                "value": "@pipeline().parameters.PL_01TriggerTime",
                                                "type": "Expression"
                                            },
                                            "EntRunId": {
                                                "value": "@pipeline().parameters.EntRunId",
                                                "type": "Expression"
                                            },
                                            "ModuleRunId": {
                                                "value": "@pipeline().parameters.ModuleRunId",
                                                "type": "Expression"
                                            }
                                        }
                                    }
                                }
                            ],
                            "ifTrueActivities": [
                                {
                                    "name": "Execute PL_ING_04_01_OracleFullLoad",
                                    "description": "This pipeline is used to execute all the inner activities that are included in the ingestion module.",
                                    "type": "ExecutePipeline",
                                    "dependsOn": [],
                                    "policy": {
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "pipeline": {
                                            "referenceName": "PL_ING_04_01_OracleFullLoad",
                                            "type": "PipelineReference"
                                        },
                                        "waitOnCompletion": true,
                                        "parameters": {
                                            "FwkItem": {
                                                "value": "@pipeline().parameters.FwkItem",
                                                "type": "Expression"
                                            },
                                            "PL_01TriggerTime": {
                                                "value": "@pipeline().parameters.PL_01TriggerTime",
                                                "type": "Expression"
                                            },
                                            "EntRunId": {
                                                "value": "@pipeline().parameters.EntRunId",
                                                "type": "Expression"
                                            },
                                            "ModuleRunId": {
                                                "value": "@pipeline().parameters.ModuleRunId",
                                                "type": "Expression"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {}
                },
                "parameters": {
                    "FwkItem": {
                        "type": "array"
                    },
                    "PL_01TriggerTime": {
                        "type": "string"
                    },
                    "EntRunId": {
                        "type": "string"
                    },
                    "ModuleRunId": {
                        "type": "string"
                    }
                },
                "folder": {
                    "name": "01 Ingestion Module/04 Oracle"
                },
                "annotations": [],
                "lastPublishTime": "2023-07-06T08:29:16Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/pipelines/PL_ING_04_02_OracleDeltaLoad')]",
                "[concat(variables('factoryId'), '/pipelines/PL_ING_04_01_OracleFullLoad')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/PL_ING_05_01_FileShareCSVCheck')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Select CSV files by Wildcard",
                        "type": "ExecutePipeline",
                        "dependsOn": [],
                        "policy": {
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "PL_ING_05_FileShareGetFiles",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {
                                "FwkItem": {
                                    "value": "@pipeline().parameters.FwkItem",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    {
                        "name": "IfMissingFile",
                        "type": "IfCondition",
                        "dependsOn": [
                            {
                                "activity": "Select CSV files by Wildcard",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "expression": {
                                "value": "@equals(length(activity('Select CSV files by Wildcard').output.pipelineReturnValue['outputFileName']), 0)\n\n",
                                "type": "Expression"
                            },
                            "ifFalseActivities": [
                                {
                                    "name": "Execute FileShareIngestAllCSVFiles",
                                    "type": "ExecutePipeline",
                                    "dependsOn": [],
                                    "policy": {
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "pipeline": {
                                            "referenceName": "PL_ING_05_01_FileShareIngestAllCSVFiles",
                                            "type": "PipelineReference"
                                        },
                                        "waitOnCompletion": true,
                                        "parameters": {
                                            "FileNames": {
                                                "value": "@activity('Select CSV files by Wildcard').output.pipelineReturnValue['outputFileName']",
                                                "type": "Expression"
                                            },
                                            "FwkItem": {
                                                "value": "@pipeline().parameters.FwkItem",
                                                "type": "Expression"
                                            },
                                            "EntRunId": {
                                                "value": "@pipeline().parameters.EntRunId",
                                                "type": "Expression"
                                            },
                                            "ModuleRunId": {
                                                "value": "@pipeline().parameters.ModuleRunId",
                                                "type": "Expression"
                                            },
                                            "FilePath": {
                                                "value": "@activity('Select CSV files by Wildcard').output.pipelineReturnValue['outputFilePath']",
                                                "type": "Expression"
                                            },
                                            "PL_01TriggerTime": {
                                                "value": "@pipeline().parameters.PL_01TriggerTime",
                                                "type": "Expression"
                                            }
                                        }
                                    }
                                }
                            ],
                            "ifTrueActivities": [
                                {
                                    "name": "spi_IngtLogInsert",
                                    "description": "Executes the SP spi_IngtLogInsert to insert record into IngtLog table with the execution module information.",
                                    "type": "SqlServerStoredProcedure",
                                    "dependsOn": [],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "storedProcedureName": "[[dbo].[spi_IngtLogInsert]",
                                        "storedProcedureParameters": {
                                            "IngtOutputId": {
                                                "value": {
                                                    "value": "@pipeline().parameters.FwkItem['IngtOutputId']",
                                                    "type": "Expression"
                                                },
                                                "type": "Int32"
                                            },
                                            "EntRunId": {
                                                "value": {
                                                    "value": "@pipeline().parameters.EntRunId",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            },
                                            "ModuleRunId": {
                                                "value": {
                                                    "value": "@pipeline().parameters.ModuleRunId",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            },
                                            "PipelineStatus": {
                                                "value": {
                                                    "value": "Skipped - Missing source file",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            },
                                            "StartDate": {
                                                "value": {
                                                    "value": "@formatdatetime(pipeline().TriggerTime)",
                                                    "type": "Expression"
                                                },
                                                "type": "Datetime"
                                            },
                                            "RowsRead": {
                                                "value": null,
                                                "type": "Int64"
                                            },
                                            "RowsCopied": {
                                                "value": null,
                                                "type": "Int64"
                                            },
                                            "CopyDuration": {
                                                "value": null,
                                                "type": "Double"
                                            },
                                            "Throughput": {
                                                "value": null,
                                                "type": "Double"
                                            },
                                            "ErrorMessage": {
                                                "value": null,
                                                "type": "String"
                                            },
                                            "FileName": {
                                                "value": null,
                                                "type": "String"
                                            }
                                        }
                                    },
                                    "linkedServiceName": {
                                        "referenceName": "LS_configurationDB",
                                        "type": "LinkedServiceReference"
                                    }
                                }
                            ]
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {}
                },
                "parameters": {
                    "FwkItem": {
                        "type": "array"
                    },
                    "PL_01TriggerTime": {
                        "type": "string"
                    },
                    "EntRunId": {
                        "type": "string"
                    },
                    "ModuleRunId": {
                        "type": "string"
                    }
                },
                "folder": {
                    "name": "01 Ingestion Module/05 FileShare"
                },
                "annotations": [],
                "lastPublishTime": "2023-07-06T08:29:16Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/pipelines/PL_ING_05_FileShareGetFiles')]",
                "[concat(variables('factoryId'), '/pipelines/PL_ING_05_01_FileShareIngestAllCSVFiles')]",
                "[concat(variables('factoryId'), '/linkedServices/LS_configurationDB')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/PL_ING_05_01_FileShareCSVLoad')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "IF archivePath Defined",
                        "description": "if the archive path is defined then copy source file with timestamp prefix to archive folder",
                        "type": "IfCondition",
                        "dependsOn": [
                            {
                                "activity": "If Logging Required",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "expression": {
                                "value": "@empty(pipeline().parameters.FwkItem['ArchivePath'])",
                                "type": "Expression"
                            },
                            "ifFalseActivities": [
                                {
                                    "name": "Move to archivePath",
                                    "type": "Copy",
                                    "dependsOn": [],
                                    "policy": {
                                        "timeout": "0.12:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "source": {
                                            "type": "BinarySource",
                                            "storeSettings": {
                                                "type": "FileServerReadSettings",
                                                "recursive": true,
                                                "deleteFilesAfterCompletion": true
                                            },
                                            "formatSettings": {
                                                "type": "BinaryReadSettings"
                                            }
                                        },
                                        "sink": {
                                            "type": "BinarySink",
                                            "storeSettings": {
                                                "type": "FileServerWriteSettings"
                                            }
                                        },
                                        "enableStaging": false
                                    },
                                    "inputs": [
                                        {
                                            "referenceName": "DS_FileShare_BIN_File",
                                            "type": "DatasetReference",
                                            "parameters": {
                                                "FwkItem": {
                                                    "value": "@pipeline().parameters.FwkItem",
                                                    "type": "Expression"
                                                },
                                                "ds_inputFileName": {
                                                    "value": "@pipeline().parameters.FileName",
                                                    "type": "Expression"
                                                },
                                                "ds_inputFilePath": {
                                                    "value": "@pipeline().parameters.FilePath",
                                                    "type": "Expression"
                                                }
                                            }
                                        }
                                    ],
                                    "outputs": [
                                        {
                                            "referenceName": "DS_FileShare_BIN_File",
                                            "type": "DatasetReference",
                                            "parameters": {
                                                "FwkItem": {
                                                    "value": "@pipeline().parameters.FwkItem",
                                                    "type": "Expression"
                                                },
                                                "ds_inputFileName": {
                                                    "value": "@concat(\n\tformatDateTime(pipeline().parameters.PL_01TriggerTime,'yyyy'),\n\tformatDateTime(pipeline().parameters.PL_01TriggerTime,'MM'),\n\tformatDateTime(pipeline().parameters.PL_01TriggerTime,'dd'),\n\tformatDateTime(pipeline().parameters.PL_01TriggerTime,'HH'),\n\tformatDateTime(pipeline().parameters.PL_01TriggerTime,'mm'),\n\t'_',\npipeline().parameters.FileName\n)",
                                                    "type": "Expression"
                                                },
                                                "ds_inputFilePath": {
                                                    "value": "@pipeline().parameters.FwkItem['ArchivePath']",
                                                    "type": "Expression"
                                                }
                                            }
                                        }
                                    ]
                                }
                            ]
                        }
                    },
                    {
                        "name": "If Logging Required",
                        "type": "IfCondition",
                        "dependsOn": [],
                        "userProperties": [],
                        "typeProperties": {
                            "expression": {
                                "value": "@if(and(contains(json(pipeline().parameters.FwkItem['Params']), 'logSettingsInstanceURL'), contains(json(pipeline().parameters.FwkItem['Params']), 'logSettingsPath')), true, false)",
                                "type": "Expression"
                            },
                            "ifFalseActivities": [
                                {
                                    "name": "FullLoadCopyWithoutLogging",
                                    "description": "Copy a table from a database to the configurated Sink dynamically taking by input FwkItem, SrcPath.",
                                    "type": "Copy",
                                    "dependsOn": [],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "source": {
                                            "type": "DelimitedTextSource",
                                            "additionalColumns": {
                                                "type": "Expression",
                                                "value": "@if(\n    contains(json(pipeline().parameters.FwkItem['Params']), 'additionalColumns'),\n    json(pipeline().parameters.FwkItem['Params']).additionalColumns,\n    json('[]')\n)"
                                            },
                                            "storeSettings": {
                                                "type": "FileServerReadSettings",
                                                "recursive": true,
                                                "enablePartitionDiscovery": false
                                            },
                                            "formatSettings": {
                                                "type": "DelimitedTextReadSettings",
                                                "skipLineCount": {
                                                    "value": "@json(pipeline().parameters.FwkItem['Params']).skipLineCount",
                                                    "type": "Expression"
                                                }
                                            }
                                        },
                                        "sink": {
                                            "type": "ParquetSink",
                                            "storeSettings": {
                                                "type": "AzureBlobFSWriteSettings"
                                            },
                                            "formatSettings": {
                                                "type": "ParquetWriteSettings"
                                            }
                                        },
                                        "enableStaging": false,
                                        "enableSkipIncompatibleRow": {
                                            "value": "@if(contains(json(pipeline().parameters.FwkItem['Params']), 'enableSkipIncompatibleRow'), json(pipeline().parameters.FwkItem['Params']).enableSkipIncompatibleRow, false)",
                                            "type": "Expression"
                                        },
                                        "validateDataConsistency": true,
                                        "translator": {
                                            "value": "@if(\n    contains(json(pipeline().parameters.FwkItem['Params']), 'mapping'),\n    json(pipeline().parameters.FwkItem['Params']).mapping,\n    '\"mapping\":{}'\n)",
                                            "type": "Expression"
                                        }
                                    },
                                    "inputs": [
                                        {
                                            "referenceName": "DS_FileShare_CSV_Source",
                                            "type": "DatasetReference",
                                            "parameters": {
                                                "FwkItem": {
                                                    "value": "@pipeline().parameters.FwkItem",
                                                    "type": "Expression"
                                                },
                                                "ds_inputFileName": {
                                                    "value": "@pipeline().parameters.FileName",
                                                    "type": "Expression"
                                                },
                                                "ds_inputFilePath": {
                                                    "value": "@pipeline().parameters.FilePath",
                                                    "type": "Expression"
                                                }
                                            }
                                        }
                                    ],
                                    "outputs": [
                                        {
                                            "referenceName": "DS_ADLS_PRQ_Sink",
                                            "type": "DatasetReference",
                                            "parameters": {
                                                "InstanceURL": {
                                                    "value": "@pipeline().parameters.FwkItem['SinkInstanceURL']",
                                                    "type": "Expression"
                                                },
                                                "FullPath": {
                                                    "value": "@concat(pipeline().parameters.FwkItem['SinkPath'], \n\t'/',\n\tformatDateTime(pipeline().parameters.PL_01TriggerTime,'yyyy'),\n\tformatDateTime(pipeline().parameters.PL_01TriggerTime,'MM'),\n\tformatDateTime(pipeline().parameters.PL_01TriggerTime,'dd'),\n\tformatDateTime(pipeline().parameters.PL_01TriggerTime,'HH'),\n\tformatDateTime(pipeline().parameters.PL_01TriggerTime,'mm'),\n\t'_',\n\tutcnow(),\n\t'_',\n\tpipeline().parameters.FwkItem['EntityName'],\n\t'.snappy.parquet'\n)",
                                                    "type": "Expression"
                                                }
                                            }
                                        }
                                    ]
                                },
                                {
                                    "name": "spu_IngtLogUpdate_succeeded2",
                                    "description": "Executes the SP spu_IngtLogUpdate to update record into IngtLog table with the execution module information.",
                                    "type": "SqlServerStoredProcedure",
                                    "dependsOn": [
                                        {
                                            "activity": "FullLoadCopyWithoutLogging",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "storedProcedureName": "[[dbo].[spu_IngtLogUpdate]",
                                        "storedProcedureParameters": {
                                            "IngtOutputId": {
                                                "value": {
                                                    "value": "@pipeline().parameters.FwkItem['IngtOutputId']",
                                                    "type": "Expression"
                                                },
                                                "type": "Int32"
                                            },
                                            "EntRunId": {
                                                "value": {
                                                    "value": "@pipeline().parameters.EntRunId",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            },
                                            "ModuleRunId": {
                                                "value": {
                                                    "value": "@pipeline().parameters.ModuleRunId",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            },
                                            "PipelineStatus": {
                                                "value": {
                                                    "value": "Succeeded",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            },
                                            "RowsRead": {
                                                "value": {
                                                    "value": "@if(\n    contains(activity('FullLoadCopyWithoutLogging').output, 'rowsRead'),\n    activity('FullLoadCopyWithoutLogging').output.rowsRead,\n    null\n)",
                                                    "type": "Expression"
                                                },
                                                "type": "Int64"
                                            },
                                            "RowsCopied": {
                                                "value": {
                                                    "value": "@if(\n    contains(activity('FullLoadCopyWithoutLogging').output, 'rowsCopied'),\n    activity('FullLoadCopyWithoutLogging').output.rowsCopied,\n    null\n)",
                                                    "type": "Expression"
                                                },
                                                "type": "Int64"
                                            },
                                            "CopyDuration": {
                                                "value": {
                                                    "value": "@if(\n    contains(activity('FullLoadCopyWithoutLogging').output, 'copyDuration'),\n    activity('FullLoadCopyWithoutLogging').output.copyDuration,\n    null\n)",
                                                    "type": "Expression"
                                                },
                                                "type": "Double"
                                            },
                                            "Throughput": {
                                                "value": {
                                                    "value": "@if(\n    contains(activity('FullLoadCopyWithoutLogging').output, 'throughput'),\n    activity('FullLoadCopyWithoutLogging').output.throughput,\n    null\n)",
                                                    "type": "Expression"
                                                },
                                                "type": "Double"
                                            },
                                            "ErrorMessage": {
                                                "value": null,
                                                "type": "String"
                                            },
                                            "RowsSkipped": {
                                                "value": {
                                                    "value": "@if(\n    contains(activity('FullLoadCopyWithoutLogging').output, 'rowsSkipped'),\n    activity('FullLoadCopyWithoutLogging').output.rowsSkipped,\n    null\n)",
                                                    "type": "Expression"
                                                },
                                                "type": "Int64"
                                            },
                                            "LogFilePath": {
                                                "value": null,
                                                "type": "String"
                                            },
                                            "FileName": {
                                                "value": {
                                                    "value": "@if(contains(pipeline().parameters.FwkItem['Path'], '*'), pipeline().parameters.FileName, null)",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            }
                                        }
                                    },
                                    "linkedServiceName": {
                                        "referenceName": "LS_configurationDB",
                                        "type": "LinkedServiceReference"
                                    }
                                },
                                {
                                    "name": "spu_IngtLogUpdate_failed2",
                                    "description": "Executes the SP spu_IngtLogUpdate to update record into IngtLog table with the execution module information.",
                                    "type": "SqlServerStoredProcedure",
                                    "dependsOn": [
                                        {
                                            "activity": "FullLoadCopyWithoutLogging",
                                            "dependencyConditions": [
                                                "Failed"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "storedProcedureName": "[[dbo].[spu_IngtLogUpdate]",
                                        "storedProcedureParameters": {
                                            "IngtOutputId": {
                                                "value": {
                                                    "value": "@pipeline().parameters.FwkItem['IngtOutputId']",
                                                    "type": "Expression"
                                                },
                                                "type": "Int32"
                                            },
                                            "EntRunId": {
                                                "value": {
                                                    "value": "@pipeline().parameters.EntRunId",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            },
                                            "ModuleRunId": {
                                                "value": {
                                                    "value": "@pipeline().parameters.ModuleRunId",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            },
                                            "PipelineStatus": {
                                                "value": {
                                                    "value": "Failed",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            },
                                            "RowsRead": {
                                                "value": null,
                                                "type": "Int64"
                                            },
                                            "RowsCopied": {
                                                "value": null,
                                                "type": "Int64"
                                            },
                                            "CopyDuration": {
                                                "value": null,
                                                "type": "Double"
                                            },
                                            "Throughput": {
                                                "value": null,
                                                "type": "Double"
                                            },
                                            "ErrorMessage": {
                                                "value": {
                                                    "value": "@if(\n    and(\n        contains(activity('FullLoadCopyWithoutLogging').output, 'errors'),\n        greater(length(activity('FullLoadCopyWithoutLogging').output.errors), 0)\n    ),\n    activity('FullLoadCopyWithoutLogging').output.errors[0].Message,\n    null\n)",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            },
                                            "RowsSkipped": {
                                                "value": {
                                                    "value": "@if(\n    contains(activity('FullLoadCopyWithoutLogging').output, 'rowsSkipped'),\n    activity('FullLoadCopyWithoutLogging').output.rowsSkipped,\n    null\n)",
                                                    "type": "Expression"
                                                },
                                                "type": "Int64"
                                            },
                                            "LogFilePath": {
                                                "value": null,
                                                "type": "String"
                                            }
                                        }
                                    },
                                    "linkedServiceName": {
                                        "referenceName": "LS_configurationDB",
                                        "type": "LinkedServiceReference"
                                    }
                                }
                            ],
                            "ifTrueActivities": [
                                {
                                    "name": "FullLoadCopyWithLogging",
                                    "description": "Copy a table from a database to the configurated Sink dynamically taking by input FwkItem, SrcPath.",
                                    "type": "Copy",
                                    "dependsOn": [],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "source": {
                                            "type": "DelimitedTextSource",
                                            "additionalColumns": {
                                                "type": "Expression",
                                                "value": "@if(\n    contains(json(pipeline().parameters.FwkItem['Params']), 'additionalColumns'),\n    json(pipeline().parameters.FwkItem['Params']).additionalColumns,\n    json('[]')\n)"
                                            },
                                            "storeSettings": {
                                                "type": "FileServerReadSettings",
                                                "recursive": true,
                                                "enablePartitionDiscovery": false
                                            },
                                            "formatSettings": {
                                                "type": "DelimitedTextReadSettings",
                                                "skipLineCount": {
                                                    "value": "@json(pipeline().parameters.FwkItem['Params']).skipLineCount",
                                                    "type": "Expression"
                                                }
                                            }
                                        },
                                        "sink": {
                                            "type": "ParquetSink",
                                            "storeSettings": {
                                                "type": "AzureBlobFSWriteSettings"
                                            },
                                            "formatSettings": {
                                                "type": "ParquetWriteSettings"
                                            }
                                        },
                                        "enableStaging": false,
                                        "enableSkipIncompatibleRow": {
                                            "value": "@if(contains(json(pipeline().parameters.FwkItem['Params']), 'enableSkipIncompatibleRow'), json(pipeline().parameters.FwkItem['Params']).enableSkipIncompatibleRow, false)",
                                            "type": "Expression"
                                        },
                                        "validateDataConsistency": true,
                                        "logSettings": {
                                            "enableCopyActivityLog": true,
                                            "copyActivityLogSettings": {
                                                "logLevel": "Warning",
                                                "enableReliableLogging": false
                                            },
                                            "logLocationSettings": {
                                                "linkedServiceName": {
                                                    "referenceName": "LS_adls",
                                                    "type": "LinkedServiceReference",
                                                    "parameters": {
                                                        "InstanceURL": {
                                                            "value": "@json(pipeline().parameters.FwkItem['Params']).logSettingsInstanceURL",
                                                            "type": "Expression"
                                                        }
                                                    }
                                                },
                                                "path": {
                                                    "value": "@json(pipeline().parameters.FwkItem['Params']).logSettingsPath",
                                                    "type": "Expression"
                                                }
                                            }
                                        },
                                        "translator": {
                                            "value": "@if(\n    contains(json(pipeline().parameters.FwkItem['Params']), 'mapping'),\n    json(pipeline().parameters.FwkItem['Params']).mapping,\n    '\"mapping\":{}'\n)",
                                            "type": "Expression"
                                        }
                                    },
                                    "inputs": [
                                        {
                                            "referenceName": "DS_FileShare_CSV_Source",
                                            "type": "DatasetReference",
                                            "parameters": {
                                                "FwkItem": {
                                                    "value": "@pipeline().parameters.FwkItem",
                                                    "type": "Expression"
                                                },
                                                "ds_inputFileName": {
                                                    "value": "@pipeline().parameters.FileName",
                                                    "type": "Expression"
                                                },
                                                "ds_inputFilePath": {
                                                    "value": "@pipeline().parameters.FilePath",
                                                    "type": "Expression"
                                                }
                                            }
                                        }
                                    ],
                                    "outputs": [
                                        {
                                            "referenceName": "DS_ADLS_PRQ_Sink",
                                            "type": "DatasetReference",
                                            "parameters": {
                                                "InstanceURL": {
                                                    "value": "@pipeline().parameters.FwkItem['SinkInstanceURL']",
                                                    "type": "Expression"
                                                },
                                                "FullPath": {
                                                    "value": "@concat(pipeline().parameters.FwkItem['SinkPath'], \n\t'/',\n\tformatDateTime(pipeline().parameters.PL_01TriggerTime,'yyyy'),\n\tformatDateTime(pipeline().parameters.PL_01TriggerTime,'MM'),\n\tformatDateTime(pipeline().parameters.PL_01TriggerTime,'dd'),\n\tformatDateTime(pipeline().parameters.PL_01TriggerTime,'HH'),\n\tformatDateTime(pipeline().parameters.PL_01TriggerTime,'mm'),\n\t'_',\n\tutcnow(),\n\t'_',\n\tpipeline().parameters.FwkItem['EntityName'],\n\t'.snappy.parquet'\n)",
                                                    "type": "Expression"
                                                }
                                            }
                                        }
                                    ]
                                },
                                {
                                    "name": "spu_IngtLogUpdate_succeeded",
                                    "description": "Executes the SP spu_IngtLogUpdate to update record into IngtLog table with the execution module information.",
                                    "type": "SqlServerStoredProcedure",
                                    "dependsOn": [
                                        {
                                            "activity": "FullLoadCopyWithLogging",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "storedProcedureName": "[[dbo].[spu_IngtLogUpdate]",
                                        "storedProcedureParameters": {
                                            "IngtOutputId": {
                                                "value": {
                                                    "value": "@pipeline().parameters.FwkItem['IngtOutputId']",
                                                    "type": "Expression"
                                                },
                                                "type": "Int32"
                                            },
                                            "EntRunId": {
                                                "value": {
                                                    "value": "@pipeline().parameters.EntRunId",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            },
                                            "ModuleRunId": {
                                                "value": {
                                                    "value": "@pipeline().parameters.ModuleRunId",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            },
                                            "PipelineStatus": {
                                                "value": {
                                                    "value": "Succeeded",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            },
                                            "RowsRead": {
                                                "value": {
                                                    "value": "@if(\n    contains(activity('FullLoadCopyWithLogging').output, 'rowsRead'),\n    activity('FullLoadCopyWithLogging').output.rowsRead,\n    null\n)",
                                                    "type": "Expression"
                                                },
                                                "type": "Int64"
                                            },
                                            "RowsCopied": {
                                                "value": {
                                                    "value": "@if(\n    contains(activity('FullLoadCopyWithLogging').output, 'rowsCopied'),\n    activity('FullLoadCopyWithLogging').output.rowsCopied,\n    null\n)",
                                                    "type": "Expression"
                                                },
                                                "type": "Int64"
                                            },
                                            "CopyDuration": {
                                                "value": {
                                                    "value": "@if(\n    contains(activity('FullLoadCopyWithLogging').output, 'copyDuration'),\n    activity('FullLoadCopyWithLogging').output.copyDuration,\n    null\n)",
                                                    "type": "Expression"
                                                },
                                                "type": "Double"
                                            },
                                            "Throughput": {
                                                "value": {
                                                    "value": "@if(\n    contains(activity('FullLoadCopyWithLogging').output, 'throughput'),\n    activity('FullLoadCopyWithLogging').output.throughput,\n    null\n)",
                                                    "type": "Expression"
                                                },
                                                "type": "Double"
                                            },
                                            "ErrorMessage": {
                                                "value": null,
                                                "type": "String"
                                            },
                                            "RowsSkipped": {
                                                "value": {
                                                    "value": "@if(\n    contains(activity('FullLoadCopyWithLogging').output, 'rowsSkipped'),\n    activity('FullLoadCopyWithLogging').output.rowsSkipped,\n    null\n)",
                                                    "type": "Expression"
                                                },
                                                "type": "Int64"
                                            },
                                            "LogFilePath": {
                                                "value": {
                                                    "value": "@if(\n    contains(activity('FullLoadCopyWithLogging').output, 'logFilePath'),\n    activity('FullLoadCopyWithLogging').output.logFilePath,\n    null\n)",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            },
                                            "FileName": {
                                                "value": {
                                                    "value": "@if(contains(pipeline().parameters.FwkItem['Path'], '*'), pipeline().parameters.FileName, null)",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            }
                                        }
                                    },
                                    "linkedServiceName": {
                                        "referenceName": "LS_configurationDB",
                                        "type": "LinkedServiceReference"
                                    }
                                },
                                {
                                    "name": "spu_IngtLogUpdate_failed",
                                    "description": "Executes the SP spu_IngtLogUpdate to update record into IngtLog table with the execution module information.",
                                    "type": "SqlServerStoredProcedure",
                                    "dependsOn": [
                                        {
                                            "activity": "FullLoadCopyWithLogging",
                                            "dependencyConditions": [
                                                "Failed"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "storedProcedureName": "[[dbo].[spu_IngtLogUpdate]",
                                        "storedProcedureParameters": {
                                            "IngtOutputId": {
                                                "value": {
                                                    "value": "@pipeline().parameters.FwkItem['IngtOutputId']",
                                                    "type": "Expression"
                                                },
                                                "type": "Int32"
                                            },
                                            "EntRunId": {
                                                "value": {
                                                    "value": "@pipeline().parameters.EntRunId",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            },
                                            "ModuleRunId": {
                                                "value": {
                                                    "value": "@pipeline().parameters.ModuleRunId",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            },
                                            "PipelineStatus": {
                                                "value": {
                                                    "value": "Failed",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            },
                                            "RowsRead": {
                                                "value": null,
                                                "type": "Int64"
                                            },
                                            "RowsCopied": {
                                                "value": null,
                                                "type": "Int64"
                                            },
                                            "CopyDuration": {
                                                "value": null,
                                                "type": "Double"
                                            },
                                            "Throughput": {
                                                "value": null,
                                                "type": "Double"
                                            },
                                            "ErrorMessage": {
                                                "value": {
                                                    "value": "@if(\n    and(\n        contains(activity('FullLoadCopyWithLogging').output, 'errors'),\n        greater(length(activity('FullLoadCopyWithLogging').output.errors), 0)\n    ),\n    activity('FullLoadCopyWithLogging').output.errors[0].Message,\n    null\n)",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            },
                                            "RowsSkipped": {
                                                "value": {
                                                    "value": "@if(\n    contains(activity('FullLoadCopyWithLogging').output, 'rowsSkipped'),\n    activity('FullLoadCopyWithLogging').output.rowsSkipped,\n    null\n)",
                                                    "type": "Expression"
                                                },
                                                "type": "Int64"
                                            },
                                            "LogFilePath": {
                                                "value": {
                                                    "value": "@if(\n    contains(activity('FullLoadCopyWithLogging').output, 'logFilePath'),\n    activity('FullLoadCopyWithLogging').output.logFilePath,\n    null\n)",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            }
                                        }
                                    },
                                    "linkedServiceName": {
                                        "referenceName": "LS_configurationDB",
                                        "type": "LinkedServiceReference"
                                    }
                                }
                            ]
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {}
                },
                "parameters": {
                    "FwkItem": {
                        "type": "array"
                    },
                    "EntRunId": {
                        "type": "string"
                    },
                    "ModuleRunId": {
                        "type": "string"
                    },
                    "FileName": {
                        "type": "string"
                    },
                    "FilePath": {
                        "type": "string"
                    },
                    "PL_01TriggerTime": {
                        "type": "string"
                    }
                },
                "folder": {
                    "name": "01 Ingestion Module/05 FileShare"
                },
                "annotations": []
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/datasets/DS_FileShare_BIN_File')]",
                "[concat(variables('factoryId'), '/datasets/DS_FileShare_CSV_Source')]",
                "[concat(variables('factoryId'), '/datasets/DS_ADLS_PRQ_Sink')]",
                "[concat(variables('factoryId'), '/linkedServices/LS_configurationDB')]",
                "[concat(variables('factoryId'), '/linkedServices/LS_adls')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/PL_ING_05_01_FileShareIngestAllCSVFiles')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "ForEach CSV file",
                        "type": "ForEach",
                        "dependsOn": [],
                        "userProperties": [],
                        "typeProperties": {
                            "items": {
                                "value": "@pipeline().parameters.FileNames",
                                "type": "Expression"
                            },
                            "isSequential": true,
                            "activities": [
                                {
                                    "name": "Execute SFTPCSVLoad",
                                    "type": "ExecutePipeline",
                                    "dependsOn": [
                                        {
                                            "activity": "spi_IngtLogInsert",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "pipeline": {
                                            "referenceName": "PL_ING_05_01_FileShareCSVLoad",
                                            "type": "PipelineReference"
                                        },
                                        "waitOnCompletion": true,
                                        "parameters": {
                                            "FwkItem": {
                                                "value": "@pipeline().parameters.FwkItem",
                                                "type": "Expression"
                                            },
                                            "EntRunId": {
                                                "value": "@pipeline().parameters.EntRunId",
                                                "type": "Expression"
                                            },
                                            "ModuleRunId": {
                                                "value": "@pipeline().parameters.ModuleRunId",
                                                "type": "Expression"
                                            },
                                            "FileName": {
                                                "value": "@item().name",
                                                "type": "Expression"
                                            },
                                            "FilePath": {
                                                "value": "@pipeline().parameters.FilePath",
                                                "type": "Expression"
                                            },
                                            "PL_01TriggerTime": {
                                                "value": "@pipeline().parameters.PL_01TriggerTime",
                                                "type": "Expression"
                                            }
                                        }
                                    }
                                },
                                {
                                    "name": "spi_IngtLogInsert",
                                    "description": "Executes the SP spi_IngtLogInsert to insert record into IngtLog table with the execution module information.",
                                    "type": "SqlServerStoredProcedure",
                                    "dependsOn": [],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "storedProcedureName": "[[dbo].[spi_IngtLogInsert]",
                                        "storedProcedureParameters": {
                                            "IngtOutputId": {
                                                "value": {
                                                    "value": "@pipeline().parameters.FwkItem['IngtOutputId']",
                                                    "type": "Expression"
                                                },
                                                "type": "Int32"
                                            },
                                            "EntRunId": {
                                                "value": {
                                                    "value": "@pipeline().parameters.EntRunId",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            },
                                            "ModuleRunId": {
                                                "value": {
                                                    "value": "@pipeline().parameters.ModuleRunId",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            },
                                            "PipelineStatus": {
                                                "value": {
                                                    "value": "InProgress",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            },
                                            "StartDate": {
                                                "value": {
                                                    "value": "@formatdatetime(pipeline().TriggerTime)",
                                                    "type": "Expression"
                                                },
                                                "type": "Datetime"
                                            },
                                            "RowsRead": {
                                                "value": null,
                                                "type": "Int64"
                                            },
                                            "RowsCopied": {
                                                "value": null,
                                                "type": "Int64"
                                            },
                                            "CopyDuration": {
                                                "value": null,
                                                "type": "Double"
                                            },
                                            "Throughput": {
                                                "value": null,
                                                "type": "Double"
                                            },
                                            "ErrorMessage": {
                                                "value": null,
                                                "type": "String"
                                            },
                                            "FileName": {
                                                "value": {
                                                    "value": "@if(contains(pipeline().parameters.FwkItem['Path'], '*'), item().name, null)",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            }
                                        }
                                    },
                                    "linkedServiceName": {
                                        "referenceName": "LS_configurationDB",
                                        "type": "LinkedServiceReference"
                                    }
                                }
                            ]
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {}
                },
                "parameters": {
                    "FileNames": {
                        "type": "array"
                    },
                    "FwkItem": {
                        "type": "array"
                    },
                    "EntRunId": {
                        "type": "string"
                    },
                    "ModuleRunId": {
                        "type": "string"
                    },
                    "FilePath": {
                        "type": "string"
                    },
                    "PL_01TriggerTime": {
                        "type": "string"
                    }
                },
                "folder": {
                    "name": "01 Ingestion Module/05 FileShare"
                },
                "annotations": []
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/pipelines/PL_ING_05_01_FileShareCSVLoad')]",
                "[concat(variables('factoryId'), '/linkedServices/LS_configurationDB')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/PL_ING_05_02_FileShareExcelCheck')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Select Excel files by Wildcard",
                        "type": "ExecutePipeline",
                        "dependsOn": [],
                        "policy": {
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "PL_ING_05_FileShareGetFiles",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {
                                "FwkItem": {
                                    "value": "@pipeline().parameters.FwkItem",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    {
                        "name": "IfMissingFile",
                        "type": "IfCondition",
                        "dependsOn": [
                            {
                                "activity": "Select Excel files by Wildcard",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "expression": {
                                "value": "@equals(length(activity('Select Excel files by Wildcard').output.pipelineReturnValue['outputFileName']), 0)\n",
                                "type": "Expression"
                            },
                            "ifFalseActivities": [
                                {
                                    "name": "Execute FileShareIngestAllExcelFiles",
                                    "type": "ExecutePipeline",
                                    "dependsOn": [],
                                    "policy": {
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "pipeline": {
                                            "referenceName": "PL_ING_05_02_FileShareIngestAllExcelFiles",
                                            "type": "PipelineReference"
                                        },
                                        "waitOnCompletion": true,
                                        "parameters": {
                                            "FileNames": {
                                                "value": "@activity('Select Excel files by Wildcard').output.pipelineReturnValue['ouputFileName']",
                                                "type": "Expression"
                                            },
                                            "FwkItem": {
                                                "value": "@pipeline().parameters.FwkItem",
                                                "type": "Expression"
                                            },
                                            "EntRunId": {
                                                "value": "@pipeline().parameters.EntRunId",
                                                "type": "Expression"
                                            },
                                            "ModuleRunId": {
                                                "value": "@pipeline().parameters.ModuleRunId",
                                                "type": "Expression"
                                            },
                                            "FilePath": {
                                                "value": "@activity('Select Excel files by Wildcard').output.pipelineReturnValue['outputFilePath']",
                                                "type": "Expression"
                                            },
                                            "PL_01TriggerTime": {
                                                "value": "@pipeline().parameters.PL_01TriggerTime",
                                                "type": "Expression"
                                            }
                                        }
                                    }
                                }
                            ],
                            "ifTrueActivities": [
                                {
                                    "name": "spi_IngtLogInsert",
                                    "description": "Executes the SP spi_IngtLogInsert to insert record into IngtLog table with the execution module information.",
                                    "type": "SqlServerStoredProcedure",
                                    "dependsOn": [],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "storedProcedureName": "[[dbo].[spi_IngtLogInsert]",
                                        "storedProcedureParameters": {
                                            "IngtOutputId": {
                                                "value": {
                                                    "value": "@pipeline().parameters.FwkItem['IngtOutputId']",
                                                    "type": "Expression"
                                                },
                                                "type": "Int32"
                                            },
                                            "EntRunId": {
                                                "value": {
                                                    "value": "@pipeline().parameters.EntRunId",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            },
                                            "ModuleRunId": {
                                                "value": {
                                                    "value": "@pipeline().parameters.ModuleRunId",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            },
                                            "PipelineStatus": {
                                                "value": {
                                                    "value": "Skipped - Missing source file",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            },
                                            "StartDate": {
                                                "value": {
                                                    "value": "@formatdatetime(pipeline().TriggerTime)",
                                                    "type": "Expression"
                                                },
                                                "type": "Datetime"
                                            },
                                            "RowsRead": {
                                                "value": null,
                                                "type": "Int64"
                                            },
                                            "RowsCopied": {
                                                "value": null,
                                                "type": "Int64"
                                            },
                                            "CopyDuration": {
                                                "value": null,
                                                "type": "Double"
                                            },
                                            "Throughput": {
                                                "value": null,
                                                "type": "Double"
                                            },
                                            "ErrorMessage": {
                                                "value": null,
                                                "type": "String"
                                            },
                                            "FileName": {
                                                "value": null,
                                                "type": "String"
                                            }
                                        }
                                    },
                                    "linkedServiceName": {
                                        "referenceName": "LS_configurationDB",
                                        "type": "LinkedServiceReference"
                                    }
                                }
                            ]
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {}
                },
                "parameters": {
                    "FwkItem": {
                        "type": "array"
                    },
                    "PL_01TriggerTime": {
                        "type": "string"
                    },
                    "EntRunId": {
                        "type": "string"
                    },
                    "ModuleRunId": {
                        "type": "string"
                    }
                },
                "folder": {
                    "name": "01 Ingestion Module/05 FileShare"
                },
                "annotations": [],
                "lastPublishTime": "2023-07-06T08:29:16Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/pipelines/PL_ING_05_FileShareGetFiles')]",
                "[concat(variables('factoryId'), '/pipelines/PL_ING_05_02_FileShareIngestAllExcelFiles')]",
                "[concat(variables('factoryId'), '/linkedServices/LS_configurationDB')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/PL_ING_05_02_FileShareExcelLoad')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "IF archivePath Defined",
                        "description": "if the archive path is defined then copy source file with timestamp prefix to archive folder",
                        "type": "IfCondition",
                        "dependsOn": [
                            {
                                "activity": "If Logging Required",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "expression": {
                                "value": "@empty(pipeline().parameters.FwkItem['ArchivePath'])",
                                "type": "Expression"
                            },
                            "ifFalseActivities": [
                                {
                                    "name": "Move to archivePath",
                                    "type": "Copy",
                                    "dependsOn": [],
                                    "policy": {
                                        "timeout": "0.12:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "source": {
                                            "type": "BinarySource",
                                            "storeSettings": {
                                                "type": "FileServerReadSettings",
                                                "recursive": true,
                                                "deleteFilesAfterCompletion": true
                                            },
                                            "formatSettings": {
                                                "type": "BinaryReadSettings"
                                            }
                                        },
                                        "sink": {
                                            "type": "BinarySink",
                                            "storeSettings": {
                                                "type": "FileServerWriteSettings"
                                            }
                                        },
                                        "enableStaging": false
                                    },
                                    "inputs": [
                                        {
                                            "referenceName": "DS_FileShare_BIN_File",
                                            "type": "DatasetReference",
                                            "parameters": {
                                                "FwkItem": {
                                                    "value": "@pipeline().parameters.FwkItem",
                                                    "type": "Expression"
                                                },
                                                "ds_inputFileName": {
                                                    "value": "@pipeline().parameters.FileName",
                                                    "type": "Expression"
                                                },
                                                "ds_inputFilePath": {
                                                    "value": "@pipeline().parameters.FilePath",
                                                    "type": "Expression"
                                                }
                                            }
                                        }
                                    ],
                                    "outputs": [
                                        {
                                            "referenceName": "DS_FileShare_BIN_File",
                                            "type": "DatasetReference",
                                            "parameters": {
                                                "FwkItem": {
                                                    "value": "@pipeline().parameters.FwkItem",
                                                    "type": "Expression"
                                                },
                                                "ds_inputFileName": {
                                                    "value": "@concat(\n\tformatDateTime(pipeline().parameters.PL_01TriggerTime,'yyyy'),\n\tformatDateTime(pipeline().parameters.PL_01TriggerTime,'MM'),\n\tformatDateTime(pipeline().parameters.PL_01TriggerTime,'dd'),\n\tformatDateTime(pipeline().parameters.PL_01TriggerTime,'HH'),\n\tformatDateTime(pipeline().parameters.PL_01TriggerTime,'mm'),\n\t'_',\npipeline().parameters.FileName\n)",
                                                    "type": "Expression"
                                                },
                                                "ds_inputFilePath": {
                                                    "value": "@pipeline().parameters.FwkItem['ArchivePath']",
                                                    "type": "Expression"
                                                }
                                            }
                                        }
                                    ]
                                }
                            ]
                        }
                    },
                    {
                        "name": "If Logging Required",
                        "type": "IfCondition",
                        "dependsOn": [],
                        "userProperties": [],
                        "typeProperties": {
                            "expression": {
                                "value": "@if(and(contains(json(pipeline().parameters.FwkItem['Params']), 'logSettingsInstanceURL'), contains(json(pipeline().parameters.FwkItem['Params']), 'logSettingsPath')), true, false)",
                                "type": "Expression"
                            },
                            "ifFalseActivities": [
                                {
                                    "name": "FullLoadCopyWithoutLogging",
                                    "description": "Copy a table from a database to the configurated Sink dynamically taking by input FwkItem, SrcPath.",
                                    "type": "Copy",
                                    "dependsOn": [],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "source": {
                                            "type": "ExcelSource",
                                            "additionalColumns": {
                                                "type": "Expression",
                                                "value": "@if(\n    contains(json(pipeline().parameters.FwkItem['Params']), 'additionalColumns'),\n    json(pipeline().parameters.FwkItem['Params']).additionalColumns,\n    json('[]')\n)"
                                            },
                                            "storeSettings": {
                                                "type": "FileServerReadSettings",
                                                "recursive": true,
                                                "enablePartitionDiscovery": false
                                            }
                                        },
                                        "sink": {
                                            "type": "ParquetSink",
                                            "storeSettings": {
                                                "type": "AzureBlobFSWriteSettings"
                                            },
                                            "formatSettings": {
                                                "type": "ParquetWriteSettings"
                                            }
                                        },
                                        "enableStaging": false,
                                        "enableSkipIncompatibleRow": {
                                            "value": "@if(contains(json(pipeline().parameters.FwkItem['Params']), 'enableSkipIncompatibleRow'), json(pipeline().parameters.FwkItem['Params']).enableSkipIncompatibleRow, false)",
                                            "type": "Expression"
                                        },
                                        "validateDataConsistency": true,
                                        "translator": {
                                            "value": "@if(\n    contains(json(pipeline().parameters.FwkItem['Params']), 'mapping'),\n    json(pipeline().parameters.FwkItem['Params']).mapping,\n    '\"mapping\":{}'\n)",
                                            "type": "Expression"
                                        }
                                    },
                                    "inputs": [
                                        {
                                            "referenceName": "DS_FileShare_Excel_Source",
                                            "type": "DatasetReference",
                                            "parameters": {
                                                "FwkItem": {
                                                    "value": "@pipeline().parameters.FwkItem",
                                                    "type": "Expression"
                                                },
                                                "ds_inputFileName": {
                                                    "value": "@pipeline().parameters.FileName",
                                                    "type": "Expression"
                                                },
                                                "ds_inputFilePath": {
                                                    "value": "@pipeline().parameters.FilePath",
                                                    "type": "Expression"
                                                }
                                            }
                                        }
                                    ],
                                    "outputs": [
                                        {
                                            "referenceName": "DS_ADLS_PRQ_Sink",
                                            "type": "DatasetReference",
                                            "parameters": {
                                                "InstanceURL": {
                                                    "value": "@pipeline().parameters.FwkItem['SinkInstanceURL']",
                                                    "type": "Expression"
                                                },
                                                "FullPath": {
                                                    "value": "@concat(pipeline().parameters.FwkItem['SinkPath'], \n\t'/',\n\tformatDateTime(pipeline().parameters.PL_01TriggerTime,'yyyy'),\n\tformatDateTime(pipeline().parameters.PL_01TriggerTime,'MM'),\n\tformatDateTime(pipeline().parameters.PL_01TriggerTime,'dd'),\n\tformatDateTime(pipeline().parameters.PL_01TriggerTime,'HH'),\n\tformatDateTime(pipeline().parameters.PL_01TriggerTime,'mm'),\n\t'_',\n\tutcnow(),\n\t'_',\n\tpipeline().parameters.FwkItem['EntityName'],\n\t'.snappy.parquet'\n)",
                                                    "type": "Expression"
                                                }
                                            }
                                        }
                                    ]
                                },
                                {
                                    "name": "spu_IngtLogUpdate_succeeded_copy1",
                                    "description": "Executes the SP spu_IngtLogUpdate to update record into IngtLog table with the execution module information.",
                                    "type": "SqlServerStoredProcedure",
                                    "dependsOn": [
                                        {
                                            "activity": "FullLoadCopyWithoutLogging",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "storedProcedureName": "[[dbo].[spu_IngtLogUpdate]",
                                        "storedProcedureParameters": {
                                            "IngtOutputId": {
                                                "value": {
                                                    "value": "@pipeline().parameters.FwkItem['IngtOutputId']",
                                                    "type": "Expression"
                                                },
                                                "type": "Int32"
                                            },
                                            "EntRunId": {
                                                "value": {
                                                    "value": "@pipeline().parameters.EntRunId",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            },
                                            "ModuleRunId": {
                                                "value": {
                                                    "value": "@pipeline().parameters.ModuleRunId",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            },
                                            "PipelineStatus": {
                                                "value": {
                                                    "value": "Succeeded",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            },
                                            "RowsRead": {
                                                "value": {
                                                    "value": "@if(\n    contains(activity('FullLoadCopyWithoutLogging').output, 'rowsRead'),\n    activity('FullLoadCopyWithoutLogging').output.rowsRead,\n    null\n)",
                                                    "type": "Expression"
                                                },
                                                "type": "Int64"
                                            },
                                            "RowsCopied": {
                                                "value": {
                                                    "value": "@if(\n    contains(activity('FullLoadCopyWithoutLogging').output, 'rowsCopied'),\n    activity('FullLoadCopyWithoutLogging').output.rowsCopied,\n    null\n)",
                                                    "type": "Expression"
                                                },
                                                "type": "Int64"
                                            },
                                            "CopyDuration": {
                                                "value": {
                                                    "value": "@if(\n    contains(activity('FullLoadCopyWithoutLogging').output, 'copyDuration'),\n    activity('FullLoadCopyWithoutLogging').output.copyDuration,\n    null\n)",
                                                    "type": "Expression"
                                                },
                                                "type": "Double"
                                            },
                                            "Throughput": {
                                                "value": {
                                                    "value": "@if(\n    contains(activity('FullLoadCopyWithoutLogging').output, 'throughput'),\n    activity('FullLoadCopyWithoutLogging').output.throughput,\n    null\n)",
                                                    "type": "Expression"
                                                },
                                                "type": "Double"
                                            },
                                            "ErrorMessage": {
                                                "value": null,
                                                "type": "String"
                                            },
                                            "RowsSkipped": {
                                                "value": {
                                                    "value": "@if(\n    contains(activity('FullLoadCopyWithoutLogging').output, 'rowsSkipped'),\n    activity('FullLoadCopyWithoutLogging').output.rowsSkipped,\n    null\n)",
                                                    "type": "Expression"
                                                },
                                                "type": "Int64"
                                            },
                                            "LogFilePath": {
                                                "value": null,
                                                "type": "String"
                                            },
                                            "FileName": {
                                                "value": {
                                                    "value": "@if(contains(pipeline().parameters.FwkItem['Path'], '*'), pipeline().parameters.FileName, null)",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            }
                                        }
                                    },
                                    "linkedServiceName": {
                                        "referenceName": "LS_configurationDB",
                                        "type": "LinkedServiceReference"
                                    }
                                },
                                {
                                    "name": "spu_IngtLogUpdate_failed_copy1",
                                    "description": "Executes the SP spu_IngtLogUpdate to update record into IngtLog table with the execution module information.",
                                    "type": "SqlServerStoredProcedure",
                                    "dependsOn": [
                                        {
                                            "activity": "FullLoadCopyWithoutLogging",
                                            "dependencyConditions": [
                                                "Failed"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "storedProcedureName": "[[dbo].[spu_IngtLogUpdate]",
                                        "storedProcedureParameters": {
                                            "IngtOutputId": {
                                                "value": {
                                                    "value": "@pipeline().parameters.FwkItem['IngtOutputId']",
                                                    "type": "Expression"
                                                },
                                                "type": "Int32"
                                            },
                                            "EntRunId": {
                                                "value": {
                                                    "value": "@pipeline().parameters.EntRunId",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            },
                                            "ModuleRunId": {
                                                "value": {
                                                    "value": "@pipeline().parameters.ModuleRunId",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            },
                                            "PipelineStatus": {
                                                "value": {
                                                    "value": "Failed",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            },
                                            "RowsRead": {
                                                "value": null,
                                                "type": "Int64"
                                            },
                                            "RowsCopied": {
                                                "value": null,
                                                "type": "Int64"
                                            },
                                            "CopyDuration": {
                                                "value": null,
                                                "type": "Double"
                                            },
                                            "Throughput": {
                                                "value": null,
                                                "type": "Double"
                                            },
                                            "ErrorMessage": {
                                                "value": {
                                                    "value": "@if(\n    and(\n        contains(activity('FullLoadCopyWithoutLogging').output, 'errors'),\n        greater(length(activity('FullLoadCopyWithoutLogging').output.errors), 0)\n    ),\n    activity('FullLoadCopyWithoutLogging').output.errors[0].Message,\n    null\n)",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            },
                                            "RowsSkipped": {
                                                "value": {
                                                    "value": "@if(\n    contains(activity('FullLoadCopyWithoutLogging').output, 'rowsSkipped'),\n    activity('FullLoadCopyWithoutLogging').output.rowsSkipped,\n    null\n)",
                                                    "type": "Expression"
                                                },
                                                "type": "Int64"
                                            },
                                            "LogFilePath": {
                                                "value": null,
                                                "type": "String"
                                            }
                                        }
                                    },
                                    "linkedServiceName": {
                                        "referenceName": "LS_configurationDB",
                                        "type": "LinkedServiceReference"
                                    }
                                }
                            ],
                            "ifTrueActivities": [
                                {
                                    "name": "FullLoadCopyWithLogging",
                                    "description": "Copy a table from a database to the configurated Sink dynamically taking by input FwkItem, SrcPath.",
                                    "type": "Copy",
                                    "dependsOn": [],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "source": {
                                            "type": "ExcelSource",
                                            "additionalColumns": {
                                                "type": "Expression",
                                                "value": "@if(\n    contains(json(pipeline().parameters.FwkItem['Params']), 'additionalColumns'),\n    json(pipeline().parameters.FwkItem['Params']).additionalColumns,\n    json('[]')\n)"
                                            },
                                            "storeSettings": {
                                                "type": "FileServerReadSettings",
                                                "recursive": true,
                                                "enablePartitionDiscovery": false
                                            }
                                        },
                                        "sink": {
                                            "type": "ParquetSink",
                                            "storeSettings": {
                                                "type": "AzureBlobFSWriteSettings"
                                            },
                                            "formatSettings": {
                                                "type": "ParquetWriteSettings"
                                            }
                                        },
                                        "enableStaging": false,
                                        "enableSkipIncompatibleRow": {
                                            "value": "@if(contains(json(pipeline().parameters.FwkItem['Params']), 'enableSkipIncompatibleRow'), json(pipeline().parameters.FwkItem['Params']).enableSkipIncompatibleRow, false)",
                                            "type": "Expression"
                                        },
                                        "validateDataConsistency": true,
                                        "logSettings": {
                                            "enableCopyActivityLog": true,
                                            "copyActivityLogSettings": {
                                                "logLevel": "Warning",
                                                "enableReliableLogging": false
                                            },
                                            "logLocationSettings": {
                                                "linkedServiceName": {
                                                    "referenceName": "LS_adls",
                                                    "type": "LinkedServiceReference",
                                                    "parameters": {
                                                        "InstanceURL": {
                                                            "value": "@json(pipeline().parameters.FwkItem['Params']).logSettingsInstanceURL",
                                                            "type": "Expression"
                                                        }
                                                    }
                                                },
                                                "path": {
                                                    "value": "@json(pipeline().parameters.FwkItem['Params']).logSettingsPath",
                                                    "type": "Expression"
                                                }
                                            }
                                        },
                                        "translator": {
                                            "value": "@if(\n    contains(json(pipeline().parameters.FwkItem['Params']), 'mapping'),\n    json(pipeline().parameters.FwkItem['Params']).mapping,\n    '\"mapping\":{}'\n)",
                                            "type": "Expression"
                                        }
                                    },
                                    "inputs": [
                                        {
                                            "referenceName": "DS_FileShare_Excel_Source",
                                            "type": "DatasetReference",
                                            "parameters": {
                                                "FwkItem": {
                                                    "value": "@pipeline().parameters.FwkItem",
                                                    "type": "Expression"
                                                },
                                                "ds_inputFileName": {
                                                    "value": "@pipeline().parameters.FileName",
                                                    "type": "Expression"
                                                },
                                                "ds_inputFilePath": {
                                                    "value": "@pipeline().parameters.FilePath",
                                                    "type": "Expression"
                                                }
                                            }
                                        }
                                    ],
                                    "outputs": [
                                        {
                                            "referenceName": "DS_ADLS_PRQ_Sink",
                                            "type": "DatasetReference",
                                            "parameters": {
                                                "InstanceURL": {
                                                    "value": "@pipeline().parameters.FwkItem['SinkInstanceURL']",
                                                    "type": "Expression"
                                                },
                                                "FullPath": {
                                                    "value": "@concat(pipeline().parameters.FwkItem['SinkPath'], \n\t'/',\n\tformatDateTime(pipeline().parameters.PL_01TriggerTime,'yyyy'),\n\tformatDateTime(pipeline().parameters.PL_01TriggerTime,'MM'),\n\tformatDateTime(pipeline().parameters.PL_01TriggerTime,'dd'),\n\tformatDateTime(pipeline().parameters.PL_01TriggerTime,'HH'),\n\tformatDateTime(pipeline().parameters.PL_01TriggerTime,'mm'),\n\t'_',\n\tutcnow(),\n\t'_',\n\tpipeline().parameters.FwkItem['EntityName'],\n\t'.snappy.parquet'\n)",
                                                    "type": "Expression"
                                                }
                                            }
                                        }
                                    ]
                                },
                                {
                                    "name": "spu_IngtLogUpdate_succeeded",
                                    "description": "Executes the SP spu_IngtLogUpdate to update record into IngtLog table with the execution module information.",
                                    "type": "SqlServerStoredProcedure",
                                    "dependsOn": [
                                        {
                                            "activity": "FullLoadCopyWithLogging",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "storedProcedureName": "[[dbo].[spu_IngtLogUpdate]",
                                        "storedProcedureParameters": {
                                            "IngtOutputId": {
                                                "value": {
                                                    "value": "@pipeline().parameters.FwkItem['IngtOutputId']",
                                                    "type": "Expression"
                                                },
                                                "type": "Int32"
                                            },
                                            "EntRunId": {
                                                "value": {
                                                    "value": "@pipeline().parameters.EntRunId",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            },
                                            "ModuleRunId": {
                                                "value": {
                                                    "value": "@pipeline().parameters.ModuleRunId",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            },
                                            "PipelineStatus": {
                                                "value": {
                                                    "value": "Succeeded",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            },
                                            "RowsRead": {
                                                "value": {
                                                    "value": "@if(\n    contains(activity('FullLoadCopyWithLogging').output, 'rowsRead'),\n    activity('FullLoadCopyWithLogging').output.rowsRead,\n    null\n)",
                                                    "type": "Expression"
                                                },
                                                "type": "Int64"
                                            },
                                            "RowsCopied": {
                                                "value": {
                                                    "value": "@if(\n    contains(activity('FullLoadCopyWithLogging').output, 'rowsCopied'),\n    activity('FullLoadCopyWithLogging').output.rowsCopied,\n    null\n)",
                                                    "type": "Expression"
                                                },
                                                "type": "Int64"
                                            },
                                            "CopyDuration": {
                                                "value": {
                                                    "value": "@if(\n    contains(activity('FullLoadCopyWithLogging').output, 'copyDuration'),\n    activity('FullLoadCopyWithLogging').output.copyDuration,\n    null\n)",
                                                    "type": "Expression"
                                                },
                                                "type": "Double"
                                            },
                                            "Throughput": {
                                                "value": {
                                                    "value": "@if(\n    contains(activity('FullLoadCopyWithLogging').output, 'throughput'),\n    activity('FullLoadCopyWithLogging').output.throughput,\n    null\n)",
                                                    "type": "Expression"
                                                },
                                                "type": "Double"
                                            },
                                            "ErrorMessage": {
                                                "value": null,
                                                "type": "String"
                                            },
                                            "RowsSkipped": {
                                                "value": {
                                                    "value": "@if(\n    contains(activity('FullLoadCopyWithLogging').output, 'rowsSkipped'),\n    activity('FullLoadCopyWithLogging').output.rowsSkipped,\n    null\n)",
                                                    "type": "Expression"
                                                },
                                                "type": "Int64"
                                            },
                                            "LogFilePath": {
                                                "value": {
                                                    "value": "@if(\n    contains(activity('FullLoadCopyWithLogging').output, 'logFilePath'),\n    activity('FullLoadCopyWithLogging').output.logFilePath,\n    null\n)",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            },
                                            "FileName": {
                                                "value": {
                                                    "value": "@if(contains(pipeline().parameters.FwkItem['Path'], '*'), pipeline().parameters.FileName, null)",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            }
                                        }
                                    },
                                    "linkedServiceName": {
                                        "referenceName": "LS_configurationDB",
                                        "type": "LinkedServiceReference"
                                    }
                                },
                                {
                                    "name": "spu_IngtLogUpdate_failed",
                                    "description": "Executes the SP spu_IngtLogUpdate to update record into IngtLog table with the execution module information.",
                                    "type": "SqlServerStoredProcedure",
                                    "dependsOn": [
                                        {
                                            "activity": "FullLoadCopyWithLogging",
                                            "dependencyConditions": [
                                                "Failed"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "storedProcedureName": "[[dbo].[spu_IngtLogUpdate]",
                                        "storedProcedureParameters": {
                                            "IngtOutputId": {
                                                "value": {
                                                    "value": "@pipeline().parameters.FwkItem['IngtOutputId']",
                                                    "type": "Expression"
                                                },
                                                "type": "Int32"
                                            },
                                            "EntRunId": {
                                                "value": {
                                                    "value": "@pipeline().parameters.EntRunId",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            },
                                            "ModuleRunId": {
                                                "value": {
                                                    "value": "@pipeline().parameters.ModuleRunId",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            },
                                            "PipelineStatus": {
                                                "value": {
                                                    "value": "Failed",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            },
                                            "RowsRead": {
                                                "value": null,
                                                "type": "Int64"
                                            },
                                            "RowsCopied": {
                                                "value": null,
                                                "type": "Int64"
                                            },
                                            "CopyDuration": {
                                                "value": null,
                                                "type": "Double"
                                            },
                                            "Throughput": {
                                                "value": null,
                                                "type": "Double"
                                            },
                                            "ErrorMessage": {
                                                "value": {
                                                    "value": "@if(\n    and(\n        contains(activity('FullLoadCopyWithLogging').output, 'errors'),\n        greater(length(activity('FullLoadCopyWithLogging').output.errors), 0)\n    ),\n    activity('FullLoadCopyWithLogging').output.errors[0].Message,\n    null\n)",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            },
                                            "RowsSkipped": {
                                                "value": {
                                                    "value": "@if(\n    contains(activity('FullLoadCopyWithLogging').output, 'rowsSkipped'),\n    activity('FullLoadCopyWithLogging').output.rowsSkipped,\n    null\n)",
                                                    "type": "Expression"
                                                },
                                                "type": "Int64"
                                            },
                                            "LogFilePath": {
                                                "value": {
                                                    "value": "@if(\n    contains(activity('FullLoadCopyWithLogging').output, 'logFilePath'),\n    activity('FullLoadCopyWithLogging').output.logFilePath,\n    null\n)",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            }
                                        }
                                    },
                                    "linkedServiceName": {
                                        "referenceName": "LS_configurationDB",
                                        "type": "LinkedServiceReference"
                                    }
                                }
                            ]
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {}
                },
                "parameters": {
                    "FwkItem": {
                        "type": "array"
                    },
                    "EntRunId": {
                        "type": "string"
                    },
                    "ModuleRunId": {
                        "type": "string"
                    },
                    "FileName": {
                        "type": "string"
                    },
                    "FilePath": {
                        "type": "string"
                    },
                    "PL_01TriggerTime": {
                        "type": "string"
                    }
                },
                "folder": {
                    "name": "01 Ingestion Module/05 FileShare"
                },
                "annotations": []
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/datasets/DS_FileShare_BIN_File')]",
                "[concat(variables('factoryId'), '/datasets/DS_FileShare_Excel_Source')]",
                "[concat(variables('factoryId'), '/datasets/DS_ADLS_PRQ_Sink')]",
                "[concat(variables('factoryId'), '/linkedServices/LS_configurationDB')]",
                "[concat(variables('factoryId'), '/linkedServices/LS_adls')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/PL_ING_05_02_FileShareIngestAllExcelFiles')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "ForEach Excel file",
                        "type": "ForEach",
                        "dependsOn": [],
                        "userProperties": [],
                        "typeProperties": {
                            "items": {
                                "value": "@pipeline().parameters.FileNames",
                                "type": "Expression"
                            },
                            "isSequential": true,
                            "activities": [
                                {
                                    "name": "Execute SFTPCSVLoad",
                                    "type": "ExecutePipeline",
                                    "dependsOn": [
                                        {
                                            "activity": "spi_IngtLogInsert",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "pipeline": {
                                            "referenceName": "PL_ING_05_02_FileShareExcelLoad",
                                            "type": "PipelineReference"
                                        },
                                        "waitOnCompletion": true,
                                        "parameters": {
                                            "FwkItem": {
                                                "value": "@pipeline().parameters.FwkItem",
                                                "type": "Expression"
                                            },
                                            "EntRunId": {
                                                "value": "@pipeline().parameters.EntRunId",
                                                "type": "Expression"
                                            },
                                            "ModuleRunId": {
                                                "value": "@pipeline().parameters.ModuleRunId",
                                                "type": "Expression"
                                            },
                                            "FileName": {
                                                "value": "@item().name",
                                                "type": "Expression"
                                            },
                                            "FilePath": {
                                                "value": "@pipeline().parameters.FilePath",
                                                "type": "Expression"
                                            },
                                            "PL_01TriggerTime": {
                                                "value": "@pipeline().parameters.PL_01TriggerTime",
                                                "type": "Expression"
                                            }
                                        }
                                    }
                                },
                                {
                                    "name": "spi_IngtLogInsert",
                                    "description": "Executes the SP spi_IngtLogInsert to insert record into IngtLog table with the execution module information.",
                                    "type": "SqlServerStoredProcedure",
                                    "dependsOn": [],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "storedProcedureName": "[[dbo].[spi_IngtLogInsert]",
                                        "storedProcedureParameters": {
                                            "IngtOutputId": {
                                                "value": {
                                                    "value": "@pipeline().parameters.FwkItem['IngtOutputId']",
                                                    "type": "Expression"
                                                },
                                                "type": "Int32"
                                            },
                                            "EntRunId": {
                                                "value": {
                                                    "value": "@pipeline().parameters.EntRunId",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            },
                                            "ModuleRunId": {
                                                "value": {
                                                    "value": "@pipeline().parameters.ModuleRunId",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            },
                                            "PipelineStatus": {
                                                "value": {
                                                    "value": "InProgress",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            },
                                            "StartDate": {
                                                "value": {
                                                    "value": "@formatdatetime(pipeline().TriggerTime)",
                                                    "type": "Expression"
                                                },
                                                "type": "Datetime"
                                            },
                                            "RowsRead": {
                                                "value": null,
                                                "type": "Int64"
                                            },
                                            "RowsCopied": {
                                                "value": null,
                                                "type": "Int64"
                                            },
                                            "CopyDuration": {
                                                "value": null,
                                                "type": "Double"
                                            },
                                            "Throughput": {
                                                "value": null,
                                                "type": "Double"
                                            },
                                            "ErrorMessage": {
                                                "value": null,
                                                "type": "String"
                                            },
                                            "FileName": {
                                                "value": {
                                                    "value": "@if(contains(pipeline().parameters.FwkItem['Path'], '*'), item().name, null)",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            }
                                        }
                                    },
                                    "linkedServiceName": {
                                        "referenceName": "LS_configurationDB",
                                        "type": "LinkedServiceReference"
                                    }
                                }
                            ]
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {}
                },
                "parameters": {
                    "FileNames": {
                        "type": "array"
                    },
                    "FwkItem": {
                        "type": "array"
                    },
                    "EntRunId": {
                        "type": "string"
                    },
                    "ModuleRunId": {
                        "type": "string"
                    },
                    "FilePath": {
                        "type": "string"
                    },
                    "PL_01TriggerTime": {
                        "type": "string"
                    }
                },
                "folder": {
                    "name": "01 Ingestion Module/05 FileShare"
                },
                "annotations": []
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/pipelines/PL_ING_05_02_FileShareExcelLoad')]",
                "[concat(variables('factoryId'), '/linkedServices/LS_configurationDB')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/PL_ING_05_03_FileShareXMLCheck')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Select 1 file by wildcard and last modified date",
                        "type": "ExecutePipeline",
                        "dependsOn": [],
                        "policy": {
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "PL_ING_05_FileShareGetFiles",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {
                                "FwkItem": {
                                    "value": "@pipeline().parameters.FwkItem",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    {
                        "name": "IfMissingFile",
                        "type": "IfCondition",
                        "dependsOn": [
                            {
                                "activity": "Select 1 file by wildcard and last modified date",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "expression": {
                                "value": "@equals(length(activity('Select 1 file by wildcard and last modified date').output.pipelineReturnValue['outputFileName']), 0)\n",
                                "type": "Expression"
                            },
                            "ifFalseActivities": [
                                {
                                    "name": "CopyActivity",
                                    "type": "ExecutePipeline",
                                    "dependsOn": [
                                        {
                                            "activity": "spi_IngtLogInsert_copy1",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "pipeline": {
                                            "referenceName": "PL_ING_05_03_FileShareXMLLoad",
                                            "type": "PipelineReference"
                                        },
                                        "waitOnCompletion": true,
                                        "parameters": {
                                            "FwkItem": {
                                                "value": "@pipeline().parameters.FwkItem",
                                                "type": "Expression"
                                            },
                                            "EntRunId": {
                                                "value": "@pipeline().parameters.EntRunId",
                                                "type": "Expression"
                                            },
                                            "ModuleRunId": {
                                                "value": "@pipeline().parameters.ModuleRunId",
                                                "type": "Expression"
                                            },
                                            "FileName": {
                                                "value": "@activity('Select 1 file by wildcard and last modified date').output.pipelineReturnValue['outputFileName'][0]['name']",
                                                "type": "Expression"
                                            },
                                            "FilePath": {
                                                "value": "@activity('Select 1 file by wildcard and last modified date').output.pipelineReturnValue['outputFilePath']",
                                                "type": "Expression"
                                            },
                                            "PL_01TriggerTime": {
                                                "value": "@pipeline().parameters.PL_01TriggerTime",
                                                "type": "Expression"
                                            }
                                        }
                                    }
                                },
                                {
                                    "name": "spi_IngtLogInsert_copy1",
                                    "description": "Executes the SP spi_IngtLogInsert to insert record into IngtLog table with the execution module information.",
                                    "type": "SqlServerStoredProcedure",
                                    "dependsOn": [],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "storedProcedureName": "[[dbo].[spi_IngtLogInsert]",
                                        "storedProcedureParameters": {
                                            "IngtOutputId": {
                                                "value": {
                                                    "value": "@pipeline().parameters.FwkItem['IngtOutputId']",
                                                    "type": "Expression"
                                                },
                                                "type": "Int32"
                                            },
                                            "EntRunId": {
                                                "value": {
                                                    "value": "@pipeline().parameters.EntRunId",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            },
                                            "ModuleRunId": {
                                                "value": {
                                                    "value": "@pipeline().parameters.ModuleRunId",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            },
                                            "PipelineStatus": {
                                                "value": {
                                                    "value": "InProgress",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            },
                                            "StartDate": {
                                                "value": {
                                                    "value": "@formatdatetime(pipeline().TriggerTime)",
                                                    "type": "Expression"
                                                },
                                                "type": "Datetime"
                                            },
                                            "RowsRead": {
                                                "value": null,
                                                "type": "Int64"
                                            },
                                            "RowsCopied": {
                                                "value": null,
                                                "type": "Int64"
                                            },
                                            "CopyDuration": {
                                                "value": null,
                                                "type": "Double"
                                            },
                                            "Throughput": {
                                                "value": null,
                                                "type": "Double"
                                            },
                                            "ErrorMessage": {
                                                "value": null,
                                                "type": "String"
                                            },
                                            "FileName": {
                                                "value": {
                                                    "value": "@if(contains(pipeline().parameters.FwkItem['Path'], '*'), activity('Select 1 file by wildcard and last modified date').output.pipelineReturnValue['outputFileName'][0]['name'], null)",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            }
                                        }
                                    },
                                    "linkedServiceName": {
                                        "referenceName": "LS_configurationDB",
                                        "type": "LinkedServiceReference"
                                    }
                                }
                            ],
                            "ifTrueActivities": [
                                {
                                    "name": "spi_IngtLogInsert",
                                    "description": "Executes the SP spi_IngtLogInsert to insert record into IngtLog table with the execution module information.",
                                    "type": "SqlServerStoredProcedure",
                                    "dependsOn": [],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "storedProcedureName": "[[dbo].[spi_IngtLogInsert]",
                                        "storedProcedureParameters": {
                                            "IngtOutputId": {
                                                "value": {
                                                    "value": "@pipeline().parameters.FwkItem['IngtOutputId']",
                                                    "type": "Expression"
                                                },
                                                "type": "Int32"
                                            },
                                            "EntRunId": {
                                                "value": {
                                                    "value": "@pipeline().parameters.EntRunId",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            },
                                            "ModuleRunId": {
                                                "value": {
                                                    "value": "@pipeline().parameters.ModuleRunId",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            },
                                            "PipelineStatus": {
                                                "value": {
                                                    "value": "Skipped - Missing source file",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            },
                                            "StartDate": {
                                                "value": {
                                                    "value": "@formatdatetime(pipeline().TriggerTime)",
                                                    "type": "Expression"
                                                },
                                                "type": "Datetime"
                                            },
                                            "RowsRead": {
                                                "value": null,
                                                "type": "Int64"
                                            },
                                            "RowsCopied": {
                                                "value": null,
                                                "type": "Int64"
                                            },
                                            "CopyDuration": {
                                                "value": null,
                                                "type": "Double"
                                            },
                                            "Throughput": {
                                                "value": null,
                                                "type": "Double"
                                            },
                                            "ErrorMessage": {
                                                "value": null,
                                                "type": "String"
                                            },
                                            "FileName": {
                                                "value": null,
                                                "type": "String"
                                            }
                                        }
                                    },
                                    "linkedServiceName": {
                                        "referenceName": "LS_configurationDB",
                                        "type": "LinkedServiceReference"
                                    }
                                }
                            ]
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {}
                },
                "parameters": {
                    "FwkItem": {
                        "type": "array"
                    },
                    "PL_01TriggerTime": {
                        "type": "string"
                    },
                    "EntRunId": {
                        "type": "string"
                    },
                    "ModuleRunId": {
                        "type": "string"
                    }
                },
                "folder": {
                    "name": "01 Ingestion Module/05 FileShare"
                },
                "annotations": [],
                "lastPublishTime": "2023-07-06T08:29:16Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/pipelines/PL_ING_05_FileShareGetFiles')]",
                "[concat(variables('factoryId'), '/pipelines/PL_ING_05_03_FileShareXMLLoad')]",
                "[concat(variables('factoryId'), '/linkedServices/LS_configurationDB')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/PL_ING_05_03_FileShareXMLLoad')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "IF archivePath Defined",
                        "description": "if the archive path is defined then copy source file with timestamp prefix to archive folder",
                        "type": "IfCondition",
                        "dependsOn": [
                            {
                                "activity": "If Logging Required",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "expression": {
                                "value": "@empty(pipeline().parameters.FwkItem['ArchivePath'])",
                                "type": "Expression"
                            },
                            "ifFalseActivities": [
                                {
                                    "name": "Move to archivePath",
                                    "type": "Copy",
                                    "dependsOn": [],
                                    "policy": {
                                        "timeout": "0.12:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "source": {
                                            "type": "BinarySource",
                                            "storeSettings": {
                                                "type": "FileServerReadSettings",
                                                "recursive": true,
                                                "deleteFilesAfterCompletion": true
                                            },
                                            "formatSettings": {
                                                "type": "BinaryReadSettings"
                                            }
                                        },
                                        "sink": {
                                            "type": "BinarySink",
                                            "storeSettings": {
                                                "type": "FileServerWriteSettings"
                                            }
                                        },
                                        "enableStaging": false
                                    },
                                    "inputs": [
                                        {
                                            "referenceName": "DS_FileShare_BIN_File",
                                            "type": "DatasetReference",
                                            "parameters": {
                                                "FwkItem": {
                                                    "value": "@pipeline().parameters.FwkItem",
                                                    "type": "Expression"
                                                },
                                                "ds_inputFileName": {
                                                    "value": "@pipeline().parameters.FileName",
                                                    "type": "Expression"
                                                },
                                                "ds_inputFilePath": {
                                                    "value": "@pipeline().parameters.FilePath",
                                                    "type": "Expression"
                                                }
                                            }
                                        }
                                    ],
                                    "outputs": [
                                        {
                                            "referenceName": "DS_FileShare_BIN_File",
                                            "type": "DatasetReference",
                                            "parameters": {
                                                "FwkItem": {
                                                    "value": "@pipeline().parameters.FwkItem",
                                                    "type": "Expression"
                                                },
                                                "ds_inputFileName": {
                                                    "value": "@concat(\n\tformatDateTime(pipeline().parameters.PL_01TriggerTime,'yyyy'),\n\tformatDateTime(pipeline().parameters.PL_01TriggerTime,'MM'),\n\tformatDateTime(pipeline().parameters.PL_01TriggerTime,'dd'),\n\tformatDateTime(pipeline().parameters.PL_01TriggerTime,'HH'),\n\tformatDateTime(pipeline().parameters.PL_01TriggerTime,'mm'),\n\t'_',\npipeline().parameters.FileName\n)",
                                                    "type": "Expression"
                                                },
                                                "ds_inputFilePath": {
                                                    "value": "@pipeline().parameters.FwkItem['ArchivePath']",
                                                    "type": "Expression"
                                                }
                                            }
                                        }
                                    ]
                                }
                            ]
                        }
                    },
                    {
                        "name": "If Logging Required",
                        "type": "IfCondition",
                        "dependsOn": [],
                        "userProperties": [],
                        "typeProperties": {
                            "expression": {
                                "value": "@if(and(contains(json(pipeline().parameters.FwkItem['Params']), 'logSettingsInstanceURL'), contains(json(pipeline().parameters.FwkItem['Params']), 'logSettingsPath')), true, false)",
                                "type": "Expression"
                            },
                            "ifFalseActivities": [
                                {
                                    "name": "FullLoadCopyWithoutLogging",
                                    "description": "Copy a table from a database to the configurated Sink dynamically taking by input FwkItem, SrcPath.",
                                    "type": "Copy",
                                    "dependsOn": [],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "source": {
                                            "type": "XmlSource",
                                            "additionalColumns": {
                                                "type": "Expression",
                                                "value": "@if(\n    contains(json(pipeline().parameters.FwkItem['Params']), 'additionalColumns'),\n    json(pipeline().parameters.FwkItem['Params']).additionalColumns,\n    json('[]')\n)"
                                            },
                                            "storeSettings": {
                                                "type": "FileServerReadSettings",
                                                "recursive": true,
                                                "enablePartitionDiscovery": false
                                            },
                                            "formatSettings": {
                                                "type": "XmlReadSettings",
                                                "validationMode": "none",
                                                "detectDataType": true,
                                                "namespaces": false
                                            }
                                        },
                                        "sink": {
                                            "type": "ParquetSink",
                                            "storeSettings": {
                                                "type": "AzureBlobFSWriteSettings"
                                            },
                                            "formatSettings": {
                                                "type": "ParquetWriteSettings"
                                            }
                                        },
                                        "enableStaging": false,
                                        "enableSkipIncompatibleRow": {
                                            "value": "@if(contains(json(pipeline().parameters.FwkItem['Params']), 'enableSkipIncompatibleRow'), json(pipeline().parameters.FwkItem['Params']).enableSkipIncompatibleRow, false)",
                                            "type": "Expression"
                                        },
                                        "validateDataConsistency": true,
                                        "translator": {
                                            "value": "@if(\n    contains(json(pipeline().parameters.FwkItem['Params']), 'mapping'),\n    json(pipeline().parameters.FwkItem['Params']).mapping,\n    '\"mapping\":{}'\n)",
                                            "type": "Expression"
                                        }
                                    },
                                    "inputs": [
                                        {
                                            "referenceName": "DS_FileShare_XML_Source",
                                            "type": "DatasetReference",
                                            "parameters": {
                                                "FwkItem": {
                                                    "value": "@pipeline().parameters.FwkItem",
                                                    "type": "Expression"
                                                },
                                                "ds_inputFileName": {
                                                    "value": "@pipeline().parameters.FileName",
                                                    "type": "Expression"
                                                },
                                                "ds_inputFilePath": {
                                                    "value": "@pipeline().parameters.FilePath",
                                                    "type": "Expression"
                                                }
                                            }
                                        }
                                    ],
                                    "outputs": [
                                        {
                                            "referenceName": "DS_ADLS_PRQ_Sink",
                                            "type": "DatasetReference",
                                            "parameters": {
                                                "InstanceURL": {
                                                    "value": "@pipeline().parameters.FwkItem['SinkInstanceURL']",
                                                    "type": "Expression"
                                                },
                                                "FullPath": {
                                                    "value": "@concat(pipeline().parameters.FwkItem['SinkPath'], \n\t'/',\n\tformatDateTime(pipeline().parameters.PL_01TriggerTime,'yyyy'),\n\tformatDateTime(pipeline().parameters.PL_01TriggerTime,'MM'),\n\tformatDateTime(pipeline().parameters.PL_01TriggerTime,'dd'),\n\tformatDateTime(pipeline().parameters.PL_01TriggerTime,'HH'),\n\tformatDateTime(pipeline().parameters.PL_01TriggerTime,'mm'),\n\t'_',\n\tpipeline().parameters.FwkItem['EntityName'],\n\t'.snappy.parquet'\n)",
                                                    "type": "Expression"
                                                }
                                            }
                                        }
                                    ]
                                },
                                {
                                    "name": "spu_IngtLogUpdate_succeeded2",
                                    "description": "Executes the SP spu_IngtLogUpdate to update record into IngtLog table with the execution module information.",
                                    "type": "SqlServerStoredProcedure",
                                    "dependsOn": [
                                        {
                                            "activity": "FullLoadCopyWithoutLogging",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "storedProcedureName": "[[dbo].[spu_IngtLogUpdate]",
                                        "storedProcedureParameters": {
                                            "IngtOutputId": {
                                                "value": {
                                                    "value": "@pipeline().parameters.FwkItem['IngtOutputId']",
                                                    "type": "Expression"
                                                },
                                                "type": "Int32"
                                            },
                                            "EntRunId": {
                                                "value": {
                                                    "value": "@pipeline().parameters.EntRunId",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            },
                                            "ModuleRunId": {
                                                "value": {
                                                    "value": "@pipeline().parameters.ModuleRunId",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            },
                                            "PipelineStatus": {
                                                "value": {
                                                    "value": "Succeeded",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            },
                                            "RowsRead": {
                                                "value": {
                                                    "value": "@if(\n    contains(activity('FullLoadCopyWithoutLogging').output, 'rowsRead'),\n    activity('FullLoadCopyWithoutLogging').output.rowsRead,\n    null\n)",
                                                    "type": "Expression"
                                                },
                                                "type": "Int64"
                                            },
                                            "RowsCopied": {
                                                "value": {
                                                    "value": "@if(\n    contains(activity('FullLoadCopyWithoutLogging').output, 'rowsCopied'),\n    activity('FullLoadCopyWithoutLogging').output.rowsCopied,\n    null\n)",
                                                    "type": "Expression"
                                                },
                                                "type": "Int64"
                                            },
                                            "CopyDuration": {
                                                "value": {
                                                    "value": "@if(\n    contains(activity('FullLoadCopyWithoutLogging').output, 'copyDuration'),\n    activity('FullLoadCopyWithoutLogging').output.copyDuration,\n    null\n)",
                                                    "type": "Expression"
                                                },
                                                "type": "Double"
                                            },
                                            "Throughput": {
                                                "value": {
                                                    "value": "@if(\n    contains(activity('FullLoadCopyWithoutLogging').output, 'throughput'),\n    activity('FullLoadCopyWithoutLogging').output.throughput,\n    null\n)",
                                                    "type": "Expression"
                                                },
                                                "type": "Double"
                                            },
                                            "ErrorMessage": {
                                                "value": null,
                                                "type": "String"
                                            },
                                            "RowsSkipped": {
                                                "value": {
                                                    "value": "@if(\n    contains(activity('FullLoadCopyWithoutLogging').output, 'rowsSkipped'),\n    activity('FullLoadCopyWithoutLogging').output.rowsSkipped,\n    null\n)",
                                                    "type": "Expression"
                                                },
                                                "type": "Int64"
                                            },
                                            "LogFilePath": {
                                                "value": null,
                                                "type": "String"
                                            },
                                            "FileName": {
                                                "value": {
                                                    "value": "@if(contains(pipeline().parameters.FwkItem['Path'], '*'), pipeline().parameters.FileName, null)",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            }
                                        }
                                    },
                                    "linkedServiceName": {
                                        "referenceName": "LS_configurationDB",
                                        "type": "LinkedServiceReference"
                                    }
                                },
                                {
                                    "name": "spu_IngtLogUpdate_failed2",
                                    "description": "Executes the SP spu_IngtLogUpdate to update record into IngtLog table with the execution module information.",
                                    "type": "SqlServerStoredProcedure",
                                    "dependsOn": [
                                        {
                                            "activity": "FullLoadCopyWithoutLogging",
                                            "dependencyConditions": [
                                                "Failed"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "storedProcedureName": "[[dbo].[spu_IngtLogUpdate]",
                                        "storedProcedureParameters": {
                                            "IngtOutputId": {
                                                "value": {
                                                    "value": "@pipeline().parameters.FwkItem['IngtOutputId']",
                                                    "type": "Expression"
                                                },
                                                "type": "Int32"
                                            },
                                            "EntRunId": {
                                                "value": {
                                                    "value": "@pipeline().parameters.EntRunId",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            },
                                            "ModuleRunId": {
                                                "value": {
                                                    "value": "@pipeline().parameters.ModuleRunId",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            },
                                            "PipelineStatus": {
                                                "value": {
                                                    "value": "Failed",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            },
                                            "RowsRead": {
                                                "value": null,
                                                "type": "Int64"
                                            },
                                            "RowsCopied": {
                                                "value": null,
                                                "type": "Int64"
                                            },
                                            "CopyDuration": {
                                                "value": null,
                                                "type": "Double"
                                            },
                                            "Throughput": {
                                                "value": null,
                                                "type": "Double"
                                            },
                                            "ErrorMessage": {
                                                "value": {
                                                    "value": "@if(\n    and(\n        contains(activity('FullLoadCopyWithoutLogging').output, 'errors'),\n        greater(length(activity('FullLoadCopyWithoutLogging').output.errors), 0)\n    ),\n    activity('FullLoadCopyWithoutLogging').output.errors[0].Message,\n    null\n)",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            },
                                            "RowsSkipped": {
                                                "value": {
                                                    "value": "@if(\n    contains(activity('FullLoadCopyWithoutLogging').output, 'rowsSkipped'),\n    activity('FullLoadCopyWithoutLogging').output.rowsSkipped,\n    null\n)",
                                                    "type": "Expression"
                                                },
                                                "type": "Int64"
                                            },
                                            "LogFilePath": {
                                                "value": null,
                                                "type": "String"
                                            }
                                        }
                                    },
                                    "linkedServiceName": {
                                        "referenceName": "LS_configurationDB",
                                        "type": "LinkedServiceReference"
                                    }
                                }
                            ],
                            "ifTrueActivities": [
                                {
                                    "name": "FullLoadCopyWithLogging",
                                    "description": "Copy a table from a database to the configurated Sink dynamically taking by input FwkItem, SrcPath.",
                                    "type": "Copy",
                                    "dependsOn": [],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "source": {
                                            "type": "XmlSource",
                                            "additionalColumns": {
                                                "type": "Expression",
                                                "value": "@if(\n    contains(json(pipeline().parameters.FwkItem['Params']), 'additionalColumns'),\n    json(pipeline().parameters.FwkItem['Params']).additionalColumns,\n    json('[]')\n)"
                                            },
                                            "storeSettings": {
                                                "type": "FileServerReadSettings",
                                                "recursive": true,
                                                "enablePartitionDiscovery": false
                                            },
                                            "formatSettings": {
                                                "type": "XmlReadSettings",
                                                "validationMode": "none",
                                                "detectDataType": true,
                                                "namespaces": false
                                            }
                                        },
                                        "sink": {
                                            "type": "ParquetSink",
                                            "storeSettings": {
                                                "type": "AzureBlobFSWriteSettings"
                                            },
                                            "formatSettings": {
                                                "type": "ParquetWriteSettings"
                                            }
                                        },
                                        "enableStaging": false,
                                        "enableSkipIncompatibleRow": {
                                            "value": "@if(contains(json(pipeline().parameters.FwkItem['Params']), 'enableSkipIncompatibleRow'), json(pipeline().parameters.FwkItem['Params']).enableSkipIncompatibleRow, false)",
                                            "type": "Expression"
                                        },
                                        "validateDataConsistency": true,
                                        "logSettings": {
                                            "enableCopyActivityLog": true,
                                            "copyActivityLogSettings": {
                                                "logLevel": "Warning",
                                                "enableReliableLogging": false
                                            },
                                            "logLocationSettings": {
                                                "linkedServiceName": {
                                                    "referenceName": "LS_adls",
                                                    "type": "LinkedServiceReference",
                                                    "parameters": {
                                                        "InstanceURL": {
                                                            "value": "@json(pipeline().parameters.FwkItem['Params']).logSettingsInstanceURL",
                                                            "type": "Expression"
                                                        }
                                                    }
                                                },
                                                "path": {
                                                    "value": "@json(pipeline().parameters.FwkItem['Params']).logSettingsPath",
                                                    "type": "Expression"
                                                }
                                            }
                                        },
                                        "translator": {
                                            "value": "@if(\n    contains(json(pipeline().parameters.FwkItem['Params']), 'mapping'),\n    json(pipeline().parameters.FwkItem['Params']).mapping,\n    '\"mapping\":{}'\n)",
                                            "type": "Expression"
                                        }
                                    },
                                    "inputs": [
                                        {
                                            "referenceName": "DS_FileShare_XML_Source",
                                            "type": "DatasetReference",
                                            "parameters": {
                                                "FwkItem": {
                                                    "value": "@pipeline().parameters.FwkItem",
                                                    "type": "Expression"
                                                },
                                                "ds_inputFileName": {
                                                    "value": "@pipeline().parameters.FileName",
                                                    "type": "Expression"
                                                },
                                                "ds_inputFilePath": {
                                                    "value": "@pipeline().parameters.FilePath",
                                                    "type": "Expression"
                                                }
                                            }
                                        }
                                    ],
                                    "outputs": [
                                        {
                                            "referenceName": "DS_ADLS_PRQ_Sink",
                                            "type": "DatasetReference",
                                            "parameters": {
                                                "InstanceURL": {
                                                    "value": "@pipeline().parameters.FwkItem['SinkInstanceURL']",
                                                    "type": "Expression"
                                                },
                                                "FullPath": {
                                                    "value": "@concat(pipeline().parameters.FwkItem['SinkPath'], \n\t'/',\n\tformatDateTime(pipeline().parameters.PL_01TriggerTime,'yyyy'),\n\tformatDateTime(pipeline().parameters.PL_01TriggerTime,'MM'),\n\tformatDateTime(pipeline().parameters.PL_01TriggerTime,'dd'),\n\tformatDateTime(pipeline().parameters.PL_01TriggerTime,'HH'),\n\tformatDateTime(pipeline().parameters.PL_01TriggerTime,'mm'),\n\t'_',\n\tpipeline().parameters.FwkItem['EntityName'],\n\t'.snappy.parquet'\n)",
                                                    "type": "Expression"
                                                }
                                            }
                                        }
                                    ]
                                },
                                {
                                    "name": "spu_IngtLogUpdate_succeeded",
                                    "description": "Executes the SP spu_IngtLogUpdate to update record into IngtLog table with the execution module information.",
                                    "type": "SqlServerStoredProcedure",
                                    "dependsOn": [
                                        {
                                            "activity": "FullLoadCopyWithLogging",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "storedProcedureName": "[[dbo].[spu_IngtLogUpdate]",
                                        "storedProcedureParameters": {
                                            "IngtOutputId": {
                                                "value": {
                                                    "value": "@pipeline().parameters.FwkItem['IngtOutputId']",
                                                    "type": "Expression"
                                                },
                                                "type": "Int32"
                                            },
                                            "EntRunId": {
                                                "value": {
                                                    "value": "@pipeline().parameters.EntRunId",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            },
                                            "ModuleRunId": {
                                                "value": {
                                                    "value": "@pipeline().parameters.ModuleRunId",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            },
                                            "PipelineStatus": {
                                                "value": {
                                                    "value": "Succeeded",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            },
                                            "RowsRead": {
                                                "value": {
                                                    "value": "@if(\n    contains(activity('FullLoadCopyWithLogging').output, 'rowsRead'),\n    activity('FullLoadCopyWithLogging').output.rowsRead,\n    null\n)",
                                                    "type": "Expression"
                                                },
                                                "type": "Int64"
                                            },
                                            "RowsCopied": {
                                                "value": {
                                                    "value": "@if(\n    contains(activity('FullLoadCopyWithLogging').output, 'rowsCopied'),\n    activity('FullLoadCopyWithLogging').output.rowsCopied,\n    null\n)",
                                                    "type": "Expression"
                                                },
                                                "type": "Int64"
                                            },
                                            "CopyDuration": {
                                                "value": {
                                                    "value": "@if(\n    contains(activity('FullLoadCopyWithLogging').output, 'copyDuration'),\n    activity('FullLoadCopyWithLogging').output.copyDuration,\n    null\n)",
                                                    "type": "Expression"
                                                },
                                                "type": "Double"
                                            },
                                            "Throughput": {
                                                "value": {
                                                    "value": "@if(\n    contains(activity('FullLoadCopyWithLogging').output, 'throughput'),\n    activity('FullLoadCopyWithLogging').output.throughput,\n    null\n)",
                                                    "type": "Expression"
                                                },
                                                "type": "Double"
                                            },
                                            "ErrorMessage": {
                                                "value": null,
                                                "type": "String"
                                            },
                                            "RowsSkipped": {
                                                "value": {
                                                    "value": "@if(\n    contains(activity('FullLoadCopyWithLogging').output, 'rowsSkipped'),\n    activity('FullLoadCopyWithLogging').output.rowsSkipped,\n    null\n)",
                                                    "type": "Expression"
                                                },
                                                "type": "Int64"
                                            },
                                            "LogFilePath": {
                                                "value": {
                                                    "value": "@if(\n    contains(activity('FullLoadCopyWithLogging').output, 'logFilePath'),\n    activity('FullLoadCopyWithLogging').output.logFilePath,\n    null\n)",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            },
                                            "FileName": {
                                                "value": {
                                                    "value": "@if(contains(pipeline().parameters.FwkItem['Path'], '*'), pipeline().parameters.FileName, null)",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            }
                                        }
                                    },
                                    "linkedServiceName": {
                                        "referenceName": "LS_configurationDB",
                                        "type": "LinkedServiceReference"
                                    }
                                },
                                {
                                    "name": "spu_IngtLogUpdate_failed",
                                    "description": "Executes the SP spu_IngtLogUpdate to update record into IngtLog table with the execution module information.",
                                    "type": "SqlServerStoredProcedure",
                                    "dependsOn": [
                                        {
                                            "activity": "FullLoadCopyWithLogging",
                                            "dependencyConditions": [
                                                "Failed"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "storedProcedureName": "[[dbo].[spu_IngtLogUpdate]",
                                        "storedProcedureParameters": {
                                            "IngtOutputId": {
                                                "value": {
                                                    "value": "@pipeline().parameters.FwkItem['IngtOutputId']",
                                                    "type": "Expression"
                                                },
                                                "type": "Int32"
                                            },
                                            "EntRunId": {
                                                "value": {
                                                    "value": "@pipeline().parameters.EntRunId",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            },
                                            "ModuleRunId": {
                                                "value": {
                                                    "value": "@pipeline().parameters.ModuleRunId",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            },
                                            "PipelineStatus": {
                                                "value": {
                                                    "value": "Failed",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            },
                                            "RowsRead": {
                                                "value": null,
                                                "type": "Int64"
                                            },
                                            "RowsCopied": {
                                                "value": null,
                                                "type": "Int64"
                                            },
                                            "CopyDuration": {
                                                "value": null,
                                                "type": "Double"
                                            },
                                            "Throughput": {
                                                "value": null,
                                                "type": "Double"
                                            },
                                            "ErrorMessage": {
                                                "value": {
                                                    "value": "@if(\n    and(\n        contains(activity('FullLoadCopyWithLogging').output, 'errors'),\n        greater(length(activity('FullLoadCopyWithLogging').output.errors), 0)\n    ),\n    activity('FullLoadCopyWithLogging').output.errors[0].Message,\n    null\n)",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            },
                                            "RowsSkipped": {
                                                "value": {
                                                    "value": "@if(\n    contains(activity('FullLoadCopyWithLogging').output, 'rowsSkipped'),\n    activity('FullLoadCopyWithLogging').output.rowsSkipped,\n    null\n)",
                                                    "type": "Expression"
                                                },
                                                "type": "Int64"
                                            },
                                            "LogFilePath": {
                                                "value": {
                                                    "value": "@if(\n    contains(activity('FullLoadCopyWithLogging').output, 'logFilePath'),\n    activity('FullLoadCopyWithLogging').output.logFilePath,\n    null\n)",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            }
                                        }
                                    },
                                    "linkedServiceName": {
                                        "referenceName": "LS_configurationDB",
                                        "type": "LinkedServiceReference"
                                    }
                                }
                            ]
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {}
                },
                "parameters": {
                    "FwkItem": {
                        "type": "array"
                    },
                    "EntRunId": {
                        "type": "string"
                    },
                    "ModuleRunId": {
                        "type": "string"
                    },
                    "FileName": {
                        "type": "string"
                    },
                    "FilePath": {
                        "type": "string"
                    },
                    "PL_01TriggerTime": {
                        "type": "string"
                    }
                },
                "folder": {
                    "name": "01 Ingestion Module/05 FileShare"
                },
                "annotations": []
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/datasets/DS_FileShare_BIN_File')]",
                "[concat(variables('factoryId'), '/datasets/DS_FileShare_XML_Source')]",
                "[concat(variables('factoryId'), '/datasets/DS_ADLS_PRQ_Sink')]",
                "[concat(variables('factoryId'), '/linkedServices/LS_configurationDB')]",
                "[concat(variables('factoryId'), '/linkedServices/LS_adls')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/PL_ING_05_FileShareGetFiles')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "setFilePath",
                        "type": "SetVariable",
                        "dependsOn": [
                            {
                                "activity": "setFileName",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "variableName": "varFwkFilePath",
                            "value": {
                                "value": "@substring(pipeline().parameters.FwkItem['Path'], \n    0, \n    if(equals(lastindexof(pipeline().parameters.FwkItem['Path'],'/'),-1),0,lastindexof(pipeline().parameters.FwkItem['Path'],'/'))\n)",
                                "type": "Expression"
                            }
                        }
                    },
                    {
                        "name": "setFileName",
                        "description": "@dataset().FwkItem['Path']",
                        "type": "SetVariable",
                        "dependsOn": [],
                        "policy": {
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "variableName": "varFwkFileName",
                            "value": {
                                "value": "@substring(pipeline().parameters.FwkItem['Path'], \n    add(lastindexof(pipeline().parameters.FwkItem['Path'],'/'), 1), \n    add(add(length(pipeline().parameters.FwkItem['Path']), mul(lastindexof(pipeline().parameters.FwkItem['Path'],'/'),-1)), -1\n    )\n)",
                                "type": "Expression"
                            }
                        }
                    },
                    {
                        "name": "setFwkFileIfWildcardPosition",
                        "type": "SetVariable",
                        "dependsOn": [
                            {
                                "activity": "setFilePath",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "variableName": "varFwkFileIfWildcardPosition",
                            "value": {
                                "value": "@string(if(equals(indexOf(variables('varFwkFileName'), '*'),-1),0,1))",
                                "type": "Expression"
                            }
                        }
                    },
                    {
                        "name": "setOutput",
                        "type": "SetVariable",
                        "dependsOn": [
                            {
                                "activity": "loopThroughMatchingFileNames",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "variableName": "pipelineReturnValue",
                            "value": [
                                {
                                    "key": "outputFileName",
                                    "value": {
                                        "type": "Expression",
                                        "content": "@variables('varFileName')"
                                    }
                                },
                                {
                                    "key": "outputFilePath",
                                    "value": {
                                        "type": "Expression",
                                        "content": "@variables('varFwkFilePath')"
                                    }
                                }
                            ],
                            "setSystemVariable": true
                        }
                    },
                    {
                        "name": "switchWildcardPresent",
                        "type": "Switch",
                        "dependsOn": [
                            {
                                "activity": "setFwkFileIfWildcardPosition",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "on": {
                                "value": "@variables('varFwkFileIfWildcardPosition')",
                                "type": "Expression"
                            },
                            "cases": [
                                {
                                    "value": "0",
                                    "activities": [
                                        {
                                            "name": "getListOfFileNamesFile",
                                            "type": "GetMetadata",
                                            "dependsOn": [],
                                            "policy": {
                                                "timeout": "0.12:00:00",
                                                "retry": 0,
                                                "retryIntervalInSeconds": 30,
                                                "secureOutput": false,
                                                "secureInput": false
                                            },
                                            "userProperties": [],
                                            "typeProperties": {
                                                "dataset": {
                                                    "referenceName": "DS_FileShare_BIN_Folder",
                                                    "type": "DatasetReference",
                                                    "parameters": {
                                                        "FwkItem": {
                                                            "value": "@pipeline().parameters.FwkItem",
                                                            "type": "Expression"
                                                        },
                                                        "FwkPath": {
                                                            "value": "@variables('varFwkFilePath')",
                                                            "type": "Expression"
                                                        }
                                                    }
                                                },
                                                "fieldList": [
                                                    "childItems"
                                                ],
                                                "storeSettings": {
                                                    "type": "FileServerReadSettings",
                                                    "recursive": true,
                                                    "enablePartitionDiscovery": false
                                                },
                                                "formatSettings": {
                                                    "type": "BinaryReadSettings"
                                                }
                                            }
                                        },
                                        {
                                            "name": "getListOfFileNamesFilterFile",
                                            "type": "Filter",
                                            "dependsOn": [
                                                {
                                                    "activity": "getListOfFileNamesFile",
                                                    "dependencyConditions": [
                                                        "Succeeded"
                                                    ]
                                                }
                                            ],
                                            "userProperties": [],
                                            "typeProperties": {
                                                "items": {
                                                    "value": "@activity('getListOfFileNamesFile').output.childItems",
                                                    "type": "Expression"
                                                },
                                                "condition": {
                                                    "value": "@and(equals(toLower(item().name), toLower(variables('varFwkFileName'))), equals(item().type,'File'))",
                                                    "type": "Expression"
                                                }
                                            }
                                        },
                                        {
                                            "name": "setMatchingFileNamesFile",
                                            "type": "SetVariable",
                                            "dependsOn": [
                                                {
                                                    "activity": "getListOfFileNamesFilterFile",
                                                    "dependencyConditions": [
                                                        "Succeeded"
                                                    ]
                                                }
                                            ],
                                            "policy": {
                                                "secureOutput": false,
                                                "secureInput": false
                                            },
                                            "userProperties": [],
                                            "typeProperties": {
                                                "variableName": "varMatchingFileNames",
                                                "value": {
                                                    "value": "@activity('getListOfFileNamesFilterFile').output.value",
                                                    "type": "Expression"
                                                }
                                            }
                                        }
                                    ]
                                },
                                {
                                    "value": "1",
                                    "activities": [
                                        {
                                            "name": "getListOfFileNames",
                                            "type": "GetMetadata",
                                            "dependsOn": [
                                                {
                                                    "activity": "setFwkFileRight",
                                                    "dependencyConditions": [
                                                        "Succeeded"
                                                    ]
                                                }
                                            ],
                                            "policy": {
                                                "timeout": "0.12:00:00",
                                                "retry": 0,
                                                "retryIntervalInSeconds": 30,
                                                "secureOutput": false,
                                                "secureInput": false
                                            },
                                            "userProperties": [],
                                            "typeProperties": {
                                                "dataset": {
                                                    "referenceName": "DS_FileShare_BIN_Folder",
                                                    "type": "DatasetReference",
                                                    "parameters": {
                                                        "FwkItem": {
                                                            "value": "@pipeline().parameters.FwkItem",
                                                            "type": "Expression"
                                                        },
                                                        "FwkPath": {
                                                            "value": "@variables('varFwkFilePath')",
                                                            "type": "Expression"
                                                        }
                                                    }
                                                },
                                                "fieldList": [
                                                    "childItems"
                                                ],
                                                "storeSettings": {
                                                    "type": "FileServerReadSettings",
                                                    "recursive": true,
                                                    "enablePartitionDiscovery": false
                                                },
                                                "formatSettings": {
                                                    "type": "BinaryReadSettings"
                                                }
                                            }
                                        },
                                        {
                                            "name": "setFwkFileLeft",
                                            "type": "SetVariable",
                                            "dependsOn": [],
                                            "policy": {
                                                "secureOutput": false,
                                                "secureInput": false
                                            },
                                            "userProperties": [],
                                            "typeProperties": {
                                                "variableName": "varFwkFileLeft",
                                                "value": {
                                                    "value": "@split(variables('varFwkFileName'), '*')[0]",
                                                    "type": "Expression"
                                                }
                                            }
                                        },
                                        {
                                            "name": "setFwkFileRight",
                                            "type": "SetVariable",
                                            "dependsOn": [
                                                {
                                                    "activity": "setFwkFileLeft",
                                                    "dependencyConditions": [
                                                        "Succeeded"
                                                    ]
                                                }
                                            ],
                                            "policy": {
                                                "secureOutput": false,
                                                "secureInput": false
                                            },
                                            "userProperties": [],
                                            "typeProperties": {
                                                "variableName": "varFwkFileRight",
                                                "value": {
                                                    "value": "@split(variables('varFwkFileName'), '*')[int(variables('varFwkFileIfWildcardPosition'))]",
                                                    "type": "Expression"
                                                }
                                            }
                                        },
                                        {
                                            "name": "getListOfFileNamesFilter",
                                            "type": "Filter",
                                            "dependsOn": [
                                                {
                                                    "activity": "getListOfFileNames",
                                                    "dependencyConditions": [
                                                        "Succeeded"
                                                    ]
                                                }
                                            ],
                                            "userProperties": [],
                                            "typeProperties": {
                                                "items": {
                                                    "value": "@activity('getListOfFileNames').output.childItems",
                                                    "type": "Expression"
                                                },
                                                "condition": {
                                                    "value": "@and(and(startswith(item().name, variables('varFwkFileLeft')), endswith(item().name, variables('varFwkFileRight'))\n    ),\n        equals(item().type,'File'))",
                                                    "type": "Expression"
                                                }
                                            }
                                        },
                                        {
                                            "name": "setMatchingFileNames",
                                            "type": "SetVariable",
                                            "dependsOn": [
                                                {
                                                    "activity": "getListOfFileNamesFilter",
                                                    "dependencyConditions": [
                                                        "Succeeded"
                                                    ]
                                                }
                                            ],
                                            "policy": {
                                                "secureOutput": false,
                                                "secureInput": false
                                            },
                                            "userProperties": [],
                                            "typeProperties": {
                                                "variableName": "varMatchingFileNames",
                                                "value": {
                                                    "value": "@activity('getListOfFileNamesFilter').output.value",
                                                    "type": "Expression"
                                                }
                                            }
                                        }
                                    ]
                                }
                            ]
                        }
                    },
                    {
                        "name": "loopThroughMatchingFileNames",
                        "type": "ForEach",
                        "dependsOn": [
                            {
                                "activity": "Check for ingestAllFiles",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "items": {
                                "value": "@variables('varIngestMatchingFileNames')",
                                "type": "Expression"
                            },
                            "isSequential": true,
                            "activities": [
                                {
                                    "name": "getLastModifiedDateOfTheCurrentIterationFile",
                                    "type": "GetMetadata",
                                    "dependsOn": [],
                                    "policy": {
                                        "timeout": "0.12:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "dataset": {
                                            "referenceName": "DS_FileShare_BIN_File",
                                            "type": "DatasetReference",
                                            "parameters": {
                                                "FwkItem": {
                                                    "value": "@pipeline().parameters.FwkItem",
                                                    "type": "Expression"
                                                },
                                                "ds_inputFileName": {
                                                    "value": "@item().name",
                                                    "type": "Expression"
                                                },
                                                "ds_inputFilePath": {
                                                    "value": "@variables('varFwkFilePath')",
                                                    "type": "Expression"
                                                }
                                            }
                                        },
                                        "fieldList": [
                                            "itemName",
                                            "lastModified"
                                        ],
                                        "storeSettings": {
                                            "type": "FileServerReadSettings",
                                            "recursive": true,
                                            "enablePartitionDiscovery": false
                                        },
                                        "formatSettings": {
                                            "type": "BinaryReadSettings"
                                        }
                                    }
                                },
                                {
                                    "name": "conditionToCheckIfFileDateGreaterThanSetDate",
                                    "type": "IfCondition",
                                    "dependsOn": [
                                        {
                                            "activity": "getLastModifiedDateOfTheCurrentIterationFile",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "userProperties": [],
                                    "typeProperties": {
                                        "expression": {
                                            "value": "@greater(ticks(activity('getLastModifiedDateOfTheCurrentIterationFile').output.lastModified),ticks(formatDateTime(variables('varReferenceDateTime'))))",
                                            "type": "Expression"
                                        },
                                        "ifTrueActivities": [
                                            {
                                                "name": "setFileLastModifiedDate",
                                                "type": "SetVariable",
                                                "dependsOn": [],
                                                "policy": {
                                                    "secureOutput": false,
                                                    "secureInput": false
                                                },
                                                "userProperties": [],
                                                "typeProperties": {
                                                    "variableName": "varReferenceDateTime",
                                                    "value": {
                                                        "value": "@activity('getLastModifiedDateOfTheCurrentIterationFile').output.lastModified",
                                                        "type": "Expression"
                                                    }
                                                }
                                            },
                                            {
                                                "name": "setLatestFileName",
                                                "type": "SetVariable",
                                                "dependsOn": [
                                                    {
                                                        "activity": "setFileLastModifiedDate",
                                                        "dependencyConditions": [
                                                            "Succeeded"
                                                        ]
                                                    }
                                                ],
                                                "policy": {
                                                    "secureOutput": false,
                                                    "secureInput": false
                                                },
                                                "userProperties": [],
                                                "typeProperties": {
                                                    "variableName": "varFileName",
                                                    "value": {
                                                        "value": "@createArray(item())",
                                                        "type": "Expression"
                                                    }
                                                }
                                            }
                                        ]
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "name": "Check for ingestAllFiles",
                        "type": "IfCondition",
                        "dependsOn": [
                            {
                                "activity": "switchWildcardPresent",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "expression": {
                                "value": "@if(contains(pipeline().parameters.FwkItem, 'Params'), \n    if(contains(json(pipeline().parameters.FwkItem['Params']), 'ingestAllMatchingFiles'), \n        bool(json(pipeline().parameters.FwkItem['Params'])['ingestAllMatchingFiles']), \n        false\n    ), \n    false\n)",
                                "type": "Expression"
                            },
                            "ifFalseActivities": [
                                {
                                    "name": "Set varIngestMatchingFileNames",
                                    "type": "SetVariable",
                                    "dependsOn": [],
                                    "policy": {
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "variableName": "varIngestMatchingFileNames",
                                        "value": {
                                            "value": "@variables('varMatchingFileNames')",
                                            "type": "Expression"
                                        }
                                    }
                                }
                            ],
                            "ifTrueActivities": [
                                {
                                    "name": "Set output",
                                    "type": "SetVariable",
                                    "dependsOn": [],
                                    "policy": {
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "variableName": "varFileName",
                                        "value": {
                                            "value": "@variables('varMatchingFileNames')",
                                            "type": "Expression"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {}
                },
                "parameters": {
                    "FwkItem": {
                        "type": "array"
                    }
                },
                "variables": {
                    "varFwkFilePath": {
                        "type": "String"
                    },
                    "varFwkFileName": {
                        "type": "String"
                    },
                    "varFwkFileLeft": {
                        "type": "String"
                    },
                    "varFwkFileRight": {
                        "type": "String"
                    },
                    "varFwkFileIfWildcardPosition": {
                        "type": "String"
                    },
                    "varReferenceDateTime": {
                        "type": "String",
                        "defaultValue": "1900-01-01 00:00:00"
                    },
                    "varFileName": {
                        "type": "Array"
                    },
                    "varMatchingFileNames": {
                        "type": "Array",
                        "defaultValue": []
                    },
                    "varIngestMatchingFileNames": {
                        "type": "Array",
                        "defaultValue": []
                    }
                },
                "folder": {
                    "name": "01 Ingestion Module/05 FileShare"
                },
                "annotations": [],
                "lastPublishTime": "2023-07-06T08:29:14Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/datasets/DS_FileShare_BIN_File')]",
                "[concat(variables('factoryId'), '/datasets/DS_FileShare_BIN_Folder')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/PL_ING_05_FileShareLoad')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Switch_Format",
                        "description": "Evaluates the input value ‘Format’ corresponding to a case that matches the condition.",
                        "type": "Switch",
                        "dependsOn": [],
                        "userProperties": [],
                        "typeProperties": {
                            "on": {
                                "value": "@string(pipeline().parameters.FwkItem['Format'])",
                                "type": "Expression"
                            },
                            "cases": [
                                {
                                    "value": "CSV",
                                    "activities": [
                                        {
                                            "name": "Execute PL_ING_05_01_FileShareCSVCheck",
                                            "type": "ExecutePipeline",
                                            "dependsOn": [],
                                            "policy": {
                                                "secureInput": false
                                            },
                                            "userProperties": [],
                                            "typeProperties": {
                                                "pipeline": {
                                                    "referenceName": "PL_ING_05_01_FileShareCSVCheck",
                                                    "type": "PipelineReference"
                                                },
                                                "waitOnCompletion": true,
                                                "parameters": {
                                                    "FwkItem": {
                                                        "value": "@pipeline().parameters.FwkItem",
                                                        "type": "Expression"
                                                    },
                                                    "PL_01TriggerTime": {
                                                        "value": "@pipeline().parameters.PL_01TriggerTime",
                                                        "type": "Expression"
                                                    },
                                                    "EntRunId": {
                                                        "value": "@pipeline().parameters.EntRunId",
                                                        "type": "Expression"
                                                    },
                                                    "ModuleRunId": {
                                                        "value": "@pipeline().parameters.ModuleRunId",
                                                        "type": "Expression"
                                                    }
                                                }
                                            }
                                        }
                                    ]
                                },
                                {
                                    "value": "EXCEL",
                                    "activities": [
                                        {
                                            "name": "Execute PL_ING_05_02_FileShareExcelCheck",
                                            "type": "ExecutePipeline",
                                            "dependsOn": [],
                                            "policy": {
                                                "secureInput": false
                                            },
                                            "userProperties": [],
                                            "typeProperties": {
                                                "pipeline": {
                                                    "referenceName": "PL_ING_05_02_FileShareExcelCheck",
                                                    "type": "PipelineReference"
                                                },
                                                "waitOnCompletion": true,
                                                "parameters": {
                                                    "FwkItem": {
                                                        "value": "@pipeline().parameters.FwkItem",
                                                        "type": "Expression"
                                                    },
                                                    "PL_01TriggerTime": {
                                                        "value": "@pipeline().parameters.PL_01TriggerTime",
                                                        "type": "Expression"
                                                    },
                                                    "EntRunId": {
                                                        "value": "@pipeline().parameters.EntRunId",
                                                        "type": "Expression"
                                                    },
                                                    "ModuleRunId": {
                                                        "value": "@pipeline().parameters.ModuleRunId",
                                                        "type": "Expression"
                                                    }
                                                }
                                            }
                                        }
                                    ]
                                },
                                {
                                    "value": "XML",
                                    "activities": [
                                        {
                                            "name": "Execute PL_ING_05_03_FileShareXMLCheck",
                                            "type": "ExecutePipeline",
                                            "dependsOn": [],
                                            "policy": {
                                                "secureInput": false
                                            },
                                            "userProperties": [],
                                            "typeProperties": {
                                                "pipeline": {
                                                    "referenceName": "PL_ING_05_03_FileShareXMLCheck",
                                                    "type": "PipelineReference"
                                                },
                                                "waitOnCompletion": true,
                                                "parameters": {
                                                    "FwkItem": {
                                                        "value": "@pipeline().parameters.FwkItem",
                                                        "type": "Expression"
                                                    },
                                                    "PL_01TriggerTime": {
                                                        "value": "@pipeline().parameters.PL_01TriggerTime",
                                                        "type": "Expression"
                                                    },
                                                    "EntRunId": {
                                                        "value": "@pipeline().parameters.EntRunId",
                                                        "type": "Expression"
                                                    },
                                                    "ModuleRunId": {
                                                        "value": "@pipeline().parameters.ModuleRunId",
                                                        "type": "Expression"
                                                    }
                                                }
                                            }
                                        }
                                    ]
                                }
                            ]
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {}
                },
                "parameters": {
                    "FwkItem": {
                        "type": "array"
                    },
                    "PL_01TriggerTime": {
                        "type": "string"
                    },
                    "EntRunId": {
                        "type": "string"
                    },
                    "ModuleRunId": {
                        "type": "string"
                    }
                },
                "folder": {
                    "name": "01 Ingestion Module/05 FileShare"
                },
                "annotations": [],
                "lastPublishTime": "2023-07-06T08:29:17Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/pipelines/PL_ING_05_01_FileShareCSVCheck')]",
                "[concat(variables('factoryId'), '/pipelines/PL_ING_05_02_FileShareExcelCheck')]",
                "[concat(variables('factoryId'), '/pipelines/PL_ING_05_03_FileShareXMLCheck')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/PL_ING_06_01_SFTPCSVCheck')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "IfMissingFile",
                        "type": "IfCondition",
                        "dependsOn": [
                            {
                                "activity": "Select CSV files by wildcard",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "expression": {
                                "value": "@equals(length(activity('Select CSV files by wildcard').output.pipelineReturnValue['outputFileName']), 0)",
                                "type": "Expression"
                            },
                            "ifFalseActivities": [
                                {
                                    "name": "Execute SFTPIngestAllCSVFiles",
                                    "type": "ExecutePipeline",
                                    "dependsOn": [],
                                    "policy": {
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "pipeline": {
                                            "referenceName": "PL_ING_06_01_SFTPIngestAllCSVFiles",
                                            "type": "PipelineReference"
                                        },
                                        "waitOnCompletion": true,
                                        "parameters": {
                                            "FileNames": {
                                                "value": "@activity('Select CSV files by wildcard').output.pipelineReturnValue['outputFileName']",
                                                "type": "Expression"
                                            },
                                            "FwkItem": {
                                                "value": "@pipeline().parameters.FwkItem",
                                                "type": "Expression"
                                            },
                                            "EntRunId": {
                                                "value": "@pipeline().parameters.EntRunId",
                                                "type": "Expression"
                                            },
                                            "ModuleRunId": {
                                                "value": "@pipeline().parameters.ModuleRunId",
                                                "type": "Expression"
                                            },
                                            "FilePath": {
                                                "value": "@activity('Select CSV files by wildcard').output.pipelineReturnValue['outputFilePath']",
                                                "type": "Expression"
                                            },
                                            "PL_01TriggerTime": {
                                                "value": "@pipeline().parameters.PL_01TriggerTime",
                                                "type": "Expression"
                                            }
                                        }
                                    }
                                }
                            ],
                            "ifTrueActivities": [
                                {
                                    "name": "spi_IngtLogInsertSkipped",
                                    "description": "Executes the SP spi_IngtLogInsert to insert record into IngtLog table with the execution module information.",
                                    "type": "SqlServerStoredProcedure",
                                    "dependsOn": [],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "storedProcedureName": "[[dbo].[spi_IngtLogInsert]",
                                        "storedProcedureParameters": {
                                            "IngtOutputId": {
                                                "value": {
                                                    "value": "@pipeline().parameters.FwkItem['IngtOutputId']",
                                                    "type": "Expression"
                                                },
                                                "type": "Int32"
                                            },
                                            "EntRunId": {
                                                "value": {
                                                    "value": "@pipeline().parameters.EntRunId",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            },
                                            "ModuleRunId": {
                                                "value": {
                                                    "value": "@pipeline().parameters.ModuleRunId",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            },
                                            "PipelineStatus": {
                                                "value": {
                                                    "value": "Skipped - Missing source file",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            },
                                            "StartDate": {
                                                "value": {
                                                    "value": "@formatdatetime(pipeline().TriggerTime)",
                                                    "type": "Expression"
                                                },
                                                "type": "Datetime"
                                            },
                                            "RowsRead": {
                                                "value": null,
                                                "type": "Int64"
                                            },
                                            "RowsCopied": {
                                                "value": null,
                                                "type": "Int64"
                                            },
                                            "CopyDuration": {
                                                "value": null,
                                                "type": "Double"
                                            },
                                            "Throughput": {
                                                "value": null,
                                                "type": "Double"
                                            },
                                            "ErrorMessage": {
                                                "value": null,
                                                "type": "String"
                                            },
                                            "FileName": {
                                                "value": null,
                                                "type": "String"
                                            }
                                        }
                                    },
                                    "linkedServiceName": {
                                        "referenceName": "LS_configurationDB",
                                        "type": "LinkedServiceReference"
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "name": "Select CSV files by wildcard",
                        "type": "ExecutePipeline",
                        "dependsOn": [],
                        "policy": {
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "PL_ING_06_SFTPGetFiles",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {
                                "FwkItem": {
                                    "value": "@pipeline().parameters.FwkItem",
                                    "type": "Expression"
                                }
                            }
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {}
                },
                "parameters": {
                    "FwkItem": {
                        "type": "array"
                    },
                    "PL_01TriggerTime": {
                        "type": "string"
                    },
                    "EntRunId": {
                        "type": "string"
                    },
                    "ModuleRunId": {
                        "type": "string"
                    }
                },
                "variables": {
                    "varIngestMatchingFileNames": {
                        "type": "Array",
                        "defaultValue": []
                    }
                },
                "folder": {
                    "name": "01 Ingestion Module/06 SFTP"
                },
                "annotations": [],
                "lastPublishTime": "2023-07-06T08:29:16Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/pipelines/PL_ING_06_SFTPGetFiles')]",
                "[concat(variables('factoryId'), '/pipelines/PL_ING_06_01_SFTPIngestAllCSVFiles')]",
                "[concat(variables('factoryId'), '/linkedServices/LS_configurationDB')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/PL_ING_06_01_SFTPCSVLoad')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "IF archivePath Defined",
                        "description": "if the archive path is defined then copy source file with timestamp prefix to archive folder",
                        "type": "IfCondition",
                        "dependsOn": [
                            {
                                "activity": "If Logging Required",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "expression": {
                                "value": "@empty(pipeline().parameters.FwkItem['ArchivePath'])",
                                "type": "Expression"
                            },
                            "ifFalseActivities": [
                                {
                                    "name": "Move to archivePath",
                                    "type": "Copy",
                                    "dependsOn": [],
                                    "policy": {
                                        "timeout": "0.12:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "source": {
                                            "type": "BinarySource",
                                            "storeSettings": {
                                                "type": "SftpReadSettings",
                                                "recursive": true,
                                                "deleteFilesAfterCompletion": true,
                                                "disableChunking": true
                                            },
                                            "formatSettings": {
                                                "type": "BinaryReadSettings"
                                            }
                                        },
                                        "sink": {
                                            "type": "BinarySink",
                                            "storeSettings": {
                                                "type": "SftpWriteSettings",
                                                "operationTimeout": "01:00:00",
                                                "useTempFileRename": true
                                            }
                                        },
                                        "enableStaging": false
                                    },
                                    "inputs": [
                                        {
                                            "referenceName": "DS_SFTP_BIN_File",
                                            "type": "DatasetReference",
                                            "parameters": {
                                                "FwkItem": {
                                                    "value": "@pipeline().parameters.FwkItem",
                                                    "type": "Expression"
                                                },
                                                "ds_inputFileName": {
                                                    "value": "@pipeline().parameters.FileName",
                                                    "type": "Expression"
                                                },
                                                "ds_inputFilePath": {
                                                    "value": "@pipeline().parameters.FilePath",
                                                    "type": "Expression"
                                                }
                                            }
                                        }
                                    ],
                                    "outputs": [
                                        {
                                            "referenceName": "DS_SFTP_BIN_File",
                                            "type": "DatasetReference",
                                            "parameters": {
                                                "FwkItem": {
                                                    "value": "@pipeline().parameters.FwkItem",
                                                    "type": "Expression"
                                                },
                                                "ds_inputFileName": {
                                                    "value": "@concat(\n\tformatDateTime(pipeline().parameters.PL_01TriggerTime,'yyyy'),\n\tformatDateTime(pipeline().parameters.PL_01TriggerTime,'MM'),\n\tformatDateTime(pipeline().parameters.PL_01TriggerTime,'dd'),\n\tformatDateTime(pipeline().parameters.PL_01TriggerTime,'HH'),\n\tformatDateTime(pipeline().parameters.PL_01TriggerTime,'mm'),\n\t'_',\n\tpipeline().parameters.FileName\n)",
                                                    "type": "Expression"
                                                },
                                                "ds_inputFilePath": {
                                                    "value": "@pipeline().parameters.FwkItem['ArchivePath']",
                                                    "type": "Expression"
                                                }
                                            }
                                        }
                                    ]
                                }
                            ]
                        }
                    },
                    {
                        "name": "If Logging Required",
                        "type": "IfCondition",
                        "dependsOn": [],
                        "userProperties": [],
                        "typeProperties": {
                            "expression": {
                                "value": "@if(and(contains(json(pipeline().parameters.FwkItem['Params']), 'logSettingsInstanceURL'), contains(json(pipeline().parameters.FwkItem['Params']), 'logSettingsPath')), true, false)",
                                "type": "Expression"
                            },
                            "ifFalseActivities": [
                                {
                                    "name": "FullLoadCopyWithoutLogging",
                                    "description": "Copy a table from a database to the configurated Sink dynamically taking by input FwkItem, SrcPath.",
                                    "type": "Copy",
                                    "dependsOn": [],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "source": {
                                            "type": "DelimitedTextSource",
                                            "additionalColumns": {
                                                "type": "Expression",
                                                "value": "@if(\n    contains(json(pipeline().parameters.FwkItem['Params']), 'additionalColumns'),\n    json(pipeline().parameters.FwkItem['Params']).additionalColumns,\n    json('[]')\n)"
                                            },
                                            "storeSettings": {
                                                "type": "SftpReadSettings",
                                                "recursive": true,
                                                "enablePartitionDiscovery": false,
                                                "disableChunking": false
                                            },
                                            "formatSettings": {
                                                "type": "DelimitedTextReadSettings",
                                                "skipLineCount": {
                                                    "value": "@json(pipeline().parameters.FwkItem['Params']).skipLineCount",
                                                    "type": "Expression"
                                                }
                                            }
                                        },
                                        "sink": {
                                            "type": "ParquetSink",
                                            "storeSettings": {
                                                "type": "AzureBlobFSWriteSettings"
                                            },
                                            "formatSettings": {
                                                "type": "ParquetWriteSettings"
                                            }
                                        },
                                        "enableStaging": false,
                                        "enableSkipIncompatibleRow": {
                                            "value": "@if(contains(json(pipeline().parameters.FwkItem['Params']), 'enableSkipIncompatibleRow'), json(pipeline().parameters.FwkItem['Params']).enableSkipIncompatibleRow, false)",
                                            "type": "Expression"
                                        },
                                        "translator": {
                                            "value": "@if(\n    contains(json(pipeline().parameters.FwkItem['Params']), 'mapping'),\n    json(pipeline().parameters.FwkItem['Params']).mapping,\n    '\"mapping\":{}'\n)",
                                            "type": "Expression"
                                        }
                                    },
                                    "inputs": [
                                        {
                                            "referenceName": "DS_SFTP_CSV_Source",
                                            "type": "DatasetReference",
                                            "parameters": {
                                                "FwkItem": {
                                                    "value": "@pipeline().parameters.FwkItem",
                                                    "type": "Expression"
                                                },
                                                "ds_inputFileName": {
                                                    "value": "@pipeline().parameters.FileName",
                                                    "type": "Expression"
                                                },
                                                "ds_inputFilePath": {
                                                    "value": "@pipeline().parameters.FilePath",
                                                    "type": "Expression"
                                                }
                                            }
                                        }
                                    ],
                                    "outputs": [
                                        {
                                            "referenceName": "DS_ADLS_PRQ_Sink",
                                            "type": "DatasetReference",
                                            "parameters": {
                                                "InstanceURL": {
                                                    "value": "@pipeline().parameters.FwkItem['SinkInstanceURL']",
                                                    "type": "Expression"
                                                },
                                                "FullPath": {
                                                    "value": "@concat(pipeline().parameters.FwkItem['SinkPath'], \n\t'/',\n\tformatDateTime(pipeline().parameters.PL_01TriggerTime,'yyyy'),\n\tformatDateTime(pipeline().parameters.PL_01TriggerTime,'MM'),\n\tformatDateTime(pipeline().parameters.PL_01TriggerTime,'dd'),\n\tformatDateTime(pipeline().parameters.PL_01TriggerTime,'HH'),\n\tformatDateTime(pipeline().parameters.PL_01TriggerTime,'mm'),\n\t'_',\n\tutcnow(),\n\t'_',\n\tpipeline().parameters.FwkItem['EntityName'],\n\t'.snappy.parquet'\n)",
                                                    "type": "Expression"
                                                }
                                            }
                                        }
                                    ]
                                },
                                {
                                    "name": "spu_IngtLogUpdate_succeeded2",
                                    "description": "Executes the SP spu_IngtLogUpdate to update record into IngtLog table with the execution module information.",
                                    "type": "SqlServerStoredProcedure",
                                    "dependsOn": [
                                        {
                                            "activity": "FullLoadCopyWithoutLogging",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "storedProcedureName": "[[dbo].[spu_IngtLogUpdate]",
                                        "storedProcedureParameters": {
                                            "IngtOutputId": {
                                                "value": {
                                                    "value": "@pipeline().parameters.FwkItem['IngtOutputId']",
                                                    "type": "Expression"
                                                },
                                                "type": "Int32"
                                            },
                                            "EntRunId": {
                                                "value": {
                                                    "value": "@pipeline().parameters.EntRunId",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            },
                                            "ModuleRunId": {
                                                "value": {
                                                    "value": "@pipeline().parameters.ModuleRunId",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            },
                                            "PipelineStatus": {
                                                "value": {
                                                    "value": "Succeeded",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            },
                                            "RowsRead": {
                                                "value": {
                                                    "value": "@if(\n    contains(activity('FullLoadCopyWithoutLogging').output, 'rowsRead'),\n    activity('FullLoadCopyWithoutLogging').output.rowsRead,\n    null\n)",
                                                    "type": "Expression"
                                                },
                                                "type": "Int64"
                                            },
                                            "RowsCopied": {
                                                "value": {
                                                    "value": "@if(\n    contains(activity('FullLoadCopyWithoutLogging').output, 'rowsCopied'),\n    activity('FullLoadCopyWithoutLogging').output.rowsCopied,\n    null\n)",
                                                    "type": "Expression"
                                                },
                                                "type": "Int64"
                                            },
                                            "CopyDuration": {
                                                "value": {
                                                    "value": "@if(\n    contains(activity('FullLoadCopyWithoutLogging').output, 'copyDuration'),\n    activity('FullLoadCopyWithoutLogging').output.copyDuration,\n    null\n)",
                                                    "type": "Expression"
                                                },
                                                "type": "Double"
                                            },
                                            "Throughput": {
                                                "value": {
                                                    "value": "@if(\n    contains(activity('FullLoadCopyWithoutLogging').output, 'throughput'),\n    activity('FullLoadCopyWithoutLogging').output.throughput,\n    null\n)",
                                                    "type": "Expression"
                                                },
                                                "type": "Double"
                                            },
                                            "ErrorMessage": {
                                                "value": null,
                                                "type": "String"
                                            },
                                            "RowsSkipped": {
                                                "value": {
                                                    "value": "@if(\n    contains(activity('FullLoadCopyWithoutLogging').output, 'rowsSkipped'),\n    activity('FullLoadCopyWithoutLogging').output.rowsSkipped,\n    null\n)",
                                                    "type": "Expression"
                                                },
                                                "type": "Int64"
                                            },
                                            "LogFilePath": {
                                                "value": null,
                                                "type": "String"
                                            },
                                            "FileName": {
                                                "value": {
                                                    "value": "@if(contains(pipeline().parameters.FwkItem['Path'], '*'), pipeline().parameters.FileName, null)",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            }
                                        }
                                    },
                                    "linkedServiceName": {
                                        "referenceName": "LS_configurationDB",
                                        "type": "LinkedServiceReference"
                                    }
                                },
                                {
                                    "name": "spu_IngtLogUpdate_failed2",
                                    "description": "Executes the SP spu_IngtLogUpdate to update record into IngtLog table with the execution module information.",
                                    "type": "SqlServerStoredProcedure",
                                    "dependsOn": [
                                        {
                                            "activity": "FullLoadCopyWithoutLogging",
                                            "dependencyConditions": [
                                                "Failed"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "storedProcedureName": "[[dbo].[spu_IngtLogUpdate]",
                                        "storedProcedureParameters": {
                                            "IngtOutputId": {
                                                "value": {
                                                    "value": "@pipeline().parameters.FwkItem['IngtOutputId']",
                                                    "type": "Expression"
                                                },
                                                "type": "Int32"
                                            },
                                            "EntRunId": {
                                                "value": {
                                                    "value": "@pipeline().parameters.EntRunId",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            },
                                            "ModuleRunId": {
                                                "value": {
                                                    "value": "@pipeline().parameters.ModuleRunId",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            },
                                            "PipelineStatus": {
                                                "value": {
                                                    "value": "Failed",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            },
                                            "RowsRead": {
                                                "value": null,
                                                "type": "Int64"
                                            },
                                            "RowsCopied": {
                                                "value": null,
                                                "type": "Int64"
                                            },
                                            "CopyDuration": {
                                                "value": null,
                                                "type": "Double"
                                            },
                                            "Throughput": {
                                                "value": null,
                                                "type": "Double"
                                            },
                                            "ErrorMessage": {
                                                "value": {
                                                    "value": "@if(\n    and(\n        contains(activity('FullLoadCopyWithoutLogging').output, 'errors'),\n        greater(length(activity('FullLoadCopyWithoutLogging').output.errors), 0)\n    ),\n    activity('FullLoadCopyWithoutLogging').output.errors[0].Message,\n    null\n)",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            },
                                            "RowsSkipped": {
                                                "value": {
                                                    "value": "@if(\n    contains(activity('FullLoadCopyWithoutLogging').output, 'rowsSkipped'),\n    activity('FullLoadCopyWithoutLogging').output.rowsSkipped,\n    null\n)",
                                                    "type": "Expression"
                                                },
                                                "type": "Int64"
                                            },
                                            "LogFilePath": {
                                                "value": null,
                                                "type": "String"
                                            }
                                        }
                                    },
                                    "linkedServiceName": {
                                        "referenceName": "LS_configurationDB",
                                        "type": "LinkedServiceReference"
                                    }
                                }
                            ],
                            "ifTrueActivities": [
                                {
                                    "name": "FullLoadCopyWithLogging",
                                    "description": "Copy a table from a database to the configurated Sink dynamically taking by input FwkItem, SrcPath.",
                                    "type": "Copy",
                                    "dependsOn": [],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "source": {
                                            "type": "DelimitedTextSource",
                                            "additionalColumns": {
                                                "type": "Expression",
                                                "value": "@if(\n    contains(json(pipeline().parameters.FwkItem['Params']), 'additionalColumns'),\n    json(pipeline().parameters.FwkItem['Params']).additionalColumns,\n    json('[]')\n)"
                                            },
                                            "storeSettings": {
                                                "type": "SftpReadSettings",
                                                "recursive": true,
                                                "enablePartitionDiscovery": false,
                                                "disableChunking": false
                                            },
                                            "formatSettings": {
                                                "type": "DelimitedTextReadSettings",
                                                "skipLineCount": {
                                                    "value": "@json(pipeline().parameters.FwkItem['Params']).skipLineCount",
                                                    "type": "Expression"
                                                }
                                            }
                                        },
                                        "sink": {
                                            "type": "ParquetSink",
                                            "storeSettings": {
                                                "type": "AzureBlobFSWriteSettings"
                                            },
                                            "formatSettings": {
                                                "type": "ParquetWriteSettings"
                                            }
                                        },
                                        "enableStaging": false,
                                        "enableSkipIncompatibleRow": {
                                            "value": "@if(contains(json(pipeline().parameters.FwkItem['Params']), 'enableSkipIncompatibleRow'), json(pipeline().parameters.FwkItem['Params']).enableSkipIncompatibleRow, false)",
                                            "type": "Expression"
                                        },
                                        "logSettings": {
                                            "enableCopyActivityLog": true,
                                            "copyActivityLogSettings": {
                                                "logLevel": "Warning",
                                                "enableReliableLogging": false
                                            },
                                            "logLocationSettings": {
                                                "linkedServiceName": {
                                                    "referenceName": "LS_adls",
                                                    "type": "LinkedServiceReference",
                                                    "parameters": {
                                                        "InstanceURL": {
                                                            "value": "@json(pipeline().parameters.FwkItem['Params']).logSettingsInstanceURL",
                                                            "type": "Expression"
                                                        }
                                                    }
                                                },
                                                "path": {
                                                    "value": "@json(pipeline().parameters.FwkItem['Params']).logSettingsPath",
                                                    "type": "Expression"
                                                }
                                            }
                                        },
                                        "translator": {
                                            "value": "@if(\n    contains(json(pipeline().parameters.FwkItem['Params']), 'mapping'),\n    json(pipeline().parameters.FwkItem['Params']).mapping,\n    '\"mapping\":{}'\n)",
                                            "type": "Expression"
                                        }
                                    },
                                    "inputs": [
                                        {
                                            "referenceName": "DS_SFTP_CSV_Source",
                                            "type": "DatasetReference",
                                            "parameters": {
                                                "FwkItem": {
                                                    "value": "@pipeline().parameters.FwkItem",
                                                    "type": "Expression"
                                                },
                                                "ds_inputFileName": {
                                                    "value": "@pipeline().parameters.FileName",
                                                    "type": "Expression"
                                                },
                                                "ds_inputFilePath": {
                                                    "value": "@pipeline().parameters.FilePath",
                                                    "type": "Expression"
                                                }
                                            }
                                        }
                                    ],
                                    "outputs": [
                                        {
                                            "referenceName": "DS_ADLS_PRQ_Sink",
                                            "type": "DatasetReference",
                                            "parameters": {
                                                "InstanceURL": {
                                                    "value": "@pipeline().parameters.FwkItem['SinkInstanceURL']",
                                                    "type": "Expression"
                                                },
                                                "FullPath": {
                                                    "value": "@concat(pipeline().parameters.FwkItem['SinkPath'], \n\t'/',\n\tformatDateTime(pipeline().parameters.PL_01TriggerTime,'yyyy'),\n\tformatDateTime(pipeline().parameters.PL_01TriggerTime,'MM'),\n\tformatDateTime(pipeline().parameters.PL_01TriggerTime,'dd'),\n\tformatDateTime(pipeline().parameters.PL_01TriggerTime,'HH'),\n\tformatDateTime(pipeline().parameters.PL_01TriggerTime,'mm'),\n\t'_',\n\tutcnow(),\n\t'_',\n\tpipeline().parameters.FwkItem['EntityName'],\n\t'.snappy.parquet'\n)",
                                                    "type": "Expression"
                                                }
                                            }
                                        }
                                    ]
                                },
                                {
                                    "name": "spu_IngtLogUpdate_succeeded",
                                    "description": "Executes the SP spu_IngtLogUpdate to update record into IngtLog table with the execution module information.",
                                    "type": "SqlServerStoredProcedure",
                                    "dependsOn": [
                                        {
                                            "activity": "FullLoadCopyWithLogging",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "storedProcedureName": "[[dbo].[spu_IngtLogUpdate]",
                                        "storedProcedureParameters": {
                                            "IngtOutputId": {
                                                "value": {
                                                    "value": "@pipeline().parameters.FwkItem['IngtOutputId']",
                                                    "type": "Expression"
                                                },
                                                "type": "Int32"
                                            },
                                            "EntRunId": {
                                                "value": {
                                                    "value": "@pipeline().parameters.EntRunId",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            },
                                            "ModuleRunId": {
                                                "value": {
                                                    "value": "@pipeline().parameters.ModuleRunId",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            },
                                            "PipelineStatus": {
                                                "value": {
                                                    "value": "Succeeded",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            },
                                            "RowsRead": {
                                                "value": {
                                                    "value": "@if(\n    contains(activity('FullLoadCopyWithLogging').output, 'rowsRead'),\n    activity('FullLoadCopyWithLogging').output.rowsRead,\n    null\n)",
                                                    "type": "Expression"
                                                },
                                                "type": "Int64"
                                            },
                                            "RowsCopied": {
                                                "value": {
                                                    "value": "@if(\n    contains(activity('FullLoadCopyWithLogging').output, 'rowsCopied'),\n    activity('FullLoadCopyWithLogging').output.rowsCopied,\n    null\n)",
                                                    "type": "Expression"
                                                },
                                                "type": "Int64"
                                            },
                                            "CopyDuration": {
                                                "value": {
                                                    "value": "@if(\n    contains(activity('FullLoadCopyWithLogging').output, 'copyDuration'),\n    activity('FullLoadCopyWithLogging').output.copyDuration,\n    null\n)",
                                                    "type": "Expression"
                                                },
                                                "type": "Double"
                                            },
                                            "Throughput": {
                                                "value": {
                                                    "value": "@if(\n    contains(activity('FullLoadCopyWithLogging').output, 'throughput'),\n    activity('FullLoadCopyWithLogging').output.throughput,\n    null\n)",
                                                    "type": "Expression"
                                                },
                                                "type": "Double"
                                            },
                                            "ErrorMessage": {
                                                "value": null,
                                                "type": "String"
                                            },
                                            "RowsSkipped": {
                                                "value": {
                                                    "value": "@if(\n    contains(activity('FullLoadCopyWithLogging').output, 'rowsSkipped'),\n    activity('FullLoadCopyWithLogging').output.rowsSkipped,\n    null\n)",
                                                    "type": "Expression"
                                                },
                                                "type": "Int64"
                                            },
                                            "LogFilePath": {
                                                "value": {
                                                    "value": "@if(\n    contains(activity('FullLoadCopyWithLogging').output, 'logFilePath'),\n    activity('FullLoadCopyWithLogging').output.logFilePath,\n    null\n)",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            },
                                            "FileName": {
                                                "value": {
                                                    "value": "@if(contains(pipeline().parameters.FwkItem['Path'], '*'), pipeline().parameters.FileName, null)",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            }
                                        }
                                    },
                                    "linkedServiceName": {
                                        "referenceName": "LS_configurationDB",
                                        "type": "LinkedServiceReference"
                                    }
                                },
                                {
                                    "name": "spu_IngtLogUpdate_failed",
                                    "description": "Executes the SP spu_IngtLogUpdate to update record into IngtLog table with the execution module information.",
                                    "type": "SqlServerStoredProcedure",
                                    "dependsOn": [
                                        {
                                            "activity": "FullLoadCopyWithLogging",
                                            "dependencyConditions": [
                                                "Failed"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "storedProcedureName": "[[dbo].[spu_IngtLogUpdate]",
                                        "storedProcedureParameters": {
                                            "IngtOutputId": {
                                                "value": {
                                                    "value": "@pipeline().parameters.FwkItem['IngtOutputId']",
                                                    "type": "Expression"
                                                },
                                                "type": "Int32"
                                            },
                                            "EntRunId": {
                                                "value": {
                                                    "value": "@pipeline().parameters.EntRunId",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            },
                                            "ModuleRunId": {
                                                "value": {
                                                    "value": "@pipeline().parameters.ModuleRunId",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            },
                                            "PipelineStatus": {
                                                "value": {
                                                    "value": "Failed",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            },
                                            "RowsRead": {
                                                "value": null,
                                                "type": "Int64"
                                            },
                                            "RowsCopied": {
                                                "value": null,
                                                "type": "Int64"
                                            },
                                            "CopyDuration": {
                                                "value": null,
                                                "type": "Double"
                                            },
                                            "Throughput": {
                                                "value": null,
                                                "type": "Double"
                                            },
                                            "ErrorMessage": {
                                                "value": {
                                                    "value": "@if(\n    and(\n        contains(activity('FullLoadCopyWithLogging').output, 'errors'),\n        greater(length(activity('FullLoadCopyWithLogging').output.errors), 0)\n    ),\n    activity('FullLoadCopyWithLogging').output.errors[0].Message,\n    null\n)",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            },
                                            "RowsSkipped": {
                                                "value": {
                                                    "value": "@if(\n    contains(activity('FullLoadCopyWithLogging').output, 'rowsSkipped'),\n    activity('FullLoadCopyWithLogging').output.rowsSkipped,\n    null\n)",
                                                    "type": "Expression"
                                                },
                                                "type": "Int64"
                                            },
                                            "LogFilePath": {
                                                "value": {
                                                    "value": "@if(\n    contains(activity('FullLoadCopyWithLogging').output, 'logFilePath'),\n    activity('FullLoadCopyWithLogging').output.logFilePath,\n    null\n)",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            }
                                        }
                                    },
                                    "linkedServiceName": {
                                        "referenceName": "LS_configurationDB",
                                        "type": "LinkedServiceReference"
                                    }
                                }
                            ]
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {}
                },
                "parameters": {
                    "FwkItem": {
                        "type": "array"
                    },
                    "EntRunId": {
                        "type": "string"
                    },
                    "ModuleRunId": {
                        "type": "string"
                    },
                    "FileName": {
                        "type": "string"
                    },
                    "FilePath": {
                        "type": "string"
                    },
                    "PL_01TriggerTime": {
                        "type": "string"
                    }
                },
                "folder": {
                    "name": "01 Ingestion Module/06 SFTP"
                },
                "annotations": []
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/datasets/DS_SFTP_BIN_File')]",
                "[concat(variables('factoryId'), '/datasets/DS_SFTP_CSV_Source')]",
                "[concat(variables('factoryId'), '/datasets/DS_ADLS_PRQ_Sink')]",
                "[concat(variables('factoryId'), '/linkedServices/LS_configurationDB')]",
                "[concat(variables('factoryId'), '/linkedServices/LS_adls')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/PL_ING_06_01_SFTPIngestAllCSVFiles')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "ForEach CSV file",
                        "type": "ForEach",
                        "dependsOn": [],
                        "userProperties": [],
                        "typeProperties": {
                            "items": {
                                "value": "@pipeline().parameters.FileNames",
                                "type": "Expression"
                            },
                            "isSequential": true,
                            "activities": [
                                {
                                    "name": "Execute SFTPCSVLoad",
                                    "type": "ExecutePipeline",
                                    "dependsOn": [
                                        {
                                            "activity": "spi_IngtLogInsert",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "pipeline": {
                                            "referenceName": "PL_ING_06_01_SFTPCSVLoad",
                                            "type": "PipelineReference"
                                        },
                                        "waitOnCompletion": true,
                                        "parameters": {
                                            "FwkItem": {
                                                "value": "@pipeline().parameters.FwkItem",
                                                "type": "Expression"
                                            },
                                            "EntRunId": {
                                                "value": "@pipeline().parameters.EntRunId",
                                                "type": "Expression"
                                            },
                                            "ModuleRunId": {
                                                "value": "@pipeline().parameters.ModuleRunId",
                                                "type": "Expression"
                                            },
                                            "FileName": {
                                                "value": "@item().name",
                                                "type": "Expression"
                                            },
                                            "FilePath": {
                                                "value": "@pipeline().parameters.FilePath",
                                                "type": "Expression"
                                            },
                                            "PL_01TriggerTime": {
                                                "value": "@pipeline().parameters.PL_01TriggerTime",
                                                "type": "Expression"
                                            }
                                        }
                                    }
                                },
                                {
                                    "name": "spi_IngtLogInsert",
                                    "description": "Executes the SP spi_IngtLogInsert to insert record into IngtLog table with the execution module information.",
                                    "type": "SqlServerStoredProcedure",
                                    "dependsOn": [],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "storedProcedureName": "[[dbo].[spi_IngtLogInsert]",
                                        "storedProcedureParameters": {
                                            "IngtOutputId": {
                                                "value": {
                                                    "value": "@pipeline().parameters.FwkItem['IngtOutputId']",
                                                    "type": "Expression"
                                                },
                                                "type": "Int32"
                                            },
                                            "EntRunId": {
                                                "value": {
                                                    "value": "@pipeline().parameters.EntRunId",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            },
                                            "ModuleRunId": {
                                                "value": {
                                                    "value": "@pipeline().parameters.ModuleRunId",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            },
                                            "PipelineStatus": {
                                                "value": {
                                                    "value": "InProgress",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            },
                                            "StartDate": {
                                                "value": {
                                                    "value": "@formatdatetime(pipeline().TriggerTime)",
                                                    "type": "Expression"
                                                },
                                                "type": "Datetime"
                                            },
                                            "RowsRead": {
                                                "value": null,
                                                "type": "Int64"
                                            },
                                            "RowsCopied": {
                                                "value": null,
                                                "type": "Int64"
                                            },
                                            "CopyDuration": {
                                                "value": null,
                                                "type": "Double"
                                            },
                                            "Throughput": {
                                                "value": null,
                                                "type": "Double"
                                            },
                                            "ErrorMessage": {
                                                "value": null,
                                                "type": "String"
                                            },
                                            "FileName": {
                                                "value": {
                                                    "value": "@if(contains(pipeline().parameters.FwkItem['Path'], '*'), item().name, null)",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            }
                                        }
                                    },
                                    "linkedServiceName": {
                                        "referenceName": "LS_configurationDB",
                                        "type": "LinkedServiceReference"
                                    }
                                }
                            ]
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {}
                },
                "parameters": {
                    "FileNames": {
                        "type": "array"
                    },
                    "FwkItem": {
                        "type": "array"
                    },
                    "EntRunId": {
                        "type": "string"
                    },
                    "ModuleRunId": {
                        "type": "string"
                    },
                    "FilePath": {
                        "type": "string"
                    },
                    "PL_01TriggerTime": {
                        "type": "string"
                    }
                },
                "folder": {
                    "name": "01 Ingestion Module/06 SFTP"
                },
                "annotations": []
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/pipelines/PL_ING_06_01_SFTPCSVLoad')]",
                "[concat(variables('factoryId'), '/linkedServices/LS_configurationDB')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/PL_ING_06_02_SFTPExcelCheck')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Select Excel files by wildcard",
                        "type": "ExecutePipeline",
                        "dependsOn": [],
                        "policy": {
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "PL_ING_06_SFTPGetFiles",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {
                                "FwkItem": {
                                    "value": "@pipeline().parameters.FwkItem",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    {
                        "name": "IfMissingFile",
                        "type": "IfCondition",
                        "dependsOn": [
                            {
                                "activity": "Select Excel files by wildcard",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "expression": {
                                "value": "@equals(length(activity('Select Excel files by wildcard').output.pipelineReturnValue['outputFileName']), 0)",
                                "type": "Expression"
                            },
                            "ifFalseActivities": [
                                {
                                    "name": "Execute SFTPIngestAllExcelFiles",
                                    "type": "ExecutePipeline",
                                    "dependsOn": [],
                                    "policy": {
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "pipeline": {
                                            "referenceName": "PL_ING_06_02_SFTPIngestAllExcelFiles",
                                            "type": "PipelineReference"
                                        },
                                        "waitOnCompletion": true,
                                        "parameters": {
                                            "FileNames": {
                                                "value": "@activity('Select Excel files by wildcard').output.pipelineReturnValue['outputFileName']",
                                                "type": "Expression"
                                            },
                                            "FwkItem": {
                                                "value": "@pipeline().parameters.FwkItem",
                                                "type": "Expression"
                                            },
                                            "EntRunId": {
                                                "value": "@pipeline().parameters.EntRunId",
                                                "type": "Expression"
                                            },
                                            "ModuleRunId": {
                                                "value": "@pipeline().parameters.ModuleRunId",
                                                "type": "Expression"
                                            },
                                            "FilePath": {
                                                "value": "@activity('Select Excel files by wildcard').output.pipelineReturnValue['outputFilePath']",
                                                "type": "Expression"
                                            },
                                            "PL_01TriggerTime": {
                                                "value": "@pipeline().parameters.PL_01TriggerTime",
                                                "type": "Expression"
                                            }
                                        }
                                    }
                                }
                            ],
                            "ifTrueActivities": [
                                {
                                    "name": "spi_IngtLogInsert",
                                    "description": "Executes the SP spi_IngtLogInsert to insert record into IngtLog table with the execution module information.",
                                    "type": "SqlServerStoredProcedure",
                                    "dependsOn": [],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "storedProcedureName": "[[dbo].[spi_IngtLogInsert]",
                                        "storedProcedureParameters": {
                                            "IngtOutputId": {
                                                "value": {
                                                    "value": "@pipeline().parameters.FwkItem['IngtOutputId']",
                                                    "type": "Expression"
                                                },
                                                "type": "Int32"
                                            },
                                            "EntRunId": {
                                                "value": {
                                                    "value": "@pipeline().parameters.EntRunId",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            },
                                            "ModuleRunId": {
                                                "value": {
                                                    "value": "@pipeline().parameters.ModuleRunId",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            },
                                            "PipelineStatus": {
                                                "value": {
                                                    "value": "Skipped - Missing source file",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            },
                                            "StartDate": {
                                                "value": {
                                                    "value": "@formatdatetime(pipeline().TriggerTime)",
                                                    "type": "Expression"
                                                },
                                                "type": "Datetime"
                                            },
                                            "RowsRead": {
                                                "value": null,
                                                "type": "Int64"
                                            },
                                            "RowsCopied": {
                                                "value": null,
                                                "type": "Int64"
                                            },
                                            "CopyDuration": {
                                                "value": null,
                                                "type": "Double"
                                            },
                                            "Throughput": {
                                                "value": null,
                                                "type": "Double"
                                            },
                                            "ErrorMessage": {
                                                "value": null,
                                                "type": "String"
                                            },
                                            "FileName": {
                                                "value": null,
                                                "type": "String"
                                            }
                                        }
                                    },
                                    "linkedServiceName": {
                                        "referenceName": "LS_configurationDB",
                                        "type": "LinkedServiceReference"
                                    }
                                }
                            ]
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {}
                },
                "parameters": {
                    "FwkItem": {
                        "type": "array"
                    },
                    "PL_01TriggerTime": {
                        "type": "string"
                    },
                    "EntRunId": {
                        "type": "string"
                    },
                    "ModuleRunId": {
                        "type": "string"
                    }
                },
                "folder": {
                    "name": "01 Ingestion Module/06 SFTP"
                },
                "annotations": [],
                "lastPublishTime": "2023-07-06T08:29:16Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/pipelines/PL_ING_06_SFTPGetFiles')]",
                "[concat(variables('factoryId'), '/pipelines/PL_ING_06_02_SFTPIngestAllExcelFiles')]",
                "[concat(variables('factoryId'), '/linkedServices/LS_configurationDB')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/PL_ING_06_02_SFTPExcelLoad')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "IF archivePath Defined",
                        "description": "if the archive path is defined then copy source file with timestamp prefix to archive folder",
                        "type": "IfCondition",
                        "dependsOn": [
                            {
                                "activity": "If Logging Required",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "expression": {
                                "value": "@empty(pipeline().parameters.FwkItem['ArchivePath'])",
                                "type": "Expression"
                            },
                            "ifFalseActivities": [
                                {
                                    "name": "Move to archivePath",
                                    "type": "Copy",
                                    "dependsOn": [],
                                    "policy": {
                                        "timeout": "0.12:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "source": {
                                            "type": "BinarySource",
                                            "storeSettings": {
                                                "type": "SftpReadSettings",
                                                "recursive": true,
                                                "deleteFilesAfterCompletion": true,
                                                "disableChunking": true
                                            },
                                            "formatSettings": {
                                                "type": "BinaryReadSettings"
                                            }
                                        },
                                        "sink": {
                                            "type": "BinarySink",
                                            "storeSettings": {
                                                "type": "SftpWriteSettings",
                                                "operationTimeout": "01:00:00",
                                                "useTempFileRename": true
                                            }
                                        },
                                        "enableStaging": false
                                    },
                                    "inputs": [
                                        {
                                            "referenceName": "DS_SFTP_BIN_File",
                                            "type": "DatasetReference",
                                            "parameters": {
                                                "FwkItem": {
                                                    "value": "@pipeline().parameters.FwkItem",
                                                    "type": "Expression"
                                                },
                                                "ds_inputFileName": {
                                                    "value": "@pipeline().parameters.FileName",
                                                    "type": "Expression"
                                                },
                                                "ds_inputFilePath": {
                                                    "value": "@pipeline().parameters.FilePath",
                                                    "type": "Expression"
                                                }
                                            }
                                        }
                                    ],
                                    "outputs": [
                                        {
                                            "referenceName": "DS_SFTP_BIN_File",
                                            "type": "DatasetReference",
                                            "parameters": {
                                                "FwkItem": {
                                                    "value": "@pipeline().parameters.FwkItem",
                                                    "type": "Expression"
                                                },
                                                "ds_inputFileName": {
                                                    "value": "@concat(\n\tformatDateTime(pipeline().parameters.PL_01TriggerTime,'yyyy'),\n\tformatDateTime(pipeline().parameters.PL_01TriggerTime,'MM'),\n\tformatDateTime(pipeline().parameters.PL_01TriggerTime,'dd'),\n\tformatDateTime(pipeline().parameters.PL_01TriggerTime,'HH'),\n\tformatDateTime(pipeline().parameters.PL_01TriggerTime,'mm'),\n\t'_',\npipeline().parameters.FileName\n)",
                                                    "type": "Expression"
                                                },
                                                "ds_inputFilePath": {
                                                    "value": "@pipeline().parameters.FwkItem['ArchivePath']",
                                                    "type": "Expression"
                                                }
                                            }
                                        }
                                    ]
                                }
                            ]
                        }
                    },
                    {
                        "name": "If Logging Required",
                        "type": "IfCondition",
                        "dependsOn": [],
                        "userProperties": [],
                        "typeProperties": {
                            "expression": {
                                "value": "@if(and(contains(json(pipeline().parameters.FwkItem['Params']), 'logSettingsInstanceURL'), contains(json(pipeline().parameters.FwkItem['Params']), 'logSettingsPath')), true, false)",
                                "type": "Expression"
                            },
                            "ifFalseActivities": [
                                {
                                    "name": "FullLoadCopyWithoutLogging",
                                    "description": "Copy a table from a database to the configurated Sink dynamically taking by input FwkItem, SrcPath.",
                                    "type": "Copy",
                                    "dependsOn": [],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "source": {
                                            "type": "ExcelSource",
                                            "additionalColumns": {
                                                "type": "Expression",
                                                "value": "@if(\n    contains(json(pipeline().parameters.FwkItem['Params']), 'additionalColumns'),\n    json(pipeline().parameters.FwkItem['Params']).additionalColumns,\n    json('[]')\n)"
                                            },
                                            "storeSettings": {
                                                "type": "SftpReadSettings",
                                                "recursive": true,
                                                "enablePartitionDiscovery": false,
                                                "disableChunking": false
                                            }
                                        },
                                        "sink": {
                                            "type": "ParquetSink",
                                            "storeSettings": {
                                                "type": "AzureBlobFSWriteSettings"
                                            },
                                            "formatSettings": {
                                                "type": "ParquetWriteSettings"
                                            }
                                        },
                                        "enableStaging": false,
                                        "enableSkipIncompatibleRow": {
                                            "value": "@if(contains(json(pipeline().parameters.FwkItem['Params']), 'enableSkipIncompatibleRow'), json(pipeline().parameters.FwkItem['Params']).enableSkipIncompatibleRow, false)",
                                            "type": "Expression"
                                        },
                                        "translator": {
                                            "value": "@if(\n    contains(json(pipeline().parameters.FwkItem['Params']), 'mapping'),\n    json(pipeline().parameters.FwkItem['Params']).mapping,\n    '\"mapping\":{}'\n)",
                                            "type": "Expression"
                                        }
                                    },
                                    "inputs": [
                                        {
                                            "referenceName": "DS_SFTP_Excel_Source",
                                            "type": "DatasetReference",
                                            "parameters": {
                                                "FwkItem": {
                                                    "value": "@pipeline().parameters.FwkItem",
                                                    "type": "Expression"
                                                },
                                                "ds_inputFileName": {
                                                    "value": "@pipeline().parameters.FileName",
                                                    "type": "Expression"
                                                },
                                                "ds_inputFilePath": {
                                                    "value": "@pipeline().parameters.FilePath",
                                                    "type": "Expression"
                                                }
                                            }
                                        }
                                    ],
                                    "outputs": [
                                        {
                                            "referenceName": "DS_ADLS_PRQ_Sink",
                                            "type": "DatasetReference",
                                            "parameters": {
                                                "InstanceURL": {
                                                    "value": "@pipeline().parameters.FwkItem['SinkInstanceURL']",
                                                    "type": "Expression"
                                                },
                                                "FullPath": {
                                                    "value": "@concat(pipeline().parameters.FwkItem['SinkPath'], \n\t'/',\n\tformatDateTime(pipeline().parameters.PL_01TriggerTime,'yyyy'),\n\tformatDateTime(pipeline().parameters.PL_01TriggerTime,'MM'),\n\tformatDateTime(pipeline().parameters.PL_01TriggerTime,'dd'),\n\tformatDateTime(pipeline().parameters.PL_01TriggerTime,'HH'),\n\tformatDateTime(pipeline().parameters.PL_01TriggerTime,'mm'),\n\t'_',\n\tutcnow(),\n\t'_',\n\tpipeline().parameters.FwkItem['EntityName'],\n\t'.snappy.parquet'\n)",
                                                    "type": "Expression"
                                                }
                                            }
                                        }
                                    ]
                                },
                                {
                                    "name": "spu_IngtLogUpdate_succeeded2",
                                    "description": "Executes the SP spu_IngtLogUpdate to update record into IngtLog table with the execution module information.",
                                    "type": "SqlServerStoredProcedure",
                                    "dependsOn": [
                                        {
                                            "activity": "FullLoadCopyWithoutLogging",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "storedProcedureName": "[[dbo].[spu_IngtLogUpdate]",
                                        "storedProcedureParameters": {
                                            "IngtOutputId": {
                                                "value": {
                                                    "value": "@pipeline().parameters.FwkItem['IngtOutputId']",
                                                    "type": "Expression"
                                                },
                                                "type": "Int32"
                                            },
                                            "EntRunId": {
                                                "value": {
                                                    "value": "@pipeline().parameters.EntRunId",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            },
                                            "ModuleRunId": {
                                                "value": {
                                                    "value": "@pipeline().parameters.ModuleRunId",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            },
                                            "PipelineStatus": {
                                                "value": {
                                                    "value": "Succeeded",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            },
                                            "RowsRead": {
                                                "value": {
                                                    "value": "@if(\n    contains(activity('FullLoadCopyWithoutLogging').output, 'rowsRead'),\n    activity('FullLoadCopyWithoutLogging').output.rowsRead,\n    null\n)",
                                                    "type": "Expression"
                                                },
                                                "type": "Int64"
                                            },
                                            "RowsCopied": {
                                                "value": {
                                                    "value": "@if(\n    contains(activity('FullLoadCopyWithoutLogging').output, 'rowsCopied'),\n    activity('FullLoadCopyWithoutLogging').output.rowsCopied,\n    null\n)",
                                                    "type": "Expression"
                                                },
                                                "type": "Int64"
                                            },
                                            "CopyDuration": {
                                                "value": {
                                                    "value": "@if(\n    contains(activity('FullLoadCopyWithoutLogging').output, 'copyDuration'),\n    activity('FullLoadCopyWithoutLogging').output.copyDuration,\n    null\n)",
                                                    "type": "Expression"
                                                },
                                                "type": "Double"
                                            },
                                            "Throughput": {
                                                "value": {
                                                    "value": "@if(\n    contains(activity('FullLoadCopyWithoutLogging').output, 'throughput'),\n    activity('FullLoadCopyWithoutLogging').output.throughput,\n    null\n)",
                                                    "type": "Expression"
                                                },
                                                "type": "Double"
                                            },
                                            "ErrorMessage": {
                                                "value": null,
                                                "type": "String"
                                            },
                                            "RowsSkipped": {
                                                "value": {
                                                    "value": "@if(\n    contains(activity('FullLoadCopyWithoutLogging').output, 'rowsSkipped'),\n    activity('FullLoadCopyWithoutLogging').output.rowsSkipped,\n    null\n)",
                                                    "type": "Expression"
                                                },
                                                "type": "Int64"
                                            },
                                            "LogFilePath": {
                                                "value": null,
                                                "type": "String"
                                            },
                                            "FileName": {
                                                "value": {
                                                    "value": "@if(contains(pipeline().parameters.FwkItem['Path'], '*'), pipeline().parameters.FileName, null)",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            }
                                        }
                                    },
                                    "linkedServiceName": {
                                        "referenceName": "LS_configurationDB",
                                        "type": "LinkedServiceReference"
                                    }
                                },
                                {
                                    "name": "spu_IngtLogUpdate_failed2",
                                    "description": "Executes the SP spu_IngtLogUpdate to update record into IngtLog table with the execution module information.",
                                    "type": "SqlServerStoredProcedure",
                                    "dependsOn": [
                                        {
                                            "activity": "FullLoadCopyWithoutLogging",
                                            "dependencyConditions": [
                                                "Failed"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "storedProcedureName": "[[dbo].[spu_IngtLogUpdate]",
                                        "storedProcedureParameters": {
                                            "IngtOutputId": {
                                                "value": {
                                                    "value": "@pipeline().parameters.FwkItem['IngtOutputId']",
                                                    "type": "Expression"
                                                },
                                                "type": "Int32"
                                            },
                                            "EntRunId": {
                                                "value": {
                                                    "value": "@pipeline().parameters.EntRunId",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            },
                                            "ModuleRunId": {
                                                "value": {
                                                    "value": "@pipeline().parameters.ModuleRunId",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            },
                                            "PipelineStatus": {
                                                "value": {
                                                    "value": "Failed",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            },
                                            "RowsRead": {
                                                "value": null,
                                                "type": "Int64"
                                            },
                                            "RowsCopied": {
                                                "value": null,
                                                "type": "Int64"
                                            },
                                            "CopyDuration": {
                                                "value": null,
                                                "type": "Double"
                                            },
                                            "Throughput": {
                                                "value": null,
                                                "type": "Double"
                                            },
                                            "ErrorMessage": {
                                                "value": {
                                                    "value": "@if(\n    and(\n        contains(activity('FullLoadCopyWithoutLogging').output, 'errors'),\n        greater(length(activity('FullLoadCopyWithoutLogging').output.errors), 0)\n    ),\n    activity('FullLoadCopyWithoutLogging').output.errors[0].Message,\n    null\n)",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            },
                                            "RowsSkipped": {
                                                "value": {
                                                    "value": "@if(\n    contains(activity('FullLoadCopyWithoutLogging').output, 'rowsSkipped'),\n    activity('FullLoadCopyWithoutLogging').output.rowsSkipped,\n    null\n)",
                                                    "type": "Expression"
                                                },
                                                "type": "Int64"
                                            },
                                            "LogFilePath": {
                                                "value": null,
                                                "type": "String"
                                            }
                                        }
                                    },
                                    "linkedServiceName": {
                                        "referenceName": "LS_configurationDB",
                                        "type": "LinkedServiceReference"
                                    }
                                }
                            ],
                            "ifTrueActivities": [
                                {
                                    "name": "FullLoadCopyWithLogging",
                                    "description": "Copy a table from a database to the configurated Sink dynamically taking by input FwkItem, SrcPath.",
                                    "type": "Copy",
                                    "dependsOn": [],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "source": {
                                            "type": "ExcelSource",
                                            "additionalColumns": {
                                                "type": "Expression",
                                                "value": "@if(\n    contains(json(pipeline().parameters.FwkItem['Params']), 'additionalColumns'),\n    json(pipeline().parameters.FwkItem['Params']).additionalColumns,\n    json('[]')\n)"
                                            },
                                            "storeSettings": {
                                                "type": "SftpReadSettings",
                                                "recursive": true,
                                                "enablePartitionDiscovery": false,
                                                "disableChunking": false
                                            }
                                        },
                                        "sink": {
                                            "type": "ParquetSink",
                                            "storeSettings": {
                                                "type": "AzureBlobFSWriteSettings"
                                            },
                                            "formatSettings": {
                                                "type": "ParquetWriteSettings"
                                            }
                                        },
                                        "enableStaging": false,
                                        "enableSkipIncompatibleRow": {
                                            "value": "@if(contains(json(pipeline().parameters.FwkItem['Params']), 'enableSkipIncompatibleRow'), json(pipeline().parameters.FwkItem['Params']).enableSkipIncompatibleRow, false)",
                                            "type": "Expression"
                                        },
                                        "logSettings": {
                                            "enableCopyActivityLog": true,
                                            "copyActivityLogSettings": {
                                                "logLevel": "Warning",
                                                "enableReliableLogging": false
                                            },
                                            "logLocationSettings": {
                                                "linkedServiceName": {
                                                    "referenceName": "LS_adls",
                                                    "type": "LinkedServiceReference",
                                                    "parameters": {
                                                        "InstanceURL": {
                                                            "value": "@json(pipeline().parameters.FwkItem['Params']).logSettingsInstanceURL",
                                                            "type": "Expression"
                                                        }
                                                    }
                                                },
                                                "path": {
                                                    "value": "@json(pipeline().parameters.FwkItem['Params']).logSettingsPath",
                                                    "type": "Expression"
                                                }
                                            }
                                        },
                                        "translator": {
                                            "value": "@if(\n    contains(json(pipeline().parameters.FwkItem['Params']), 'mapping'),\n    json(pipeline().parameters.FwkItem['Params']).mapping,\n    '\"mapping\":{}'\n)",
                                            "type": "Expression"
                                        }
                                    },
                                    "inputs": [
                                        {
                                            "referenceName": "DS_SFTP_Excel_Source",
                                            "type": "DatasetReference",
                                            "parameters": {
                                                "FwkItem": {
                                                    "value": "@pipeline().parameters.FwkItem",
                                                    "type": "Expression"
                                                },
                                                "ds_inputFileName": {
                                                    "value": "@pipeline().parameters.FileName",
                                                    "type": "Expression"
                                                },
                                                "ds_inputFilePath": {
                                                    "value": "@pipeline().parameters.FilePath",
                                                    "type": "Expression"
                                                }
                                            }
                                        }
                                    ],
                                    "outputs": [
                                        {
                                            "referenceName": "DS_ADLS_PRQ_Sink",
                                            "type": "DatasetReference",
                                            "parameters": {
                                                "InstanceURL": {
                                                    "value": "@pipeline().parameters.FwkItem['SinkInstanceURL']",
                                                    "type": "Expression"
                                                },
                                                "FullPath": {
                                                    "value": "@concat(pipeline().parameters.FwkItem['SinkPath'], \n\t'/',\n\tformatDateTime(pipeline().parameters.PL_01TriggerTime,'yyyy'),\n\tformatDateTime(pipeline().parameters.PL_01TriggerTime,'MM'),\n\tformatDateTime(pipeline().parameters.PL_01TriggerTime,'dd'),\n\tformatDateTime(pipeline().parameters.PL_01TriggerTime,'HH'),\n\tformatDateTime(pipeline().parameters.PL_01TriggerTime,'mm'),\n\t'_',\n\tutcnow(),\n\t'_',\n\tpipeline().parameters.FwkItem['EntityName'],\n\t'.snappy.parquet'\n)",
                                                    "type": "Expression"
                                                }
                                            }
                                        }
                                    ]
                                },
                                {
                                    "name": "spu_IngtLogUpdate_succeeded",
                                    "description": "Executes the SP spu_IngtLogUpdate to update record into IngtLog table with the execution module information.",
                                    "type": "SqlServerStoredProcedure",
                                    "dependsOn": [
                                        {
                                            "activity": "FullLoadCopyWithLogging",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "storedProcedureName": "[[dbo].[spu_IngtLogUpdate]",
                                        "storedProcedureParameters": {
                                            "IngtOutputId": {
                                                "value": {
                                                    "value": "@pipeline().parameters.FwkItem['IngtOutputId']",
                                                    "type": "Expression"
                                                },
                                                "type": "Int32"
                                            },
                                            "EntRunId": {
                                                "value": {
                                                    "value": "@pipeline().parameters.EntRunId",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            },
                                            "ModuleRunId": {
                                                "value": {
                                                    "value": "@pipeline().parameters.ModuleRunId",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            },
                                            "PipelineStatus": {
                                                "value": {
                                                    "value": "Succeeded",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            },
                                            "RowsRead": {
                                                "value": {
                                                    "value": "@if(\n    contains(activity('FullLoadCopyWithLogging').output, 'rowsRead'),\n    activity('FullLoadCopyWithLogging').output.rowsRead,\n    null\n)",
                                                    "type": "Expression"
                                                },
                                                "type": "Int64"
                                            },
                                            "RowsCopied": {
                                                "value": {
                                                    "value": "@if(\n    contains(activity('FullLoadCopyWithLogging').output, 'rowsCopied'),\n    activity('FullLoadCopyWithLogging').output.rowsCopied,\n    null\n)",
                                                    "type": "Expression"
                                                },
                                                "type": "Int64"
                                            },
                                            "CopyDuration": {
                                                "value": {
                                                    "value": "@if(\n    contains(activity('FullLoadCopyWithLogging').output, 'copyDuration'),\n    activity('FullLoadCopyWithLogging').output.copyDuration,\n    null\n)",
                                                    "type": "Expression"
                                                },
                                                "type": "Double"
                                            },
                                            "Throughput": {
                                                "value": {
                                                    "value": "@if(\n    contains(activity('FullLoadCopyWithLogging').output, 'throughput'),\n    activity('FullLoadCopyWithLogging').output.throughput,\n    null\n)",
                                                    "type": "Expression"
                                                },
                                                "type": "Double"
                                            },
                                            "ErrorMessage": {
                                                "value": null,
                                                "type": "String"
                                            },
                                            "RowsSkipped": {
                                                "value": {
                                                    "value": "@if(\n    contains(activity('FullLoadCopyWithLogging').output, 'rowsSkipped'),\n    activity('FullLoadCopyWithLogging').output.rowsSkipped,\n    null\n)",
                                                    "type": "Expression"
                                                },
                                                "type": "Int64"
                                            },
                                            "LogFilePath": {
                                                "value": {
                                                    "value": "@if(\n    contains(activity('FullLoadCopyWithLogging').output, 'logFilePath'),\n    activity('FullLoadCopyWithLogging').output.logFilePath,\n    null\n)",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            },
                                            "FileName": {
                                                "value": {
                                                    "value": "@if(contains(pipeline().parameters.FwkItem['Path'], '*'), pipeline().parameters.FileName, null)",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            }
                                        }
                                    },
                                    "linkedServiceName": {
                                        "referenceName": "LS_configurationDB",
                                        "type": "LinkedServiceReference"
                                    }
                                },
                                {
                                    "name": "spu_IngtLogUpdate_failed",
                                    "description": "Executes the SP spu_IngtLogUpdate to update record into IngtLog table with the execution module information.",
                                    "type": "SqlServerStoredProcedure",
                                    "dependsOn": [
                                        {
                                            "activity": "FullLoadCopyWithLogging",
                                            "dependencyConditions": [
                                                "Failed"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "storedProcedureName": "[[dbo].[spu_IngtLogUpdate]",
                                        "storedProcedureParameters": {
                                            "IngtOutputId": {
                                                "value": {
                                                    "value": "@pipeline().parameters.FwkItem['IngtOutputId']",
                                                    "type": "Expression"
                                                },
                                                "type": "Int32"
                                            },
                                            "EntRunId": {
                                                "value": {
                                                    "value": "@pipeline().parameters.EntRunId",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            },
                                            "ModuleRunId": {
                                                "value": {
                                                    "value": "@pipeline().parameters.ModuleRunId",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            },
                                            "PipelineStatus": {
                                                "value": {
                                                    "value": "Failed",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            },
                                            "RowsRead": {
                                                "value": null,
                                                "type": "Int64"
                                            },
                                            "RowsCopied": {
                                                "value": null,
                                                "type": "Int64"
                                            },
                                            "CopyDuration": {
                                                "value": null,
                                                "type": "Double"
                                            },
                                            "Throughput": {
                                                "value": null,
                                                "type": "Double"
                                            },
                                            "ErrorMessage": {
                                                "value": {
                                                    "value": "@if(\n    and(\n        contains(activity('FullLoadCopyWithLogging').output, 'errors'),\n        greater(length(activity('FullLoadCopyWithLogging').output.errors), 0)\n    ),\n    activity('FullLoadCopyWithLogging').output.errors[0].Message,\n    null\n)",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            },
                                            "RowsSkipped": {
                                                "value": {
                                                    "value": "@if(\n    contains(activity('FullLoadCopyWithLogging').output, 'rowsSkipped'),\n    activity('FullLoadCopyWithLogging').output.rowsSkipped,\n    null\n)",
                                                    "type": "Expression"
                                                },
                                                "type": "Int64"
                                            },
                                            "LogFilePath": {
                                                "value": {
                                                    "value": "@if(\n    contains(activity('FullLoadCopyWithLogging').output, 'logFilePath'),\n    activity('FullLoadCopyWithLogging').output.logFilePath,\n    null\n)",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            }
                                        }
                                    },
                                    "linkedServiceName": {
                                        "referenceName": "LS_configurationDB",
                                        "type": "LinkedServiceReference"
                                    }
                                }
                            ]
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {}
                },
                "parameters": {
                    "FwkItem": {
                        "type": "array"
                    },
                    "EntRunId": {
                        "type": "string"
                    },
                    "ModuleRunId": {
                        "type": "string"
                    },
                    "FileName": {
                        "type": "string"
                    },
                    "FilePath": {
                        "type": "string"
                    },
                    "PL_01TriggerTime": {
                        "type": "string"
                    }
                },
                "folder": {
                    "name": "01 Ingestion Module/06 SFTP"
                },
                "annotations": []
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/datasets/DS_SFTP_BIN_File')]",
                "[concat(variables('factoryId'), '/datasets/DS_SFTP_Excel_Source')]",
                "[concat(variables('factoryId'), '/datasets/DS_ADLS_PRQ_Sink')]",
                "[concat(variables('factoryId'), '/linkedServices/LS_configurationDB')]",
                "[concat(variables('factoryId'), '/linkedServices/LS_adls')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/PL_ING_06_02_SFTPIngestAllExcelFiles')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "ForEach Excel file",
                        "type": "ForEach",
                        "dependsOn": [],
                        "userProperties": [],
                        "typeProperties": {
                            "items": {
                                "value": "@pipeline().parameters.FileNames",
                                "type": "Expression"
                            },
                            "isSequential": true,
                            "activities": [
                                {
                                    "name": "Execute SFTPExcelLoad",
                                    "type": "ExecutePipeline",
                                    "dependsOn": [
                                        {
                                            "activity": "spi_IngtLogInsert",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "pipeline": {
                                            "referenceName": "PL_ING_06_02_SFTPExcelLoad",
                                            "type": "PipelineReference"
                                        },
                                        "waitOnCompletion": true,
                                        "parameters": {
                                            "FwkItem": {
                                                "value": "@pipeline().parameters.FwkItem",
                                                "type": "Expression"
                                            },
                                            "EntRunId": {
                                                "value": "@pipeline().parameters.EntRunId",
                                                "type": "Expression"
                                            },
                                            "ModuleRunId": {
                                                "value": "@pipeline().parameters.ModuleRunId",
                                                "type": "Expression"
                                            },
                                            "FileName": {
                                                "value": "@item().name",
                                                "type": "Expression"
                                            },
                                            "FilePath": {
                                                "value": "@pipeline().parameters.FilePath",
                                                "type": "Expression"
                                            },
                                            "PL_01TriggerTime": {
                                                "value": "@pipeline().parameters.PL_01TriggerTime",
                                                "type": "Expression"
                                            }
                                        }
                                    }
                                },
                                {
                                    "name": "spi_IngtLogInsert",
                                    "description": "Executes the SP spi_IngtLogInsert to insert record into IngtLog table with the execution module information.",
                                    "type": "SqlServerStoredProcedure",
                                    "dependsOn": [],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "storedProcedureName": "[[dbo].[spi_IngtLogInsert]",
                                        "storedProcedureParameters": {
                                            "IngtOutputId": {
                                                "value": {
                                                    "value": "@pipeline().parameters.FwkItem['IngtOutputId']",
                                                    "type": "Expression"
                                                },
                                                "type": "Int32"
                                            },
                                            "EntRunId": {
                                                "value": {
                                                    "value": "@pipeline().parameters.EntRunId",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            },
                                            "ModuleRunId": {
                                                "value": {
                                                    "value": "@pipeline().parameters.ModuleRunId",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            },
                                            "PipelineStatus": {
                                                "value": {
                                                    "value": "InProgress",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            },
                                            "StartDate": {
                                                "value": {
                                                    "value": "@formatdatetime(pipeline().TriggerTime)",
                                                    "type": "Expression"
                                                },
                                                "type": "Datetime"
                                            },
                                            "RowsRead": {
                                                "value": null,
                                                "type": "Int64"
                                            },
                                            "RowsCopied": {
                                                "value": null,
                                                "type": "Int64"
                                            },
                                            "CopyDuration": {
                                                "value": null,
                                                "type": "Double"
                                            },
                                            "Throughput": {
                                                "value": null,
                                                "type": "Double"
                                            },
                                            "ErrorMessage": {
                                                "value": null,
                                                "type": "String"
                                            },
                                            "FileName": {
                                                "value": {
                                                    "value": "@if(contains(pipeline().parameters.FwkItem['Path'], '*'), item().name, null)",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            }
                                        }
                                    },
                                    "linkedServiceName": {
                                        "referenceName": "LS_configurationDB",
                                        "type": "LinkedServiceReference"
                                    }
                                }
                            ]
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {}
                },
                "parameters": {
                    "FileNames": {
                        "type": "array"
                    },
                    "FwkItem": {
                        "type": "array"
                    },
                    "EntRunId": {
                        "type": "string"
                    },
                    "ModuleRunId": {
                        "type": "string"
                    },
                    "FilePath": {
                        "type": "string"
                    },
                    "PL_01TriggerTime": {
                        "type": "string"
                    }
                },
                "folder": {
                    "name": "01 Ingestion Module/06 SFTP"
                },
                "annotations": []
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/pipelines/PL_ING_06_02_SFTPExcelLoad')]",
                "[concat(variables('factoryId'), '/linkedServices/LS_configurationDB')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/PL_ING_06_03_SFTPXMLCheck')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Select XML files by wildcard",
                        "type": "ExecutePipeline",
                        "dependsOn": [],
                        "policy": {
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "PL_ING_06_SFTPGetFiles",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {
                                "FwkItem": {
                                    "value": "@pipeline().parameters.FwkItem",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    {
                        "name": "IfMissingFile",
                        "type": "IfCondition",
                        "dependsOn": [
                            {
                                "activity": "Select XML files by wildcard",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "expression": {
                                "value": "@equals(length(activity('Select XML files by wildcard').output.pipelineReturnValue['outputFileName']), 0)",
                                "type": "Expression"
                            },
                            "ifFalseActivities": [
                                {
                                    "name": "Execute SFTPXMLLoad",
                                    "type": "ExecutePipeline",
                                    "dependsOn": [
                                        {
                                            "activity": "spi_IngtLogInsert_copy1",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "pipeline": {
                                            "referenceName": "PL_ING_06_03_SFTPXMLLoad",
                                            "type": "PipelineReference"
                                        },
                                        "waitOnCompletion": true,
                                        "parameters": {
                                            "FwkItem": {
                                                "value": "@pipeline().parameters.FwkItem",
                                                "type": "Expression"
                                            },
                                            "EntRunId": {
                                                "value": "@pipeline().parameters.EntRunId",
                                                "type": "Expression"
                                            },
                                            "ModuleRunId": {
                                                "value": "@pipeline().parameters.ModuleRunId",
                                                "type": "Expression"
                                            },
                                            "FileName": {
                                                "value": "@activity('Select XML files by wildcard').output.pipelineReturnValue['outputFileName'][0]['name']",
                                                "type": "Expression"
                                            },
                                            "FilePath": {
                                                "value": "@activity('Select XML files by wildcard').output.pipelineReturnValue['outputFilePath']",
                                                "type": "Expression"
                                            },
                                            "PL_01TriggerTime": {
                                                "value": "@pipeline().parameters.PL_01TriggerTime",
                                                "type": "Expression"
                                            }
                                        }
                                    }
                                },
                                {
                                    "name": "spi_IngtLogInsert_copy1",
                                    "description": "Executes the SP spi_IngtLogInsert to insert record into IngtLog table with the execution module information.",
                                    "type": "SqlServerStoredProcedure",
                                    "dependsOn": [],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "storedProcedureName": "[[dbo].[spi_IngtLogInsert]",
                                        "storedProcedureParameters": {
                                            "IngtOutputId": {
                                                "value": {
                                                    "value": "@pipeline().parameters.FwkItem['IngtOutputId']",
                                                    "type": "Expression"
                                                },
                                                "type": "Int32"
                                            },
                                            "EntRunId": {
                                                "value": {
                                                    "value": "@pipeline().parameters.EntRunId",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            },
                                            "ModuleRunId": {
                                                "value": {
                                                    "value": "@pipeline().parameters.ModuleRunId",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            },
                                            "PipelineStatus": {
                                                "value": {
                                                    "value": "InProgress",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            },
                                            "StartDate": {
                                                "value": {
                                                    "value": "@formatdatetime(pipeline().TriggerTime)",
                                                    "type": "Expression"
                                                },
                                                "type": "Datetime"
                                            },
                                            "RowsRead": {
                                                "value": null,
                                                "type": "Int64"
                                            },
                                            "RowsCopied": {
                                                "value": null,
                                                "type": "Int64"
                                            },
                                            "CopyDuration": {
                                                "value": null,
                                                "type": "Double"
                                            },
                                            "Throughput": {
                                                "value": null,
                                                "type": "Double"
                                            },
                                            "ErrorMessage": {
                                                "value": "",
                                                "type": "String"
                                            },
                                            "FileName": {
                                                "value": {
                                                    "value": "@if(contains(pipeline().parameters.FwkItem['Path'], '*'), activity('Select XML files by wildcard').output.pipelineReturnValue['outputFileName'][0]['name'], null)",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            }
                                        }
                                    },
                                    "linkedServiceName": {
                                        "referenceName": "LS_configurationDB",
                                        "type": "LinkedServiceReference"
                                    }
                                }
                            ],
                            "ifTrueActivities": [
                                {
                                    "name": "spi_IngtLogInsert",
                                    "description": "Executes the SP spi_IngtLogInsert to insert record into IngtLog table with the execution module information.",
                                    "type": "SqlServerStoredProcedure",
                                    "dependsOn": [],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "storedProcedureName": "[[dbo].[spi_IngtLogInsert]",
                                        "storedProcedureParameters": {
                                            "IngtOutputId": {
                                                "value": {
                                                    "value": "@pipeline().parameters.FwkItem['IngtOutputId']",
                                                    "type": "Expression"
                                                },
                                                "type": "Int32"
                                            },
                                            "EntRunId": {
                                                "value": {
                                                    "value": "@pipeline().parameters.EntRunId",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            },
                                            "ModuleRunId": {
                                                "value": {
                                                    "value": "@pipeline().parameters.ModuleRunId",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            },
                                            "PipelineStatus": {
                                                "value": {
                                                    "value": "Skipped - Missing source file",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            },
                                            "StartDate": {
                                                "value": {
                                                    "value": "@formatdatetime(pipeline().TriggerTime)",
                                                    "type": "Expression"
                                                },
                                                "type": "Datetime"
                                            },
                                            "RowsRead": {
                                                "value": null,
                                                "type": "Int64"
                                            },
                                            "RowsCopied": {
                                                "value": null,
                                                "type": "Int64"
                                            },
                                            "CopyDuration": {
                                                "value": null,
                                                "type": "Double"
                                            },
                                            "Throughput": {
                                                "value": null,
                                                "type": "Double"
                                            },
                                            "ErrorMessage": {
                                                "value": null,
                                                "type": "String"
                                            },
                                            "FileName": {
                                                "value": null,
                                                "type": "String"
                                            }
                                        }
                                    },
                                    "linkedServiceName": {
                                        "referenceName": "LS_configurationDB",
                                        "type": "LinkedServiceReference"
                                    }
                                }
                            ]
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {}
                },
                "parameters": {
                    "FwkItem": {
                        "type": "array"
                    },
                    "PL_01TriggerTime": {
                        "type": "string"
                    },
                    "EntRunId": {
                        "type": "string"
                    },
                    "ModuleRunId": {
                        "type": "string"
                    }
                },
                "folder": {
                    "name": "01 Ingestion Module/06 SFTP"
                },
                "annotations": [],
                "lastPublishTime": "2023-07-06T08:29:16Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/pipelines/PL_ING_06_SFTPGetFiles')]",
                "[concat(variables('factoryId'), '/pipelines/PL_ING_06_03_SFTPXMLLoad')]",
                "[concat(variables('factoryId'), '/linkedServices/LS_configurationDB')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/PL_ING_06_03_SFTPXMLLoad')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "IF archivePath Defined",
                        "description": "if the archive path is defined then copy source file with timestamp prefix to archive folder",
                        "type": "IfCondition",
                        "dependsOn": [
                            {
                                "activity": "If Logging Required",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "expression": {
                                "value": "@empty(pipeline().parameters.FwkItem['ArchivePath'])",
                                "type": "Expression"
                            },
                            "ifFalseActivities": [
                                {
                                    "name": "Move to archivePath",
                                    "type": "Copy",
                                    "dependsOn": [],
                                    "policy": {
                                        "timeout": "0.12:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "source": {
                                            "type": "BinarySource",
                                            "storeSettings": {
                                                "type": "SftpReadSettings",
                                                "recursive": true,
                                                "deleteFilesAfterCompletion": true,
                                                "disableChunking": true
                                            },
                                            "formatSettings": {
                                                "type": "BinaryReadSettings"
                                            }
                                        },
                                        "sink": {
                                            "type": "BinarySink",
                                            "storeSettings": {
                                                "type": "SftpWriteSettings",
                                                "operationTimeout": "01:00:00",
                                                "useTempFileRename": true
                                            }
                                        },
                                        "enableStaging": false
                                    },
                                    "inputs": [
                                        {
                                            "referenceName": "DS_SFTP_BIN_File",
                                            "type": "DatasetReference",
                                            "parameters": {
                                                "FwkItem": {
                                                    "value": "@pipeline().parameters.FwkItem",
                                                    "type": "Expression"
                                                },
                                                "ds_inputFileName": {
                                                    "value": "@pipeline().parameters.FileName",
                                                    "type": "Expression"
                                                },
                                                "ds_inputFilePath": {
                                                    "value": "@pipeline().parameters.FilePath",
                                                    "type": "Expression"
                                                }
                                            }
                                        }
                                    ],
                                    "outputs": [
                                        {
                                            "referenceName": "DS_SFTP_BIN_File",
                                            "type": "DatasetReference",
                                            "parameters": {
                                                "FwkItem": {
                                                    "value": "@pipeline().parameters.FwkItem",
                                                    "type": "Expression"
                                                },
                                                "ds_inputFileName": {
                                                    "value": "@concat(\n\tformatDateTime(pipeline().parameters.PL_01TriggerTime,'yyyy'),\n\tformatDateTime(pipeline().parameters.PL_01TriggerTime,'MM'),\n\tformatDateTime(pipeline().parameters.PL_01TriggerTime,'dd'),\n\tformatDateTime(pipeline().parameters.PL_01TriggerTime,'HH'),\n\tformatDateTime(pipeline().parameters.PL_01TriggerTime,'mm'),\n\t'_',\npipeline().parameters.FileName\n)",
                                                    "type": "Expression"
                                                },
                                                "ds_inputFilePath": {
                                                    "value": "@pipeline().parameters.FwkItem['ArchivePath']",
                                                    "type": "Expression"
                                                }
                                            }
                                        }
                                    ]
                                }
                            ]
                        }
                    },
                    {
                        "name": "If Logging Required",
                        "type": "IfCondition",
                        "dependsOn": [],
                        "userProperties": [],
                        "typeProperties": {
                            "expression": {
                                "value": "@if(and(contains(json(pipeline().parameters.FwkItem['Params']), 'logSettingsInstanceURL'), contains(json(pipeline().parameters.FwkItem['Params']), 'logSettingsPath')), true, false)",
                                "type": "Expression"
                            },
                            "ifFalseActivities": [
                                {
                                    "name": "FullLoadCopyWithoutLogging",
                                    "description": "Copy a table from a database to the configurated Sink dynamically taking by input FwkItem, SrcPath.",
                                    "type": "Copy",
                                    "dependsOn": [],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "source": {
                                            "type": "XmlSource",
                                            "additionalColumns": {
                                                "type": "Expression",
                                                "value": "@if(\n    contains(json(pipeline().parameters.FwkItem['Params']), 'additionalColumns'),\n    json(pipeline().parameters.FwkItem['Params']).additionalColumns,\n    json('[]')\n)"
                                            },
                                            "storeSettings": {
                                                "type": "SftpReadSettings",
                                                "recursive": true,
                                                "enablePartitionDiscovery": false,
                                                "disableChunking": false
                                            },
                                            "formatSettings": {
                                                "type": "XmlReadSettings",
                                                "validationMode": "none",
                                                "detectDataType": true,
                                                "namespaces": false
                                            }
                                        },
                                        "sink": {
                                            "type": "ParquetSink",
                                            "storeSettings": {
                                                "type": "AzureBlobFSWriteSettings"
                                            },
                                            "formatSettings": {
                                                "type": "ParquetWriteSettings"
                                            }
                                        },
                                        "enableStaging": false,
                                        "enableSkipIncompatibleRow": {
                                            "value": "@if(contains(json(pipeline().parameters.FwkItem['Params']), 'enableSkipIncompatibleRow'), json(pipeline().parameters.FwkItem['Params']).enableSkipIncompatibleRow, false)",
                                            "type": "Expression"
                                        },
                                        "translator": {
                                            "value": "@if(\n    contains(json(pipeline().parameters.FwkItem['Params']), 'mapping'),\n    json(pipeline().parameters.FwkItem['Params']).mapping,\n    '\"mapping\":{}'\n)",
                                            "type": "Expression"
                                        }
                                    },
                                    "inputs": [
                                        {
                                            "referenceName": "DS_SFTP_XML_Source",
                                            "type": "DatasetReference",
                                            "parameters": {
                                                "FwkItem": {
                                                    "value": "@pipeline().parameters.FwkItem",
                                                    "type": "Expression"
                                                },
                                                "ds_inputFileName": {
                                                    "value": "@pipeline().parameters.FileName",
                                                    "type": "Expression"
                                                },
                                                "ds_inputFilePath": {
                                                    "value": "@pipeline().parameters.FilePath",
                                                    "type": "Expression"
                                                }
                                            }
                                        }
                                    ],
                                    "outputs": [
                                        {
                                            "referenceName": "DS_ADLS_PRQ_Sink",
                                            "type": "DatasetReference",
                                            "parameters": {
                                                "InstanceURL": {
                                                    "value": "@pipeline().parameters.FwkItem['SinkInstanceURL']",
                                                    "type": "Expression"
                                                },
                                                "FullPath": {
                                                    "value": "@concat(pipeline().parameters.FwkItem['SinkPath'], \n\t'/',\n\tformatDateTime(pipeline().parameters.PL_01TriggerTime,'yyyy'),\n\tformatDateTime(pipeline().parameters.PL_01TriggerTime,'MM'),\n\tformatDateTime(pipeline().parameters.PL_01TriggerTime,'dd'),\n\tformatDateTime(pipeline().parameters.PL_01TriggerTime,'HH'),\n\tformatDateTime(pipeline().parameters.PL_01TriggerTime,'mm'),\n\t'_',\n\tpipeline().parameters.FwkItem['EntityName'],\n\t'.snappy.parquet'\n)",
                                                    "type": "Expression"
                                                }
                                            }
                                        }
                                    ]
                                },
                                {
                                    "name": "spu_IngtLogUpdate_succeeded2",
                                    "description": "Executes the SP spu_IngtLogUpdate to update record into IngtLog table with the execution module information.",
                                    "type": "SqlServerStoredProcedure",
                                    "dependsOn": [
                                        {
                                            "activity": "FullLoadCopyWithoutLogging",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "storedProcedureName": "[[dbo].[spu_IngtLogUpdate]",
                                        "storedProcedureParameters": {
                                            "IngtOutputId": {
                                                "value": {
                                                    "value": "@pipeline().parameters.FwkItem['IngtOutputId']",
                                                    "type": "Expression"
                                                },
                                                "type": "Int32"
                                            },
                                            "EntRunId": {
                                                "value": {
                                                    "value": "@pipeline().parameters.EntRunId",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            },
                                            "ModuleRunId": {
                                                "value": {
                                                    "value": "@pipeline().parameters.ModuleRunId",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            },
                                            "PipelineStatus": {
                                                "value": {
                                                    "value": "Succeeded",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            },
                                            "RowsRead": {
                                                "value": {
                                                    "value": "@if(\n    contains(activity('FullLoadCopyWithoutLogging').output, 'rowsRead'),\n    activity('FullLoadCopyWithoutLogging').output.rowsRead,\n    null\n)",
                                                    "type": "Expression"
                                                },
                                                "type": "Int64"
                                            },
                                            "RowsCopied": {
                                                "value": {
                                                    "value": "@if(\n    contains(activity('FullLoadCopyWithoutLogging').output, 'rowsCopied'),\n    activity('FullLoadCopyWithoutLogging').output.rowsCopied,\n    null\n)",
                                                    "type": "Expression"
                                                },
                                                "type": "Int64"
                                            },
                                            "CopyDuration": {
                                                "value": {
                                                    "value": "@if(\n    contains(activity('FullLoadCopyWithoutLogging').output, 'copyDuration'),\n    activity('FullLoadCopyWithoutLogging').output.copyDuration,\n    null\n)",
                                                    "type": "Expression"
                                                },
                                                "type": "Double"
                                            },
                                            "Throughput": {
                                                "value": {
                                                    "value": "@if(\n    contains(activity('FullLoadCopyWithoutLogging').output, 'throughput'),\n    activity('FullLoadCopyWithoutLogging').output.throughput,\n    null\n)",
                                                    "type": "Expression"
                                                },
                                                "type": "Double"
                                            },
                                            "ErrorMessage": {
                                                "value": null,
                                                "type": "String"
                                            },
                                            "RowsSkipped": {
                                                "value": {
                                                    "value": "@if(\n    contains(activity('FullLoadCopyWithoutLogging').output, 'rowsSkipped'),\n    activity('FullLoadCopyWithoutLogging').output.rowsSkipped,\n    null\n)",
                                                    "type": "Expression"
                                                },
                                                "type": "Int64"
                                            },
                                            "LogFilePath": {
                                                "value": null,
                                                "type": "String"
                                            },
                                            "FileName": {
                                                "value": {
                                                    "value": "@if(contains(pipeline().parameters.FwkItem['Path'], '*'), pipeline().parameters.FileName, null)",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            }
                                        }
                                    },
                                    "linkedServiceName": {
                                        "referenceName": "LS_configurationDB",
                                        "type": "LinkedServiceReference"
                                    }
                                },
                                {
                                    "name": "spu_IngtLogUpdate_failed2",
                                    "description": "Executes the SP spu_IngtLogUpdate to update record into IngtLog table with the execution module information.",
                                    "type": "SqlServerStoredProcedure",
                                    "dependsOn": [
                                        {
                                            "activity": "FullLoadCopyWithoutLogging",
                                            "dependencyConditions": [
                                                "Failed"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "storedProcedureName": "[[dbo].[spu_IngtLogUpdate]",
                                        "storedProcedureParameters": {
                                            "IngtOutputId": {
                                                "value": {
                                                    "value": "@pipeline().parameters.FwkItem['IngtOutputId']",
                                                    "type": "Expression"
                                                },
                                                "type": "Int32"
                                            },
                                            "EntRunId": {
                                                "value": {
                                                    "value": "@pipeline().parameters.EntRunId",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            },
                                            "ModuleRunId": {
                                                "value": {
                                                    "value": "@pipeline().parameters.ModuleRunId",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            },
                                            "PipelineStatus": {
                                                "value": {
                                                    "value": "Failed",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            },
                                            "RowsRead": {
                                                "value": null,
                                                "type": "Int64"
                                            },
                                            "RowsCopied": {
                                                "value": null,
                                                "type": "Int64"
                                            },
                                            "CopyDuration": {
                                                "value": null,
                                                "type": "Double"
                                            },
                                            "Throughput": {
                                                "value": null,
                                                "type": "Double"
                                            },
                                            "ErrorMessage": {
                                                "value": {
                                                    "value": "@if(\n    and(\n        contains(activity('FullLoadCopyWithoutLogging').output, 'errors'),\n        greater(length(activity('FullLoadCopyWithoutLogging').output.errors), 0)\n    ),\n    activity('FullLoadCopyWithoutLogging').output.errors[0].Message,\n    null\n)",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            },
                                            "RowsSkipped": {
                                                "value": {
                                                    "value": "@if(\n    contains(activity('FullLoadCopyWithoutLogging').output, 'rowsSkipped'),\n    activity('FullLoadCopyWithoutLogging').output.rowsSkipped,\n    null\n)",
                                                    "type": "Expression"
                                                },
                                                "type": "Int64"
                                            },
                                            "LogFilePath": {
                                                "value": null,
                                                "type": "String"
                                            }
                                        }
                                    },
                                    "linkedServiceName": {
                                        "referenceName": "LS_configurationDB",
                                        "type": "LinkedServiceReference"
                                    }
                                }
                            ],
                            "ifTrueActivities": [
                                {
                                    "name": "FullLoadCopyWithLogging",
                                    "description": "Copy a table from a database to the configurated Sink dynamically taking by input FwkItem, SrcPath.",
                                    "type": "Copy",
                                    "dependsOn": [],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "source": {
                                            "type": "XmlSource",
                                            "additionalColumns": {
                                                "type": "Expression",
                                                "value": "@if(\n    contains(json(pipeline().parameters.FwkItem['Params']), 'additionalColumns'),\n    json(pipeline().parameters.FwkItem['Params']).additionalColumns,\n    json('[]')\n)"
                                            },
                                            "storeSettings": {
                                                "type": "SftpReadSettings",
                                                "recursive": true,
                                                "enablePartitionDiscovery": false,
                                                "disableChunking": false
                                            },
                                            "formatSettings": {
                                                "type": "XmlReadSettings",
                                                "validationMode": "none",
                                                "detectDataType": true,
                                                "namespaces": false
                                            }
                                        },
                                        "sink": {
                                            "type": "ParquetSink",
                                            "storeSettings": {
                                                "type": "AzureBlobFSWriteSettings"
                                            },
                                            "formatSettings": {
                                                "type": "ParquetWriteSettings"
                                            }
                                        },
                                        "enableStaging": false,
                                        "enableSkipIncompatibleRow": {
                                            "value": "@if(contains(json(pipeline().parameters.FwkItem['Params']), 'enableSkipIncompatibleRow'), json(pipeline().parameters.FwkItem['Params']).enableSkipIncompatibleRow, false)",
                                            "type": "Expression"
                                        },
                                        "logSettings": {
                                            "enableCopyActivityLog": true,
                                            "copyActivityLogSettings": {
                                                "logLevel": "Warning",
                                                "enableReliableLogging": false
                                            },
                                            "logLocationSettings": {
                                                "linkedServiceName": {
                                                    "referenceName": "LS_adls",
                                                    "type": "LinkedServiceReference",
                                                    "parameters": {
                                                        "InstanceURL": {
                                                            "value": "@json(pipeline().parameters.FwkItem['Params']).logSettingsInstanceURL",
                                                            "type": "Expression"
                                                        }
                                                    }
                                                },
                                                "path": {
                                                    "value": "@json(pipeline().parameters.FwkItem['Params']).logSettingsPath",
                                                    "type": "Expression"
                                                }
                                            }
                                        },
                                        "translator": {
                                            "value": "@if(\n    contains(json(pipeline().parameters.FwkItem['Params']), 'mapping'),\n    json(pipeline().parameters.FwkItem['Params']).mapping,\n    '\"mapping\":{}'\n)",
                                            "type": "Expression"
                                        }
                                    },
                                    "inputs": [
                                        {
                                            "referenceName": "DS_SFTP_XML_Source",
                                            "type": "DatasetReference",
                                            "parameters": {
                                                "FwkItem": {
                                                    "value": "@pipeline().parameters.FwkItem",
                                                    "type": "Expression"
                                                },
                                                "ds_inputFileName": {
                                                    "value": "@pipeline().parameters.FileName",
                                                    "type": "Expression"
                                                },
                                                "ds_inputFilePath": {
                                                    "value": "@pipeline().parameters.FilePath",
                                                    "type": "Expression"
                                                }
                                            }
                                        }
                                    ],
                                    "outputs": [
                                        {
                                            "referenceName": "DS_ADLS_PRQ_Sink",
                                            "type": "DatasetReference",
                                            "parameters": {
                                                "InstanceURL": {
                                                    "value": "@pipeline().parameters.FwkItem['SinkInstanceURL']",
                                                    "type": "Expression"
                                                },
                                                "FullPath": {
                                                    "value": "@concat(pipeline().parameters.FwkItem['SinkPath'], \n\t'/',\n\tformatDateTime(pipeline().parameters.PL_01TriggerTime,'yyyy'),\n\tformatDateTime(pipeline().parameters.PL_01TriggerTime,'MM'),\n\tformatDateTime(pipeline().parameters.PL_01TriggerTime,'dd'),\n\tformatDateTime(pipeline().parameters.PL_01TriggerTime,'HH'),\n\tformatDateTime(pipeline().parameters.PL_01TriggerTime,'mm'),\n\t'_',\n\tpipeline().parameters.FwkItem['EntityName'],\n\t'.snappy.parquet'\n)",
                                                    "type": "Expression"
                                                }
                                            }
                                        }
                                    ]
                                },
                                {
                                    "name": "spu_IngtLogUpdate_succeeded",
                                    "description": "Executes the SP spu_IngtLogUpdate to update record into IngtLog table with the execution module information.",
                                    "type": "SqlServerStoredProcedure",
                                    "dependsOn": [
                                        {
                                            "activity": "FullLoadCopyWithLogging",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "storedProcedureName": "[[dbo].[spu_IngtLogUpdate]",
                                        "storedProcedureParameters": {
                                            "IngtOutputId": {
                                                "value": {
                                                    "value": "@pipeline().parameters.FwkItem['IngtOutputId']",
                                                    "type": "Expression"
                                                },
                                                "type": "Int32"
                                            },
                                            "EntRunId": {
                                                "value": {
                                                    "value": "@pipeline().parameters.EntRunId",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            },
                                            "ModuleRunId": {
                                                "value": {
                                                    "value": "@pipeline().parameters.ModuleRunId",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            },
                                            "PipelineStatus": {
                                                "value": {
                                                    "value": "Succeeded",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            },
                                            "RowsRead": {
                                                "value": {
                                                    "value": "@if(\n    contains(activity('FullLoadCopyWithLogging').output, 'rowsRead'),\n    activity('FullLoadCopyWithLogging').output.rowsRead,\n    null\n)",
                                                    "type": "Expression"
                                                },
                                                "type": "Int64"
                                            },
                                            "RowsCopied": {
                                                "value": {
                                                    "value": "@if(\n    contains(activity('FullLoadCopyWithLogging').output, 'rowsCopied'),\n    activity('FullLoadCopyWithLogging').output.rowsCopied,\n    null\n)",
                                                    "type": "Expression"
                                                },
                                                "type": "Int64"
                                            },
                                            "CopyDuration": {
                                                "value": {
                                                    "value": "@if(\n    contains(activity('FullLoadCopyWithLogging').output, 'copyDuration'),\n    activity('FullLoadCopyWithLogging').output.copyDuration,\n    null\n)",
                                                    "type": "Expression"
                                                },
                                                "type": "Double"
                                            },
                                            "Throughput": {
                                                "value": {
                                                    "value": "@if(\n    contains(activity('FullLoadCopyWithLogging').output, 'throughput'),\n    activity('FullLoadCopyWithLogging').output.throughput,\n    null\n)",
                                                    "type": "Expression"
                                                },
                                                "type": "Double"
                                            },
                                            "ErrorMessage": {
                                                "value": null,
                                                "type": "String"
                                            },
                                            "RowsSkipped": {
                                                "value": {
                                                    "value": "@if(\n    contains(activity('FullLoadCopyWithLogging').output, 'rowsSkipped'),\n    activity('FullLoadCopyWithLogging').output.rowsSkipped,\n    null\n)",
                                                    "type": "Expression"
                                                },
                                                "type": "Int64"
                                            },
                                            "LogFilePath": {
                                                "value": {
                                                    "value": "@if(\n    contains(activity('FullLoadCopyWithLogging').output, 'logFilePath'),\n    activity('FullLoadCopyWithLogging').output.logFilePath,\n    null\n)",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            },
                                            "FileName": {
                                                "value": {
                                                    "value": "@if(contains(pipeline().parameters.FwkItem['Path'], '*'), pipeline().parameters.FileName, null)",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            }
                                        }
                                    },
                                    "linkedServiceName": {
                                        "referenceName": "LS_configurationDB",
                                        "type": "LinkedServiceReference"
                                    }
                                },
                                {
                                    "name": "spu_IngtLogUpdate_failed",
                                    "description": "Executes the SP spu_IngtLogUpdate to update record into IngtLog table with the execution module information.",
                                    "type": "SqlServerStoredProcedure",
                                    "dependsOn": [
                                        {
                                            "activity": "FullLoadCopyWithLogging",
                                            "dependencyConditions": [
                                                "Failed"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "storedProcedureName": "[[dbo].[spu_IngtLogUpdate]",
                                        "storedProcedureParameters": {
                                            "IngtOutputId": {
                                                "value": {
                                                    "value": "@pipeline().parameters.FwkItem['IngtOutputId']",
                                                    "type": "Expression"
                                                },
                                                "type": "Int32"
                                            },
                                            "EntRunId": {
                                                "value": {
                                                    "value": "@pipeline().parameters.EntRunId",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            },
                                            "ModuleRunId": {
                                                "value": {
                                                    "value": "@pipeline().parameters.ModuleRunId",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            },
                                            "PipelineStatus": {
                                                "value": {
                                                    "value": "Failed",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            },
                                            "RowsRead": {
                                                "value": null,
                                                "type": "Int64"
                                            },
                                            "RowsCopied": {
                                                "value": null,
                                                "type": "Int64"
                                            },
                                            "CopyDuration": {
                                                "value": null,
                                                "type": "Double"
                                            },
                                            "Throughput": {
                                                "value": null,
                                                "type": "Double"
                                            },
                                            "ErrorMessage": {
                                                "value": {
                                                    "value": "@if(\n    and(\n        contains(activity('FullLoadCopyWithLogging').output, 'errors'),\n        greater(length(activity('FullLoadCopyWithLogging').output.errors), 0)\n    ),\n    activity('FullLoadCopyWithLogging').output.errors[0].Message,\n    null\n)",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            },
                                            "RowsSkipped": {
                                                "value": {
                                                    "value": "@if(\n    contains(activity('FullLoadCopyWithLogging').output, 'rowsSkipped'),\n    activity('FullLoadCopyWithLogging').output.rowsSkipped,\n    null\n)",
                                                    "type": "Expression"
                                                },
                                                "type": "Int64"
                                            },
                                            "LogFilePath": {
                                                "value": {
                                                    "value": "@if(\n    contains(activity('FullLoadCopyWithLogging').output, 'logFilePath'),\n    activity('FullLoadCopyWithLogging').output.logFilePath,\n    null\n)",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            }
                                        }
                                    },
                                    "linkedServiceName": {
                                        "referenceName": "LS_configurationDB",
                                        "type": "LinkedServiceReference"
                                    }
                                }
                            ]
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {}
                },
                "parameters": {
                    "FwkItem": {
                        "type": "array"
                    },
                    "EntRunId": {
                        "type": "string"
                    },
                    "ModuleRunId": {
                        "type": "string"
                    },
                    "FileName": {
                        "type": "string"
                    },
                    "FilePath": {
                        "type": "string"
                    },
                    "PL_01TriggerTime": {
                        "type": "string"
                    }
                },
                "folder": {
                    "name": "01 Ingestion Module/06 SFTP"
                },
                "annotations": []
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/datasets/DS_SFTP_BIN_File')]",
                "[concat(variables('factoryId'), '/datasets/DS_SFTP_XML_Source')]",
                "[concat(variables('factoryId'), '/datasets/DS_ADLS_PRQ_Sink')]",
                "[concat(variables('factoryId'), '/linkedServices/LS_configurationDB')]",
                "[concat(variables('factoryId'), '/linkedServices/LS_adls')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/PL_ING_06_SFTPGetFiles')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "setFilePath",
                        "type": "SetVariable",
                        "dependsOn": [
                            {
                                "activity": "setFileName",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "variableName": "varFwkFilePath",
                            "value": {
                                "value": "@substring(pipeline().parameters.FwkItem['Path'], \n    0, \n    if(equals(lastindexof(pipeline().parameters.FwkItem['Path'],'/'),-1),0,lastindexof(pipeline().parameters.FwkItem['Path'],'/'))\n)",
                                "type": "Expression"
                            }
                        }
                    },
                    {
                        "name": "setFileName",
                        "description": "@dataset().FwkItem['Path']",
                        "type": "SetVariable",
                        "dependsOn": [],
                        "policy": {
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "variableName": "varFwkFileName",
                            "value": {
                                "value": "@substring(pipeline().parameters.FwkItem['Path'], \n    add(lastindexof(pipeline().parameters.FwkItem['Path'],'/'), 1), \n    add(add(length(pipeline().parameters.FwkItem['Path']), mul(lastindexof(pipeline().parameters.FwkItem['Path'],'/'),-1)), -1\n    )\n)",
                                "type": "Expression"
                            }
                        }
                    },
                    {
                        "name": "setFwkFileIfWildcardPosition",
                        "type": "SetVariable",
                        "dependsOn": [
                            {
                                "activity": "setFilePath",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "variableName": "varFwkFileIfWildcardPosition",
                            "value": {
                                "value": "@string(if(equals(indexOf(variables('varFwkFileName'), '*'),-1),0,1))",
                                "type": "Expression"
                            }
                        }
                    },
                    {
                        "name": "setOutput",
                        "type": "SetVariable",
                        "dependsOn": [
                            {
                                "activity": "loopThroughMatchingFileNames",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "variableName": "pipelineReturnValue",
                            "value": [
                                {
                                    "key": "outputFileName",
                                    "value": {
                                        "type": "Expression",
                                        "content": "@variables('varFileName')"
                                    }
                                },
                                {
                                    "key": "outputFilePath",
                                    "value": {
                                        "type": "Expression",
                                        "content": "@variables('varFwkFilePath')"
                                    }
                                }
                            ],
                            "setSystemVariable": true
                        }
                    },
                    {
                        "name": "switchWildcardPresent",
                        "type": "Switch",
                        "dependsOn": [
                            {
                                "activity": "setFwkFileIfWildcardPosition",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "on": {
                                "value": "@variables('varFwkFileIfWildcardPosition')",
                                "type": "Expression"
                            },
                            "cases": [
                                {
                                    "value": "0",
                                    "activities": [
                                        {
                                            "name": "getListOfFileNamesFile",
                                            "type": "GetMetadata",
                                            "dependsOn": [],
                                            "policy": {
                                                "timeout": "0.12:00:00",
                                                "retry": 0,
                                                "retryIntervalInSeconds": 30,
                                                "secureOutput": false,
                                                "secureInput": false
                                            },
                                            "userProperties": [],
                                            "typeProperties": {
                                                "dataset": {
                                                    "referenceName": "DS_SFTP_BIN_Folder",
                                                    "type": "DatasetReference",
                                                    "parameters": {
                                                        "FwkItem": {
                                                            "value": "@pipeline().parameters.FwkItem",
                                                            "type": "Expression"
                                                        },
                                                        "FwkPath": {
                                                            "value": "@variables('varFwkFilePath')",
                                                            "type": "Expression"
                                                        }
                                                    }
                                                },
                                                "fieldList": [
                                                    "childItems"
                                                ],
                                                "storeSettings": {
                                                    "type": "SftpReadSettings",
                                                    "recursive": true,
                                                    "enablePartitionDiscovery": false,
                                                    "disableChunking": false
                                                },
                                                "formatSettings": {
                                                    "type": "BinaryReadSettings"
                                                }
                                            }
                                        },
                                        {
                                            "name": "getListOfFileNamesFilterFile",
                                            "type": "Filter",
                                            "dependsOn": [
                                                {
                                                    "activity": "getListOfFileNamesFile",
                                                    "dependencyConditions": [
                                                        "Succeeded"
                                                    ]
                                                }
                                            ],
                                            "userProperties": [],
                                            "typeProperties": {
                                                "items": {
                                                    "value": "@activity('getListOfFileNamesFile').output.childItems",
                                                    "type": "Expression"
                                                },
                                                "condition": {
                                                    "value": "@and(equals(toLower(item().name), toLower(variables('varFwkFileName'))), equals(item().type,'File'))",
                                                    "type": "Expression"
                                                }
                                            }
                                        },
                                        {
                                            "name": "setMatchingFileNamesFile",
                                            "type": "SetVariable",
                                            "dependsOn": [
                                                {
                                                    "activity": "getListOfFileNamesFilterFile",
                                                    "dependencyConditions": [
                                                        "Succeeded"
                                                    ]
                                                }
                                            ],
                                            "policy": {
                                                "secureOutput": false,
                                                "secureInput": false
                                            },
                                            "userProperties": [],
                                            "typeProperties": {
                                                "variableName": "varMatchingFileNames",
                                                "value": {
                                                    "value": "@activity('getListOfFileNamesFilterFile').output.value",
                                                    "type": "Expression"
                                                }
                                            }
                                        }
                                    ]
                                },
                                {
                                    "value": "1",
                                    "activities": [
                                        {
                                            "name": "getListOfFileNames",
                                            "type": "GetMetadata",
                                            "dependsOn": [
                                                {
                                                    "activity": "setFwkFileRight",
                                                    "dependencyConditions": [
                                                        "Succeeded"
                                                    ]
                                                }
                                            ],
                                            "policy": {
                                                "timeout": "0.12:00:00",
                                                "retry": 0,
                                                "retryIntervalInSeconds": 30,
                                                "secureOutput": false,
                                                "secureInput": false
                                            },
                                            "userProperties": [],
                                            "typeProperties": {
                                                "dataset": {
                                                    "referenceName": "DS_SFTP_BIN_Folder",
                                                    "type": "DatasetReference",
                                                    "parameters": {
                                                        "FwkItem": {
                                                            "value": "@pipeline().parameters.FwkItem",
                                                            "type": "Expression"
                                                        },
                                                        "FwkPath": {
                                                            "value": "@variables('varFwkFilePath')",
                                                            "type": "Expression"
                                                        }
                                                    }
                                                },
                                                "fieldList": [
                                                    "childItems"
                                                ],
                                                "storeSettings": {
                                                    "type": "SftpReadSettings",
                                                    "recursive": true,
                                                    "enablePartitionDiscovery": false,
                                                    "disableChunking": false
                                                },
                                                "formatSettings": {
                                                    "type": "BinaryReadSettings"
                                                }
                                            }
                                        },
                                        {
                                            "name": "setFwkFileLeft",
                                            "type": "SetVariable",
                                            "dependsOn": [],
                                            "policy": {
                                                "secureOutput": false,
                                                "secureInput": false
                                            },
                                            "userProperties": [],
                                            "typeProperties": {
                                                "variableName": "varFwkFileLeft",
                                                "value": {
                                                    "value": "@split(variables('varFwkFileName'), '*')[0]",
                                                    "type": "Expression"
                                                }
                                            }
                                        },
                                        {
                                            "name": "setFwkFileRight",
                                            "type": "SetVariable",
                                            "dependsOn": [
                                                {
                                                    "activity": "setFwkFileLeft",
                                                    "dependencyConditions": [
                                                        "Succeeded"
                                                    ]
                                                }
                                            ],
                                            "policy": {
                                                "secureOutput": false,
                                                "secureInput": false
                                            },
                                            "userProperties": [],
                                            "typeProperties": {
                                                "variableName": "varFwkFileRight",
                                                "value": {
                                                    "value": "@split(variables('varFwkFileName'), '*')[int(variables('varFwkFileIfWildcardPosition'))]",
                                                    "type": "Expression"
                                                }
                                            }
                                        },
                                        {
                                            "name": "getListOfFileNamesFilter",
                                            "type": "Filter",
                                            "dependsOn": [
                                                {
                                                    "activity": "getListOfFileNames",
                                                    "dependencyConditions": [
                                                        "Succeeded"
                                                    ]
                                                }
                                            ],
                                            "userProperties": [],
                                            "typeProperties": {
                                                "items": {
                                                    "value": "@activity('getListOfFileNames').output.childItems",
                                                    "type": "Expression"
                                                },
                                                "condition": {
                                                    "value": "@and(and(startswith(item().name, variables('varFwkFileLeft')), endswith(item().name, variables('varFwkFileRight'))\n    ),\n        equals(item().type,'File'))",
                                                    "type": "Expression"
                                                }
                                            }
                                        },
                                        {
                                            "name": "setMatchingFileNames",
                                            "type": "SetVariable",
                                            "dependsOn": [
                                                {
                                                    "activity": "getListOfFileNamesFilter",
                                                    "dependencyConditions": [
                                                        "Succeeded"
                                                    ]
                                                }
                                            ],
                                            "policy": {
                                                "secureOutput": false,
                                                "secureInput": false
                                            },
                                            "userProperties": [],
                                            "typeProperties": {
                                                "variableName": "varMatchingFileNames",
                                                "value": {
                                                    "value": "@activity('getListOfFileNamesFilter').output.value",
                                                    "type": "Expression"
                                                }
                                            }
                                        }
                                    ]
                                }
                            ]
                        }
                    },
                    {
                        "name": "loopThroughMatchingFileNames",
                        "type": "ForEach",
                        "dependsOn": [
                            {
                                "activity": "Check IngestAllMatchingFiles",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "items": {
                                "value": "@variables('varIngestMatchingFileNames')",
                                "type": "Expression"
                            },
                            "isSequential": true,
                            "activities": [
                                {
                                    "name": "getLastModifiedDateOfTheCurrentIterationFile",
                                    "type": "GetMetadata",
                                    "dependsOn": [],
                                    "policy": {
                                        "timeout": "0.12:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "dataset": {
                                            "referenceName": "DS_SFTP_BIN_File",
                                            "type": "DatasetReference",
                                            "parameters": {
                                                "FwkItem": {
                                                    "value": "@pipeline().parameters.FwkItem",
                                                    "type": "Expression"
                                                },
                                                "ds_inputFileName": {
                                                    "value": "@item().name",
                                                    "type": "Expression"
                                                },
                                                "ds_inputFilePath": {
                                                    "value": "@variables('varFwkFilePath')",
                                                    "type": "Expression"
                                                }
                                            }
                                        },
                                        "fieldList": [
                                            "itemName",
                                            "lastModified"
                                        ],
                                        "storeSettings": {
                                            "type": "SftpReadSettings",
                                            "recursive": true,
                                            "enablePartitionDiscovery": false,
                                            "disableChunking": false
                                        },
                                        "formatSettings": {
                                            "type": "BinaryReadSettings"
                                        }
                                    }
                                },
                                {
                                    "name": "conditionToCheckIfFileDateGreaterThanSetDate",
                                    "type": "IfCondition",
                                    "dependsOn": [
                                        {
                                            "activity": "getLastModifiedDateOfTheCurrentIterationFile",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "userProperties": [],
                                    "typeProperties": {
                                        "expression": {
                                            "value": "@greater(ticks(activity('getLastModifiedDateOfTheCurrentIterationFile').output.lastModified),ticks(formatDateTime(variables('varReferenceDateTime'))))",
                                            "type": "Expression"
                                        },
                                        "ifTrueActivities": [
                                            {
                                                "name": "setFileLastModifiedDate",
                                                "type": "SetVariable",
                                                "dependsOn": [],
                                                "policy": {
                                                    "secureOutput": false,
                                                    "secureInput": false
                                                },
                                                "userProperties": [],
                                                "typeProperties": {
                                                    "variableName": "varReferenceDateTime",
                                                    "value": {
                                                        "value": "@activity('getLastModifiedDateOfTheCurrentIterationFile').output.lastModified",
                                                        "type": "Expression"
                                                    }
                                                }
                                            },
                                            {
                                                "name": "setLatestFileName",
                                                "type": "SetVariable",
                                                "dependsOn": [
                                                    {
                                                        "activity": "setFileLastModifiedDate",
                                                        "dependencyConditions": [
                                                            "Succeeded"
                                                        ]
                                                    }
                                                ],
                                                "policy": {
                                                    "secureOutput": false,
                                                    "secureInput": false
                                                },
                                                "userProperties": [],
                                                "typeProperties": {
                                                    "variableName": "varFileName",
                                                    "value": {
                                                        "value": "@createArray(item())",
                                                        "type": "Expression"
                                                    }
                                                }
                                            }
                                        ]
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "name": "Check IngestAllMatchingFiles",
                        "type": "IfCondition",
                        "dependsOn": [
                            {
                                "activity": "switchWildcardPresent",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "expression": {
                                "value": "@if(contains(pipeline().parameters.FwkItem, 'Params'), \n    if(contains(json(pipeline().parameters.FwkItem['Params']), 'ingestAllMatchingFiles'), \n        bool(json(pipeline().parameters.FwkItem['Params'])['ingestAllMatchingFiles']), \n        false\n    ), \n    false\n)",
                                "type": "Expression"
                            },
                            "ifFalseActivities": [
                                {
                                    "name": "Set varIngestMatchingFileNames",
                                    "type": "SetVariable",
                                    "dependsOn": [],
                                    "policy": {
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "variableName": "varIngestMatchingFileNames",
                                        "value": {
                                            "value": "@variables('varMatchingFileNames')",
                                            "type": "Expression"
                                        }
                                    }
                                }
                            ],
                            "ifTrueActivities": [
                                {
                                    "name": "Set output",
                                    "type": "SetVariable",
                                    "dependsOn": [],
                                    "policy": {
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "variableName": "varFileName",
                                        "value": {
                                            "value": "@variables('varMatchingFileNames')",
                                            "type": "Expression"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {}
                },
                "parameters": {
                    "FwkItem": {
                        "type": "array"
                    }
                },
                "variables": {
                    "varFwkFilePath": {
                        "type": "String"
                    },
                    "varFwkFileName": {
                        "type": "String"
                    },
                    "varFwkFileLeft": {
                        "type": "String"
                    },
                    "varFwkFileRight": {
                        "type": "String"
                    },
                    "varFwkFileIfWildcardPosition": {
                        "type": "String"
                    },
                    "varReferenceDateTime": {
                        "type": "String",
                        "defaultValue": "1900-01-01 00:00:00"
                    },
                    "varFileName": {
                        "type": "Array"
                    },
                    "varMatchingFileNames": {
                        "type": "Array",
                        "defaultValue": []
                    },
                    "varIngestMatchingFileNames": {
                        "type": "Array",
                        "defaultValue": []
                    }
                },
                "folder": {
                    "name": "01 Ingestion Module/06 SFTP"
                },
                "annotations": [],
                "lastPublishTime": "2023-07-06T08:29:14Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/datasets/DS_SFTP_BIN_File')]",
                "[concat(variables('factoryId'), '/datasets/DS_SFTP_BIN_Folder')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/PL_ING_06_SFTPLoad')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Switch_Format",
                        "description": "Evaluates the input value ‘Format’ corresponding to a case that matches the condition.",
                        "type": "Switch",
                        "dependsOn": [],
                        "userProperties": [],
                        "typeProperties": {
                            "on": {
                                "value": "@string(pipeline().parameters.FwkItem['Format'])",
                                "type": "Expression"
                            },
                            "cases": [
                                {
                                    "value": "CSV",
                                    "activities": [
                                        {
                                            "name": "Execute PL_ING_06_01_SFTPCSVCheck",
                                            "description": "",
                                            "type": "ExecutePipeline",
                                            "dependsOn": [],
                                            "policy": {
                                                "secureInput": false
                                            },
                                            "userProperties": [],
                                            "typeProperties": {
                                                "pipeline": {
                                                    "referenceName": "PL_ING_06_01_SFTPCSVCheck",
                                                    "type": "PipelineReference"
                                                },
                                                "waitOnCompletion": true,
                                                "parameters": {
                                                    "FwkItem": {
                                                        "value": "@pipeline().parameters.FwkItem",
                                                        "type": "Expression"
                                                    },
                                                    "PL_01TriggerTime": {
                                                        "value": "@pipeline().parameters.PL_01TriggerTime",
                                                        "type": "Expression"
                                                    },
                                                    "EntRunId": {
                                                        "value": "@pipeline().parameters.EntRunId",
                                                        "type": "Expression"
                                                    },
                                                    "ModuleRunId": {
                                                        "value": "@pipeline().parameters.ModuleRunId",
                                                        "type": "Expression"
                                                    }
                                                }
                                            }
                                        }
                                    ]
                                },
                                {
                                    "value": "EXCEL",
                                    "activities": [
                                        {
                                            "name": "Execute PL_ING_06_02_SFTPExcelCheck",
                                            "type": "ExecutePipeline",
                                            "dependsOn": [],
                                            "policy": {
                                                "secureInput": false
                                            },
                                            "userProperties": [],
                                            "typeProperties": {
                                                "pipeline": {
                                                    "referenceName": "PL_ING_06_02_SFTPExcelCheck",
                                                    "type": "PipelineReference"
                                                },
                                                "waitOnCompletion": true,
                                                "parameters": {
                                                    "FwkItem": {
                                                        "value": "@pipeline().parameters.FwkItem",
                                                        "type": "Expression"
                                                    },
                                                    "PL_01TriggerTime": {
                                                        "value": "@pipeline().parameters.PL_01TriggerTime",
                                                        "type": "Expression"
                                                    },
                                                    "EntRunId": {
                                                        "value": "@pipeline().parameters.EntRunId",
                                                        "type": "Expression"
                                                    },
                                                    "ModuleRunId": {
                                                        "value": "@pipeline().parameters.ModuleRunId",
                                                        "type": "Expression"
                                                    }
                                                }
                                            }
                                        }
                                    ]
                                },
                                {
                                    "value": "XML",
                                    "activities": [
                                        {
                                            "name": "Execute PL_ING_06_03_SFTPXMLCheck",
                                            "type": "ExecutePipeline",
                                            "dependsOn": [],
                                            "policy": {
                                                "secureInput": false
                                            },
                                            "userProperties": [],
                                            "typeProperties": {
                                                "pipeline": {
                                                    "referenceName": "PL_ING_06_03_SFTPXMLCheck",
                                                    "type": "PipelineReference"
                                                },
                                                "waitOnCompletion": true,
                                                "parameters": {
                                                    "FwkItem": {
                                                        "value": "@pipeline().parameters.FwkItem",
                                                        "type": "Expression"
                                                    },
                                                    "PL_01TriggerTime": {
                                                        "value": "@pipeline().parameters.PL_01TriggerTime",
                                                        "type": "Expression"
                                                    },
                                                    "EntRunId": {
                                                        "value": "@pipeline().parameters.EntRunId",
                                                        "type": "Expression"
                                                    },
                                                    "ModuleRunId": {
                                                        "value": "@pipeline().parameters.ModuleRunId",
                                                        "type": "Expression"
                                                    }
                                                }
                                            }
                                        }
                                    ]
                                }
                            ]
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {}
                },
                "parameters": {
                    "FwkItem": {
                        "type": "array"
                    },
                    "PL_01TriggerTime": {
                        "type": "string"
                    },
                    "EntRunId": {
                        "type": "string"
                    },
                    "ModuleRunId": {
                        "type": "string"
                    }
                },
                "folder": {
                    "name": "01 Ingestion Module/06 SFTP"
                },
                "annotations": [],
                "lastPublishTime": "2023-07-06T08:29:17Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/pipelines/PL_ING_06_01_SFTPCSVCheck')]",
                "[concat(variables('factoryId'), '/pipelines/PL_ING_06_02_SFTPExcelCheck')]",
                "[concat(variables('factoryId'), '/pipelines/PL_ING_06_03_SFTPXMLCheck')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/PL_ING_07_01_ADLSCSVCheck')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Select CSV files by wildcard",
                        "type": "ExecutePipeline",
                        "dependsOn": [],
                        "policy": {
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "PL_ING_07_ADLSGetFiles",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {
                                "FwkItem": {
                                    "value": "@pipeline().parameters.FwkItem",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    {
                        "name": "IfMissingFile",
                        "type": "IfCondition",
                        "dependsOn": [
                            {
                                "activity": "Select CSV files by wildcard",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "expression": {
                                "value": "@equals(length(activity('Select CSV files by wildcard').output.pipelineReturnValue['outputFileName']), 0)",
                                "type": "Expression"
                            },
                            "ifFalseActivities": [
                                {
                                    "name": "Execute ADLSIngestAllCSVFiles",
                                    "type": "ExecutePipeline",
                                    "dependsOn": [],
                                    "policy": {
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "pipeline": {
                                            "referenceName": "PL_ING_07_01_ADLSIngestAllCSVFiles",
                                            "type": "PipelineReference"
                                        },
                                        "waitOnCompletion": true,
                                        "parameters": {
                                            "FileNames": {
                                                "value": "@activity('Select CSV files by wildcard').output.pipelineReturnValue['outputFileName']",
                                                "type": "Expression"
                                            },
                                            "FwkItem": {
                                                "value": "@pipeline().parameters.FwkItem",
                                                "type": "Expression"
                                            },
                                            "EntRunId": {
                                                "value": "@pipeline().parameters.EntRunId",
                                                "type": "Expression"
                                            },
                                            "ModuleRunId": {
                                                "value": "@pipeline().parameters.ModuleRunId",
                                                "type": "Expression"
                                            },
                                            "FilePath": {
                                                "value": "@activity('Select CSV files by wildcard').output.pipelineReturnValue['outputFilePath']",
                                                "type": "Expression"
                                            },
                                            "PL_01TriggerTime": {
                                                "value": "@pipeline().parameters.PL_01TriggerTime",
                                                "type": "Expression"
                                            }
                                        }
                                    }
                                }
                            ],
                            "ifTrueActivities": [
                                {
                                    "name": "spi_IngtLogInsert",
                                    "description": "Executes the SP spi_IngtLogInsert to insert record into IngtLog table with the execution module information.",
                                    "type": "SqlServerStoredProcedure",
                                    "dependsOn": [],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "storedProcedureName": "[[dbo].[spi_IngtLogInsert]",
                                        "storedProcedureParameters": {
                                            "IngtOutputId": {
                                                "value": {
                                                    "value": "@pipeline().parameters.FwkItem['IngtOutputId']",
                                                    "type": "Expression"
                                                },
                                                "type": "Int32"
                                            },
                                            "EntRunId": {
                                                "value": {
                                                    "value": "@pipeline().parameters.EntRunId",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            },
                                            "ModuleRunId": {
                                                "value": {
                                                    "value": "@pipeline().parameters.ModuleRunId",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            },
                                            "PipelineStatus": {
                                                "value": {
                                                    "value": "Skipped - Missing source file",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            },
                                            "StartDate": {
                                                "value": {
                                                    "value": "@formatdatetime(pipeline().TriggerTime)",
                                                    "type": "Expression"
                                                },
                                                "type": "Datetime"
                                            },
                                            "RowsRead": {
                                                "value": null,
                                                "type": "Int64"
                                            },
                                            "RowsCopied": {
                                                "value": null,
                                                "type": "Int64"
                                            },
                                            "CopyDuration": {
                                                "value": null,
                                                "type": "Double"
                                            },
                                            "Throughput": {
                                                "value": null,
                                                "type": "Double"
                                            },
                                            "ErrorMessage": {
                                                "value": null,
                                                "type": "String"
                                            },
                                            "FileName": {
                                                "value": null,
                                                "type": "String"
                                            }
                                        }
                                    },
                                    "linkedServiceName": {
                                        "referenceName": "LS_configurationDB",
                                        "type": "LinkedServiceReference"
                                    }
                                }
                            ]
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {}
                },
                "parameters": {
                    "FwkItem": {
                        "type": "array"
                    },
                    "PL_01TriggerTime": {
                        "type": "string"
                    },
                    "EntRunId": {
                        "type": "string"
                    },
                    "ModuleRunId": {
                        "type": "string"
                    }
                },
                "folder": {
                    "name": "01 Ingestion Module/07 ADLS"
                },
                "annotations": [],
                "lastPublishTime": "2023-07-06T08:29:16Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/pipelines/PL_ING_07_ADLSGetFiles')]",
                "[concat(variables('factoryId'), '/pipelines/PL_ING_07_01_ADLSIngestAllCSVFiles')]",
                "[concat(variables('factoryId'), '/linkedServices/LS_configurationDB')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/PL_ING_07_01_ADLSCSVLoad')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "IF archivePath Defined",
                        "description": "if the archive path is defined then copy source file with timestamp prefix to archive folder",
                        "type": "IfCondition",
                        "dependsOn": [
                            {
                                "activity": "If Logging Required",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "expression": {
                                "value": "@empty(pipeline().parameters.FwkItem['ArchivePath'])",
                                "type": "Expression"
                            },
                            "ifFalseActivities": [
                                {
                                    "name": "Execute FileArchival",
                                    "type": "ExecutePipeline",
                                    "dependsOn": [],
                                    "policy": {
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "pipeline": {
                                            "referenceName": "PL_ING_07_99_Archive",
                                            "type": "PipelineReference"
                                        },
                                        "waitOnCompletion": true,
                                        "parameters": {
                                            "FwkItem": {
                                                "value": "@pipeline().parameters.FwkItem",
                                                "type": "Expression"
                                            },
                                            "PL_01TriggerTime": {
                                                "value": "@pipeline().parameters.PL_01TriggerTime",
                                                "type": "Expression"
                                            },
                                            "FilePath": {
                                                "value": "@pipeline().parameters.FilePath",
                                                "type": "Expression"
                                            },
                                            "FileName": {
                                                "value": "@pipeline().parameters.FileName",
                                                "type": "Expression"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "name": "If Logging Required",
                        "type": "IfCondition",
                        "dependsOn": [],
                        "userProperties": [],
                        "typeProperties": {
                            "expression": {
                                "value": "@if(and(contains(json(pipeline().parameters.FwkItem['Params']), 'logSettingsInstanceURL'), contains(json(pipeline().parameters.FwkItem['Params']), 'logSettingsPath')), true, false)",
                                "type": "Expression"
                            },
                            "ifFalseActivities": [
                                {
                                    "name": "FullLoadCopyWithoutLogging",
                                    "description": "Copy a table from a database to the configurated Sink dynamically taking by input FwkItem, SrcPath.",
                                    "type": "Copy",
                                    "dependsOn": [],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "source": {
                                            "type": "DelimitedTextSource",
                                            "additionalColumns": {
                                                "type": "Expression",
                                                "value": "@if(\n    contains(json(pipeline().parameters.FwkItem['Params']), 'additionalColumns'),\n    json(pipeline().parameters.FwkItem['Params']).additionalColumns,\n    json('[]')\n)"
                                            },
                                            "storeSettings": {
                                                "type": "AzureBlobFSReadSettings",
                                                "recursive": true,
                                                "enablePartitionDiscovery": false
                                            },
                                            "formatSettings": {
                                                "type": "DelimitedTextReadSettings",
                                                "skipLineCount": {
                                                    "value": "@json(pipeline().parameters.FwkItem['Params']).skipLineCount",
                                                    "type": "Expression"
                                                }
                                            }
                                        },
                                        "sink": {
                                            "type": "ParquetSink",
                                            "storeSettings": {
                                                "type": "AzureBlobFSWriteSettings"
                                            },
                                            "formatSettings": {
                                                "type": "ParquetWriteSettings"
                                            }
                                        },
                                        "enableStaging": false,
                                        "enableSkipIncompatibleRow": {
                                            "value": "@if(contains(json(pipeline().parameters.FwkItem['Params']), 'enableSkipIncompatibleRow'), json(pipeline().parameters.FwkItem['Params']).enableSkipIncompatibleRow, false)",
                                            "type": "Expression"
                                        },
                                        "translator": {
                                            "value": "@if(\n    contains(json(pipeline().parameters.FwkItem['Params']), 'mapping'),\n    json(pipeline().parameters.FwkItem['Params']).mapping,\n    '\"mapping\":{}'\n)",
                                            "type": "Expression"
                                        }
                                    },
                                    "inputs": [
                                        {
                                            "referenceName": "DS_ADLS_CSV_Source",
                                            "type": "DatasetReference",
                                            "parameters": {
                                                "FwkItem": {
                                                    "value": "@pipeline().parameters.FwkItem",
                                                    "type": "Expression"
                                                },
                                                "ds_inputFileName": {
                                                    "value": "@pipeline().parameters.FileName",
                                                    "type": "Expression"
                                                },
                                                "ds_inputFilePath": {
                                                    "value": "@pipeline().parameters.FilePath",
                                                    "type": "Expression"
                                                }
                                            }
                                        }
                                    ],
                                    "outputs": [
                                        {
                                            "referenceName": "DS_ADLS_PRQ_Sink",
                                            "type": "DatasetReference",
                                            "parameters": {
                                                "InstanceURL": {
                                                    "value": "@pipeline().parameters.FwkItem['SinkInstanceURL']",
                                                    "type": "Expression"
                                                },
                                                "FullPath": {
                                                    "value": "@concat(pipeline().parameters.FwkItem['SinkPath'], \n\t'/',\n\tformatDateTime(pipeline().parameters.PL_01TriggerTime,'yyyy'),\n\tformatDateTime(pipeline().parameters.PL_01TriggerTime,'MM'),\n\tformatDateTime(pipeline().parameters.PL_01TriggerTime,'dd'),\n\tformatDateTime(pipeline().parameters.PL_01TriggerTime,'HH'),\n\tformatDateTime(pipeline().parameters.PL_01TriggerTime,'mm'),\n\t'_',\n\tutcnow(),\n\t'_',\n\tpipeline().parameters.FwkItem['EntityName'],\n\t'.snappy.parquet'\n)",
                                                    "type": "Expression"
                                                }
                                            }
                                        }
                                    ]
                                },
                                {
                                    "name": "spu_IngtLogUpdate_succeeded2",
                                    "description": "Executes the SP spu_IngtLogUpdate to update record into IngtLog table with the execution module information.",
                                    "type": "SqlServerStoredProcedure",
                                    "dependsOn": [
                                        {
                                            "activity": "FullLoadCopyWithoutLogging",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "storedProcedureName": "[[dbo].[spu_IngtLogUpdate]",
                                        "storedProcedureParameters": {
                                            "IngtOutputId": {
                                                "value": {
                                                    "value": "@pipeline().parameters.FwkItem['IngtOutputId']",
                                                    "type": "Expression"
                                                },
                                                "type": "Int32"
                                            },
                                            "EntRunId": {
                                                "value": {
                                                    "value": "@pipeline().parameters.EntRunId",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            },
                                            "ModuleRunId": {
                                                "value": {
                                                    "value": "@pipeline().parameters.ModuleRunId",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            },
                                            "PipelineStatus": {
                                                "value": {
                                                    "value": "Succeeded",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            },
                                            "RowsRead": {
                                                "value": {
                                                    "value": "@if(\n    contains(activity('FullLoadCopyWithoutLogging').output, 'rowsRead'),\n    activity('FullLoadCopyWithoutLogging').output.rowsRead,\n    null\n)",
                                                    "type": "Expression"
                                                },
                                                "type": "Int64"
                                            },
                                            "RowsCopied": {
                                                "value": {
                                                    "value": "@if(\n    contains(activity('FullLoadCopyWithoutLogging').output, 'rowsCopied'),\n    activity('FullLoadCopyWithoutLogging').output.rowsCopied,\n    null\n)",
                                                    "type": "Expression"
                                                },
                                                "type": "Int64"
                                            },
                                            "CopyDuration": {
                                                "value": {
                                                    "value": "@if(\n    contains(activity('FullLoadCopyWithoutLogging').output, 'copyDuration'),\n    activity('FullLoadCopyWithoutLogging').output.copyDuration,\n    null\n)",
                                                    "type": "Expression"
                                                },
                                                "type": "Double"
                                            },
                                            "Throughput": {
                                                "value": {
                                                    "value": "@if(\n    contains(activity('FullLoadCopyWithoutLogging').output, 'throughput'),\n    activity('FullLoadCopyWithoutLogging').output.throughput,\n    null\n)",
                                                    "type": "Expression"
                                                },
                                                "type": "Double"
                                            },
                                            "ErrorMessage": {
                                                "value": null,
                                                "type": "String"
                                            },
                                            "RowsSkipped": {
                                                "value": {
                                                    "value": "@if(\n    contains(activity('FullLoadCopyWithoutLogging').output, 'rowsSkipped'),\n    activity('FullLoadCopyWithoutLogging').output.rowsSkipped,\n    null\n)",
                                                    "type": "Expression"
                                                },
                                                "type": "Int64"
                                            },
                                            "LogFilePath": {
                                                "value": null,
                                                "type": "String"
                                            },
                                            "FileName": {
                                                "value": {
                                                    "value": "@if(contains(pipeline().parameters.FwkItem['Path'], '*'), pipeline().parameters.FileName, null)",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            }
                                        }
                                    },
                                    "linkedServiceName": {
                                        "referenceName": "LS_configurationDB",
                                        "type": "LinkedServiceReference"
                                    }
                                },
                                {
                                    "name": "spu_IngtLogUpdate_failed2",
                                    "description": "Executes the SP spu_IngtLogUpdate to update record into IngtLog table with the execution module information.",
                                    "type": "SqlServerStoredProcedure",
                                    "dependsOn": [
                                        {
                                            "activity": "FullLoadCopyWithoutLogging",
                                            "dependencyConditions": [
                                                "Failed"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "storedProcedureName": "[[dbo].[spu_IngtLogUpdate]",
                                        "storedProcedureParameters": {
                                            "IngtOutputId": {
                                                "value": {
                                                    "value": "@pipeline().parameters.FwkItem['IngtOutputId']",
                                                    "type": "Expression"
                                                },
                                                "type": "Int32"
                                            },
                                            "EntRunId": {
                                                "value": {
                                                    "value": "@pipeline().parameters.EntRunId",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            },
                                            "ModuleRunId": {
                                                "value": {
                                                    "value": "@pipeline().parameters.ModuleRunId",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            },
                                            "PipelineStatus": {
                                                "value": {
                                                    "value": "Failed",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            },
                                            "RowsRead": {
                                                "value": null,
                                                "type": "Int64"
                                            },
                                            "RowsCopied": {
                                                "value": null,
                                                "type": "Int64"
                                            },
                                            "CopyDuration": {
                                                "value": null,
                                                "type": "Double"
                                            },
                                            "Throughput": {
                                                "value": null,
                                                "type": "Double"
                                            },
                                            "ErrorMessage": {
                                                "value": {
                                                    "value": "@if(\n    and(\n        contains(activity('FullLoadCopyWithoutLogging').output, 'errors'),\n        greater(length(activity('FullLoadCopyWithoutLogging').output.errors), 0)\n    ),\n    activity('FullLoadCopyWithoutLogging').output.errors[0].Message,\n    null\n)",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            },
                                            "RowsSkipped": {
                                                "value": {
                                                    "value": "@if(\n    contains(activity('FullLoadCopyWithoutLogging').output, 'rowsSkipped'),\n    activity('FullLoadCopyWithoutLogging').output.rowsSkipped,\n    null\n)",
                                                    "type": "Expression"
                                                },
                                                "type": "Int64"
                                            },
                                            "LogFilePath": {
                                                "value": null,
                                                "type": "String"
                                            }
                                        }
                                    },
                                    "linkedServiceName": {
                                        "referenceName": "LS_configurationDB",
                                        "type": "LinkedServiceReference"
                                    }
                                }
                            ],
                            "ifTrueActivities": [
                                {
                                    "name": "FullLoadCopyWithLogging",
                                    "description": "Copy a table from a database to the configurated Sink dynamically taking by input FwkItem, SrcPath.",
                                    "type": "Copy",
                                    "dependsOn": [],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "source": {
                                            "type": "DelimitedTextSource",
                                            "additionalColumns": {
                                                "type": "Expression",
                                                "value": "@if(\n    contains(json(pipeline().parameters.FwkItem['Params']), 'additionalColumns'),\n    json(pipeline().parameters.FwkItem['Params']).additionalColumns,\n    json('[]')\n)"
                                            },
                                            "storeSettings": {
                                                "type": "AzureBlobFSReadSettings",
                                                "recursive": true,
                                                "enablePartitionDiscovery": false
                                            },
                                            "formatSettings": {
                                                "type": "DelimitedTextReadSettings",
                                                "skipLineCount": {
                                                    "value": "@json(pipeline().parameters.FwkItem['Params']).skipLineCount",
                                                    "type": "Expression"
                                                }
                                            }
                                        },
                                        "sink": {
                                            "type": "ParquetSink",
                                            "storeSettings": {
                                                "type": "AzureBlobFSWriteSettings"
                                            },
                                            "formatSettings": {
                                                "type": "ParquetWriteSettings"
                                            }
                                        },
                                        "enableStaging": false,
                                        "enableSkipIncompatibleRow": {
                                            "value": "@if(contains(json(pipeline().parameters.FwkItem['Params']), 'enableSkipIncompatibleRow'), json(pipeline().parameters.FwkItem['Params']).enableSkipIncompatibleRow, false)",
                                            "type": "Expression"
                                        },
                                        "logSettings": {
                                            "enableCopyActivityLog": true,
                                            "copyActivityLogSettings": {
                                                "logLevel": "Warning",
                                                "enableReliableLogging": false
                                            },
                                            "logLocationSettings": {
                                                "linkedServiceName": {
                                                    "referenceName": "LS_adls",
                                                    "type": "LinkedServiceReference",
                                                    "parameters": {
                                                        "InstanceURL": {
                                                            "value": "@json(pipeline().parameters.FwkItem['Params']).logSettingsInstanceURL",
                                                            "type": "Expression"
                                                        }
                                                    }
                                                },
                                                "path": {
                                                    "value": "@json(pipeline().parameters.FwkItem['Params']).logSettingsPath",
                                                    "type": "Expression"
                                                }
                                            }
                                        },
                                        "translator": {
                                            "value": "@if(\n    contains(json(pipeline().parameters.FwkItem['Params']), 'mapping'),\n    json(pipeline().parameters.FwkItem['Params']).mapping,\n    '\"mapping\":{}'\n)",
                                            "type": "Expression"
                                        }
                                    },
                                    "inputs": [
                                        {
                                            "referenceName": "DS_ADLS_CSV_Source",
                                            "type": "DatasetReference",
                                            "parameters": {
                                                "FwkItem": {
                                                    "value": "@pipeline().parameters.FwkItem",
                                                    "type": "Expression"
                                                },
                                                "ds_inputFileName": {
                                                    "value": "@pipeline().parameters.FileName",
                                                    "type": "Expression"
                                                },
                                                "ds_inputFilePath": {
                                                    "value": "@pipeline().parameters.FilePath",
                                                    "type": "Expression"
                                                }
                                            }
                                        }
                                    ],
                                    "outputs": [
                                        {
                                            "referenceName": "DS_ADLS_PRQ_Sink",
                                            "type": "DatasetReference",
                                            "parameters": {
                                                "InstanceURL": {
                                                    "value": "@pipeline().parameters.FwkItem['SinkInstanceURL']",
                                                    "type": "Expression"
                                                },
                                                "FullPath": {
                                                    "value": "@concat(pipeline().parameters.FwkItem['SinkPath'], \n\t'/',\n\tformatDateTime(pipeline().parameters.PL_01TriggerTime,'yyyy'),\n\tformatDateTime(pipeline().parameters.PL_01TriggerTime,'MM'),\n\tformatDateTime(pipeline().parameters.PL_01TriggerTime,'dd'),\n\tformatDateTime(pipeline().parameters.PL_01TriggerTime,'HH'),\n\tformatDateTime(pipeline().parameters.PL_01TriggerTime,'mm'),\n\t'_',\n\tutcnow(),\n\t'_',\n\tpipeline().parameters.FwkItem['EntityName'],\n\t'.snappy.parquet'\n)",
                                                    "type": "Expression"
                                                }
                                            }
                                        }
                                    ]
                                },
                                {
                                    "name": "spu_IngtLogUpdate_succeeded",
                                    "description": "Executes the SP spu_IngtLogUpdate to update record into IngtLog table with the execution module information.",
                                    "type": "SqlServerStoredProcedure",
                                    "dependsOn": [
                                        {
                                            "activity": "FullLoadCopyWithLogging",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "storedProcedureName": "[[dbo].[spu_IngtLogUpdate]",
                                        "storedProcedureParameters": {
                                            "IngtOutputId": {
                                                "value": {
                                                    "value": "@pipeline().parameters.FwkItem['IngtOutputId']",
                                                    "type": "Expression"
                                                },
                                                "type": "Int32"
                                            },
                                            "EntRunId": {
                                                "value": {
                                                    "value": "@pipeline().parameters.EntRunId",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            },
                                            "ModuleRunId": {
                                                "value": {
                                                    "value": "@pipeline().parameters.ModuleRunId",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            },
                                            "PipelineStatus": {
                                                "value": {
                                                    "value": "Succeeded",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            },
                                            "RowsRead": {
                                                "value": {
                                                    "value": "@if(\n    contains(activity('FullLoadCopyWithLogging').output, 'rowsRead'),\n    activity('FullLoadCopyWithLogging').output.rowsRead,\n    null\n)",
                                                    "type": "Expression"
                                                },
                                                "type": "Int64"
                                            },
                                            "RowsCopied": {
                                                "value": {
                                                    "value": "@if(\n    contains(activity('FullLoadCopyWithLogging').output, 'rowsCopied'),\n    activity('FullLoadCopyWithLogging').output.rowsCopied,\n    null\n)",
                                                    "type": "Expression"
                                                },
                                                "type": "Int64"
                                            },
                                            "CopyDuration": {
                                                "value": {
                                                    "value": "@if(\n    contains(activity('FullLoadCopyWithLogging').output, 'copyDuration'),\n    activity('FullLoadCopyWithLogging').output.copyDuration,\n    null\n)",
                                                    "type": "Expression"
                                                },
                                                "type": "Double"
                                            },
                                            "Throughput": {
                                                "value": {
                                                    "value": "@if(\n    contains(activity('FullLoadCopyWithLogging').output, 'throughput'),\n    activity('FullLoadCopyWithLogging').output.throughput,\n    null\n)",
                                                    "type": "Expression"
                                                },
                                                "type": "Double"
                                            },
                                            "ErrorMessage": {
                                                "value": null,
                                                "type": "String"
                                            },
                                            "RowsSkipped": {
                                                "value": {
                                                    "value": "@if(\n    contains(activity('FullLoadCopyWithLogging').output, 'rowsSkipped'),\n    activity('FullLoadCopyWithLogging').output.rowsSkipped,\n    null\n)",
                                                    "type": "Expression"
                                                },
                                                "type": "Int64"
                                            },
                                            "LogFilePath": {
                                                "value": {
                                                    "value": "@if(\n    contains(activity('FullLoadCopyWithLogging').output, 'logFilePath'),\n    activity('FullLoadCopyWithLogging').output.logFilePath,\n    null\n)",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            },
                                            "FileName": {
                                                "value": {
                                                    "value": "@if(contains(pipeline().parameters.FwkItem['Path'], '*'), pipeline().parameters.FileName, null)",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            }
                                        }
                                    },
                                    "linkedServiceName": {
                                        "referenceName": "LS_configurationDB",
                                        "type": "LinkedServiceReference"
                                    }
                                },
                                {
                                    "name": "spu_IngtLogUpdate_failed",
                                    "description": "Executes the SP spu_IngtLogUpdate to update record into IngtLog table with the execution module information.",
                                    "type": "SqlServerStoredProcedure",
                                    "dependsOn": [
                                        {
                                            "activity": "FullLoadCopyWithLogging",
                                            "dependencyConditions": [
                                                "Failed"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "storedProcedureName": "[[dbo].[spu_IngtLogUpdate]",
                                        "storedProcedureParameters": {
                                            "IngtOutputId": {
                                                "value": {
                                                    "value": "@pipeline().parameters.FwkItem['IngtOutputId']",
                                                    "type": "Expression"
                                                },
                                                "type": "Int32"
                                            },
                                            "EntRunId": {
                                                "value": {
                                                    "value": "@pipeline().parameters.EntRunId",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            },
                                            "ModuleRunId": {
                                                "value": {
                                                    "value": "@pipeline().parameters.ModuleRunId",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            },
                                            "PipelineStatus": {
                                                "value": {
                                                    "value": "Failed",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            },
                                            "RowsRead": {
                                                "value": null,
                                                "type": "Int64"
                                            },
                                            "RowsCopied": {
                                                "value": null,
                                                "type": "Int64"
                                            },
                                            "CopyDuration": {
                                                "value": null,
                                                "type": "Double"
                                            },
                                            "Throughput": {
                                                "value": null,
                                                "type": "Double"
                                            },
                                            "ErrorMessage": {
                                                "value": {
                                                    "value": "@if(\n    and(\n        contains(activity('FullLoadCopyWithLogging').output, 'errors'),\n        greater(length(activity('FullLoadCopyWithLogging').output.errors), 0)\n    ),\n    activity('FullLoadCopyWithLogging').output.errors[0].Message,\n    null\n)",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            },
                                            "RowsSkipped": {
                                                "value": {
                                                    "value": "@if(\n    contains(activity('FullLoadCopyWithLogging').output, 'rowsSkipped'),\n    activity('FullLoadCopyWithLogging').output.rowsSkipped,\n    null\n)",
                                                    "type": "Expression"
                                                },
                                                "type": "Int64"
                                            },
                                            "LogFilePath": {
                                                "value": {
                                                    "value": "@if(\n    contains(activity('FullLoadCopyWithLogging').output, 'logFilePath'),\n    activity('FullLoadCopyWithLogging').output.logFilePath,\n    null\n)",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            }
                                        }
                                    },
                                    "linkedServiceName": {
                                        "referenceName": "LS_configurationDB",
                                        "type": "LinkedServiceReference"
                                    }
                                }
                            ]
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {}
                },
                "parameters": {
                    "FwkItem": {
                        "type": "array"
                    },
                    "EntRunId": {
                        "type": "string"
                    },
                    "ModuleRunId": {
                        "type": "string"
                    },
                    "FileName": {
                        "type": "string"
                    },
                    "FilePath": {
                        "type": "string"
                    },
                    "PL_01TriggerTime": {
                        "type": "string"
                    }
                },
                "folder": {
                    "name": "01 Ingestion Module/07 ADLS"
                },
                "annotations": []
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/pipelines/PL_ING_07_99_Archive')]",
                "[concat(variables('factoryId'), '/datasets/DS_ADLS_CSV_Source')]",
                "[concat(variables('factoryId'), '/datasets/DS_ADLS_PRQ_Sink')]",
                "[concat(variables('factoryId'), '/linkedServices/LS_configurationDB')]",
                "[concat(variables('factoryId'), '/linkedServices/LS_adls')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/PL_ING_07_01_ADLSIngestAllCSVFiles')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "ForEach CSV file",
                        "type": "ForEach",
                        "dependsOn": [],
                        "userProperties": [],
                        "typeProperties": {
                            "items": {
                                "value": "@pipeline().parameters.FileNames",
                                "type": "Expression"
                            },
                            "isSequential": true,
                            "activities": [
                                {
                                    "name": "Execute ADLSCSVLoad",
                                    "type": "ExecutePipeline",
                                    "dependsOn": [
                                        {
                                            "activity": "spi_IngtLogInsert",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "pipeline": {
                                            "referenceName": "PL_ING_07_01_ADLSCSVLoad",
                                            "type": "PipelineReference"
                                        },
                                        "waitOnCompletion": true,
                                        "parameters": {
                                            "FwkItem": {
                                                "value": "@pipeline().parameters.FwkItem",
                                                "type": "Expression"
                                            },
                                            "EntRunId": {
                                                "value": "@pipeline().parameters.EntRunId",
                                                "type": "Expression"
                                            },
                                            "ModuleRunId": {
                                                "value": "@pipeline().parameters.ModuleRunId",
                                                "type": "Expression"
                                            },
                                            "FileName": {
                                                "value": "@item().name",
                                                "type": "Expression"
                                            },
                                            "FilePath": {
                                                "value": "@pipeline().parameters.FilePath",
                                                "type": "Expression"
                                            },
                                            "PL_01TriggerTime": {
                                                "value": "@pipeline().parameters.PL_01TriggerTime",
                                                "type": "Expression"
                                            }
                                        }
                                    }
                                },
                                {
                                    "name": "spi_IngtLogInsert",
                                    "description": "Executes the SP spi_IngtLogInsert to insert record into IngtLog table with the execution module information.",
                                    "type": "SqlServerStoredProcedure",
                                    "dependsOn": [],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "storedProcedureName": "[[dbo].[spi_IngtLogInsert]",
                                        "storedProcedureParameters": {
                                            "IngtOutputId": {
                                                "value": {
                                                    "value": "@pipeline().parameters.FwkItem['IngtOutputId']",
                                                    "type": "Expression"
                                                },
                                                "type": "Int32"
                                            },
                                            "EntRunId": {
                                                "value": {
                                                    "value": "@pipeline().parameters.EntRunId",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            },
                                            "ModuleRunId": {
                                                "value": {
                                                    "value": "@pipeline().parameters.ModuleRunId",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            },
                                            "PipelineStatus": {
                                                "value": {
                                                    "value": "InProgress",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            },
                                            "StartDate": {
                                                "value": {
                                                    "value": "@formatdatetime(pipeline().TriggerTime)",
                                                    "type": "Expression"
                                                },
                                                "type": "Datetime"
                                            },
                                            "RowsRead": {
                                                "value": null,
                                                "type": "Int64"
                                            },
                                            "RowsCopied": {
                                                "value": null,
                                                "type": "Int64"
                                            },
                                            "CopyDuration": {
                                                "value": null,
                                                "type": "Double"
                                            },
                                            "Throughput": {
                                                "value": null,
                                                "type": "Double"
                                            },
                                            "ErrorMessage": {
                                                "value": null,
                                                "type": "String"
                                            },
                                            "FileName": {
                                                "value": {
                                                    "value": "@if(contains(pipeline().parameters.FwkItem['Path'], '*'), item().name, null)",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            }
                                        }
                                    },
                                    "linkedServiceName": {
                                        "referenceName": "LS_configurationDB",
                                        "type": "LinkedServiceReference"
                                    }
                                }
                            ]
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {}
                },
                "parameters": {
                    "FileNames": {
                        "type": "array"
                    },
                    "FwkItem": {
                        "type": "array"
                    },
                    "EntRunId": {
                        "type": "string"
                    },
                    "ModuleRunId": {
                        "type": "string"
                    },
                    "FilePath": {
                        "type": "string"
                    },
                    "PL_01TriggerTime": {
                        "type": "string"
                    }
                },
                "folder": {
                    "name": "01 Ingestion Module/07 ADLS"
                },
                "annotations": []
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/pipelines/PL_ING_07_01_ADLSCSVLoad')]",
                "[concat(variables('factoryId'), '/linkedServices/LS_configurationDB')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/PL_ING_07_02_ADLSExcelCheck')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Select Excel files by wildcard",
                        "type": "ExecutePipeline",
                        "dependsOn": [],
                        "policy": {
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "PL_ING_07_ADLSGetFiles",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {
                                "FwkItem": {
                                    "value": "@pipeline().parameters.FwkItem",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    {
                        "name": "IfMissingFile",
                        "type": "IfCondition",
                        "dependsOn": [
                            {
                                "activity": "Select Excel files by wildcard",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "expression": {
                                "value": "@equals(length(activity('Select Excel files by wildcard').output.pipelineReturnValue['outputFileName']), 0)\n",
                                "type": "Expression"
                            },
                            "ifFalseActivities": [
                                {
                                    "name": "Execute ADLSIngestAllFiles",
                                    "type": "ExecutePipeline",
                                    "dependsOn": [],
                                    "policy": {
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "pipeline": {
                                            "referenceName": "PL_ING_07_02_ADLSIngestAllExcelFiles",
                                            "type": "PipelineReference"
                                        },
                                        "waitOnCompletion": true,
                                        "parameters": {
                                            "FileNames": {
                                                "value": "@activity('Select Excel files by wildcard').output.pipelineReturnValue['outputFileName']",
                                                "type": "Expression"
                                            },
                                            "FwkItem": {
                                                "value": "@pipeline().parameters.FwkItem",
                                                "type": "Expression"
                                            },
                                            "EntRunId": {
                                                "value": "@pipeline().parameters.EntRunId",
                                                "type": "Expression"
                                            },
                                            "ModuleRunId": {
                                                "value": "@pipeline().parameters.ModuleRunId",
                                                "type": "Expression"
                                            },
                                            "FilePath": {
                                                "value": "@activity('Select Excel files by wildcard').output.pipelineReturnValue['outputFilePath']",
                                                "type": "Expression"
                                            },
                                            "PL_01TriggerTime": {
                                                "value": "@pipeline().parameters.PL_01TriggerTime",
                                                "type": "Expression"
                                            }
                                        }
                                    }
                                }
                            ],
                            "ifTrueActivities": [
                                {
                                    "name": "spi_IngtLogInsert",
                                    "description": "Executes the SP spi_IngtLogInsert to insert record into IngtLog table with the execution module information.",
                                    "type": "SqlServerStoredProcedure",
                                    "dependsOn": [],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "storedProcedureName": "[[dbo].[spi_IngtLogInsert]",
                                        "storedProcedureParameters": {
                                            "IngtOutputId": {
                                                "value": {
                                                    "value": "@pipeline().parameters.FwkItem['IngtOutputId']",
                                                    "type": "Expression"
                                                },
                                                "type": "Int32"
                                            },
                                            "EntRunId": {
                                                "value": {
                                                    "value": "@pipeline().parameters.EntRunId",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            },
                                            "ModuleRunId": {
                                                "value": {
                                                    "value": "@pipeline().parameters.ModuleRunId",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            },
                                            "PipelineStatus": {
                                                "value": {
                                                    "value": "Skipped - Missing source file",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            },
                                            "StartDate": {
                                                "value": {
                                                    "value": "@formatdatetime(pipeline().TriggerTime)",
                                                    "type": "Expression"
                                                },
                                                "type": "Datetime"
                                            },
                                            "RowsRead": {
                                                "value": null,
                                                "type": "Int64"
                                            },
                                            "RowsCopied": {
                                                "value": null,
                                                "type": "Int64"
                                            },
                                            "CopyDuration": {
                                                "value": null,
                                                "type": "Double"
                                            },
                                            "Throughput": {
                                                "value": null,
                                                "type": "Double"
                                            },
                                            "ErrorMessage": {
                                                "value": null,
                                                "type": "String"
                                            },
                                            "FileName": {
                                                "value": null,
                                                "type": "String"
                                            }
                                        }
                                    },
                                    "linkedServiceName": {
                                        "referenceName": "LS_configurationDB",
                                        "type": "LinkedServiceReference"
                                    }
                                }
                            ]
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {}
                },
                "parameters": {
                    "FwkItem": {
                        "type": "array"
                    },
                    "PL_01TriggerTime": {
                        "type": "string"
                    },
                    "EntRunId": {
                        "type": "string"
                    },
                    "ModuleRunId": {
                        "type": "string"
                    }
                },
                "folder": {
                    "name": "01 Ingestion Module/07 ADLS"
                },
                "annotations": [],
                "lastPublishTime": "2023-07-06T08:29:16Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/pipelines/PL_ING_07_ADLSGetFiles')]",
                "[concat(variables('factoryId'), '/pipelines/PL_ING_07_02_ADLSIngestAllExcelFiles')]",
                "[concat(variables('factoryId'), '/linkedServices/LS_configurationDB')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/PL_ING_07_02_ADLSExcelLoad')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "IF archivePath Defined",
                        "description": "if the archive path is defined then copy source file with timestamp prefix to archive folder",
                        "type": "IfCondition",
                        "dependsOn": [
                            {
                                "activity": "If Logging Required",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "expression": {
                                "value": "@empty(pipeline().parameters.FwkItem['ArchivePath'])",
                                "type": "Expression"
                            },
                            "ifFalseActivities": [
                                {
                                    "name": "Execute FileArchival",
                                    "type": "ExecutePipeline",
                                    "dependsOn": [],
                                    "policy": {
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "pipeline": {
                                            "referenceName": "PL_ING_07_99_Archive",
                                            "type": "PipelineReference"
                                        },
                                        "waitOnCompletion": true,
                                        "parameters": {
                                            "FwkItem": {
                                                "value": "@pipeline().parameters.FwkItem",
                                                "type": "Expression"
                                            },
                                            "PL_01TriggerTime": {
                                                "value": "@pipeline().parameters.PL_01TriggerTime",
                                                "type": "Expression"
                                            },
                                            "FilePath": {
                                                "value": "@pipeline().parameters.FilePath",
                                                "type": "Expression"
                                            },
                                            "FileName": {
                                                "value": "@pipeline().parameters.FileName",
                                                "type": "Expression"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "name": "If Logging Required",
                        "type": "IfCondition",
                        "dependsOn": [],
                        "userProperties": [],
                        "typeProperties": {
                            "expression": {
                                "value": "@if(and(contains(json(pipeline().parameters.FwkItem['Params']), 'logSettingsInstanceURL'), contains(json(pipeline().parameters.FwkItem['Params']), 'logSettingsPath')), true, false)",
                                "type": "Expression"
                            },
                            "ifFalseActivities": [
                                {
                                    "name": "FullLoadCopyWithoutLogging",
                                    "description": "Copy a table from a database to the configurated Sink dynamically taking by input FwkItem, SrcPath.",
                                    "type": "Copy",
                                    "dependsOn": [],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "source": {
                                            "type": "ExcelSource",
                                            "additionalColumns": {
                                                "type": "Expression",
                                                "value": "@if(\n    contains(json(pipeline().parameters.FwkItem['Params']), 'additionalColumns'),\n    json(pipeline().parameters.FwkItem['Params']).additionalColumns,\n    json('[]')\n)"
                                            },
                                            "storeSettings": {
                                                "type": "AzureBlobFSReadSettings",
                                                "recursive": true,
                                                "enablePartitionDiscovery": false
                                            }
                                        },
                                        "sink": {
                                            "type": "ParquetSink",
                                            "storeSettings": {
                                                "type": "AzureBlobFSWriteSettings"
                                            },
                                            "formatSettings": {
                                                "type": "ParquetWriteSettings"
                                            }
                                        },
                                        "enableStaging": false,
                                        "enableSkipIncompatibleRow": {
                                            "value": "@if(contains(json(pipeline().parameters.FwkItem['Params']), 'enableSkipIncompatibleRow'), json(pipeline().parameters.FwkItem['Params']).enableSkipIncompatibleRow, false)",
                                            "type": "Expression"
                                        },
                                        "translator": {
                                            "value": "@if(\n    contains(json(pipeline().parameters.FwkItem['Params']), 'mapping'),\n    json(pipeline().parameters.FwkItem['Params']).mapping,\n    '\"mapping\":{}'\n)",
                                            "type": "Expression"
                                        }
                                    },
                                    "inputs": [
                                        {
                                            "referenceName": "DS_ADLS_Excel_Source",
                                            "type": "DatasetReference",
                                            "parameters": {
                                                "FwkItem": {
                                                    "value": "@pipeline().parameters.FwkItem",
                                                    "type": "Expression"
                                                },
                                                "ds_inputFileName": {
                                                    "value": "@pipeline().parameters.FileName",
                                                    "type": "Expression"
                                                },
                                                "ds_inputFilePath": {
                                                    "value": "@pipeline().parameters.FilePath",
                                                    "type": "Expression"
                                                }
                                            }
                                        }
                                    ],
                                    "outputs": [
                                        {
                                            "referenceName": "DS_ADLS_PRQ_Sink",
                                            "type": "DatasetReference",
                                            "parameters": {
                                                "InstanceURL": {
                                                    "value": "@pipeline().parameters.FwkItem['SinkInstanceURL']",
                                                    "type": "Expression"
                                                },
                                                "FullPath": {
                                                    "value": "@concat(pipeline().parameters.FwkItem['SinkPath'], \n\t'/',\n\tformatDateTime(pipeline().parameters.PL_01TriggerTime,'yyyy'),\n\tformatDateTime(pipeline().parameters.PL_01TriggerTime,'MM'),\n\tformatDateTime(pipeline().parameters.PL_01TriggerTime,'dd'),\n\tformatDateTime(pipeline().parameters.PL_01TriggerTime,'HH'),\n\tformatDateTime(pipeline().parameters.PL_01TriggerTime,'mm'),\n\t'_',\n\tutcnow(),\n\t'_',\n\tpipeline().parameters.FwkItem['EntityName'],\n\t'.snappy.parquet'\n)",
                                                    "type": "Expression"
                                                }
                                            }
                                        }
                                    ]
                                },
                                {
                                    "name": "spu_IngtLogUpdate_succeeded2",
                                    "description": "Executes the SP spu_IngtLogUpdate to update record into IngtLog table with the execution module information.",
                                    "type": "SqlServerStoredProcedure",
                                    "dependsOn": [
                                        {
                                            "activity": "FullLoadCopyWithoutLogging",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "storedProcedureName": "[[dbo].[spu_IngtLogUpdate]",
                                        "storedProcedureParameters": {
                                            "IngtOutputId": {
                                                "value": {
                                                    "value": "@pipeline().parameters.FwkItem['IngtOutputId']",
                                                    "type": "Expression"
                                                },
                                                "type": "Int32"
                                            },
                                            "EntRunId": {
                                                "value": {
                                                    "value": "@pipeline().parameters.EntRunId",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            },
                                            "ModuleRunId": {
                                                "value": {
                                                    "value": "@pipeline().parameters.ModuleRunId",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            },
                                            "PipelineStatus": {
                                                "value": {
                                                    "value": "Succeeded",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            },
                                            "RowsRead": {
                                                "value": {
                                                    "value": "@if(\n    contains(activity('FullLoadCopyWithoutLogging').output, 'rowsRead'),\n    activity('FullLoadCopyWithoutLogging').output.rowsRead,\n    null\n)",
                                                    "type": "Expression"
                                                },
                                                "type": "Int64"
                                            },
                                            "RowsCopied": {
                                                "value": {
                                                    "value": "@if(\n    contains(activity('FullLoadCopyWithoutLogging').output, 'rowsCopied'),\n    activity('FullLoadCopyWithoutLogging').output.rowsCopied,\n    null\n)",
                                                    "type": "Expression"
                                                },
                                                "type": "Int64"
                                            },
                                            "CopyDuration": {
                                                "value": {
                                                    "value": "@if(\n    contains(activity('FullLoadCopyWithoutLogging').output, 'copyDuration'),\n    activity('FullLoadCopyWithoutLogging').output.copyDuration,\n    null\n)",
                                                    "type": "Expression"
                                                },
                                                "type": "Double"
                                            },
                                            "Throughput": {
                                                "value": {
                                                    "value": "@if(\n    contains(activity('FullLoadCopyWithoutLogging').output, 'throughput'),\n    activity('FullLoadCopyWithoutLogging').output.throughput,\n    null\n)",
                                                    "type": "Expression"
                                                },
                                                "type": "Double"
                                            },
                                            "ErrorMessage": {
                                                "value": null,
                                                "type": "String"
                                            },
                                            "RowsSkipped": {
                                                "value": {
                                                    "value": "@if(\n    contains(activity('FullLoadCopyWithoutLogging').output, 'rowsSkipped'),\n    activity('FullLoadCopyWithoutLogging').output.rowsSkipped,\n    null\n)",
                                                    "type": "Expression"
                                                },
                                                "type": "Int64"
                                            },
                                            "LogFilePath": {
                                                "value": null,
                                                "type": "String"
                                            },
                                            "FileName": {
                                                "value": {
                                                    "value": "@if(contains(pipeline().parameters.FwkItem['Path'], '*'), pipeline().parameters.FileName, null)",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            }
                                        }
                                    },
                                    "linkedServiceName": {
                                        "referenceName": "LS_configurationDB",
                                        "type": "LinkedServiceReference"
                                    }
                                },
                                {
                                    "name": "spu_IngtLogUpdate_failed2",
                                    "description": "Executes the SP spu_IngtLogUpdate to update record into IngtLog table with the execution module information.",
                                    "type": "SqlServerStoredProcedure",
                                    "dependsOn": [
                                        {
                                            "activity": "FullLoadCopyWithoutLogging",
                                            "dependencyConditions": [
                                                "Failed"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "storedProcedureName": "[[dbo].[spu_IngtLogUpdate]",
                                        "storedProcedureParameters": {
                                            "IngtOutputId": {
                                                "value": {
                                                    "value": "@pipeline().parameters.FwkItem['IngtOutputId']",
                                                    "type": "Expression"
                                                },
                                                "type": "Int32"
                                            },
                                            "EntRunId": {
                                                "value": {
                                                    "value": "@pipeline().parameters.EntRunId",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            },
                                            "ModuleRunId": {
                                                "value": {
                                                    "value": "@pipeline().parameters.ModuleRunId",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            },
                                            "PipelineStatus": {
                                                "value": {
                                                    "value": "Failed",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            },
                                            "RowsRead": {
                                                "value": null,
                                                "type": "Int64"
                                            },
                                            "RowsCopied": {
                                                "value": null,
                                                "type": "Int64"
                                            },
                                            "CopyDuration": {
                                                "value": null,
                                                "type": "Double"
                                            },
                                            "Throughput": {
                                                "value": null,
                                                "type": "Double"
                                            },
                                            "ErrorMessage": {
                                                "value": {
                                                    "value": "@if(\n    and(\n        contains(activity('FullLoadCopyWithoutLogging').output, 'errors'),\n        greater(length(activity('FullLoadCopyWithoutLogging').output.errors), 0)\n    ),\n    activity('FullLoadCopyWithoutLogging').output.errors[0].Message,\n    null\n)",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            },
                                            "RowsSkipped": {
                                                "value": {
                                                    "value": "@if(\n    contains(activity('FullLoadCopyWithoutLogging').output, 'rowsSkipped'),\n    activity('FullLoadCopyWithoutLogging').output.rowsSkipped,\n    null\n)",
                                                    "type": "Expression"
                                                },
                                                "type": "Int64"
                                            },
                                            "LogFilePath": {
                                                "value": null,
                                                "type": "String"
                                            }
                                        }
                                    },
                                    "linkedServiceName": {
                                        "referenceName": "LS_configurationDB",
                                        "type": "LinkedServiceReference"
                                    }
                                }
                            ],
                            "ifTrueActivities": [
                                {
                                    "name": "FullLoadCopyWithLogging",
                                    "description": "Copy a table from a database to the configurated Sink dynamically taking by input FwkItem, SrcPath.",
                                    "type": "Copy",
                                    "dependsOn": [],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "source": {
                                            "type": "ExcelSource",
                                            "additionalColumns": {
                                                "type": "Expression",
                                                "value": "@if(\n    contains(json(pipeline().parameters.FwkItem['Params']), 'additionalColumns'),\n    json(pipeline().parameters.FwkItem['Params']).additionalColumns,\n    json('[]')\n)"
                                            },
                                            "storeSettings": {
                                                "type": "AzureBlobFSReadSettings",
                                                "recursive": true,
                                                "enablePartitionDiscovery": false
                                            }
                                        },
                                        "sink": {
                                            "type": "ParquetSink",
                                            "storeSettings": {
                                                "type": "AzureBlobFSWriteSettings"
                                            },
                                            "formatSettings": {
                                                "type": "ParquetWriteSettings"
                                            }
                                        },
                                        "enableStaging": false,
                                        "enableSkipIncompatibleRow": {
                                            "value": "@if(contains(json(pipeline().parameters.FwkItem['Params']), 'enableSkipIncompatibleRow'), json(pipeline().parameters.FwkItem['Params']).enableSkipIncompatibleRow, false)",
                                            "type": "Expression"
                                        },
                                        "logSettings": {
                                            "enableCopyActivityLog": true,
                                            "copyActivityLogSettings": {
                                                "logLevel": "Warning",
                                                "enableReliableLogging": false
                                            },
                                            "logLocationSettings": {
                                                "linkedServiceName": {
                                                    "referenceName": "LS_adls",
                                                    "type": "LinkedServiceReference",
                                                    "parameters": {
                                                        "InstanceURL": {
                                                            "value": "@json(pipeline().parameters.FwkItem['Params']).logSettingsInstanceURL",
                                                            "type": "Expression"
                                                        }
                                                    }
                                                },
                                                "path": {
                                                    "value": "@json(pipeline().parameters.FwkItem['Params']).logSettingsPath",
                                                    "type": "Expression"
                                                }
                                            }
                                        },
                                        "translator": {
                                            "value": "@if(\n    contains(json(pipeline().parameters.FwkItem['Params']), 'mapping'),\n    json(pipeline().parameters.FwkItem['Params']).mapping,\n    '\"mapping\":{}'\n)",
                                            "type": "Expression"
                                        }
                                    },
                                    "inputs": [
                                        {
                                            "referenceName": "DS_ADLS_Excel_Source",
                                            "type": "DatasetReference",
                                            "parameters": {
                                                "FwkItem": {
                                                    "value": "@pipeline().parameters.FwkItem",
                                                    "type": "Expression"
                                                },
                                                "ds_inputFileName": {
                                                    "value": "@pipeline().parameters.FileName",
                                                    "type": "Expression"
                                                },
                                                "ds_inputFilePath": {
                                                    "value": "@pipeline().parameters.FilePath",
                                                    "type": "Expression"
                                                }
                                            }
                                        }
                                    ],
                                    "outputs": [
                                        {
                                            "referenceName": "DS_ADLS_PRQ_Sink",
                                            "type": "DatasetReference",
                                            "parameters": {
                                                "InstanceURL": {
                                                    "value": "@pipeline().parameters.FwkItem['SinkInstanceURL']",
                                                    "type": "Expression"
                                                },
                                                "FullPath": {
                                                    "value": "@concat(pipeline().parameters.FwkItem['SinkPath'], \n\t'/',\n\tformatDateTime(pipeline().parameters.PL_01TriggerTime,'yyyy'),\n\tformatDateTime(pipeline().parameters.PL_01TriggerTime,'MM'),\n\tformatDateTime(pipeline().parameters.PL_01TriggerTime,'dd'),\n\tformatDateTime(pipeline().parameters.PL_01TriggerTime,'HH'),\n\tformatDateTime(pipeline().parameters.PL_01TriggerTime,'mm'),\n\t'_',\n\tutcnow(),\n\t'_',\n\tpipeline().parameters.FwkItem['EntityName'],\n\t'.snappy.parquet'\n)",
                                                    "type": "Expression"
                                                }
                                            }
                                        }
                                    ]
                                },
                                {
                                    "name": "spu_IngtLogUpdate_succeeded",
                                    "description": "Executes the SP spu_IngtLogUpdate to update record into IngtLog table with the execution module information.",
                                    "type": "SqlServerStoredProcedure",
                                    "dependsOn": [
                                        {
                                            "activity": "FullLoadCopyWithLogging",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "storedProcedureName": "[[dbo].[spu_IngtLogUpdate]",
                                        "storedProcedureParameters": {
                                            "IngtOutputId": {
                                                "value": {
                                                    "value": "@pipeline().parameters.FwkItem['IngtOutputId']",
                                                    "type": "Expression"
                                                },
                                                "type": "Int32"
                                            },
                                            "EntRunId": {
                                                "value": {
                                                    "value": "@pipeline().parameters.EntRunId",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            },
                                            "ModuleRunId": {
                                                "value": {
                                                    "value": "@pipeline().parameters.ModuleRunId",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            },
                                            "PipelineStatus": {
                                                "value": {
                                                    "value": "Succeeded",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            },
                                            "RowsRead": {
                                                "value": {
                                                    "value": "@if(\n    contains(activity('FullLoadCopyWithLogging').output, 'rowsRead'),\n    activity('FullLoadCopyWithLogging').output.rowsRead,\n    null\n)",
                                                    "type": "Expression"
                                                },
                                                "type": "Int64"
                                            },
                                            "RowsCopied": {
                                                "value": {
                                                    "value": "@if(\n    contains(activity('FullLoadCopyWithLogging').output, 'rowsCopied'),\n    activity('FullLoadCopyWithLogging').output.rowsCopied,\n    null\n)",
                                                    "type": "Expression"
                                                },
                                                "type": "Int64"
                                            },
                                            "CopyDuration": {
                                                "value": {
                                                    "value": "@if(\n    contains(activity('FullLoadCopyWithLogging').output, 'copyDuration'),\n    activity('FullLoadCopyWithLogging').output.copyDuration,\n    null\n)",
                                                    "type": "Expression"
                                                },
                                                "type": "Double"
                                            },
                                            "Throughput": {
                                                "value": {
                                                    "value": "@if(\n    contains(activity('FullLoadCopyWithLogging').output, 'throughput'),\n    activity('FullLoadCopyWithLogging').output.throughput,\n    null\n)",
                                                    "type": "Expression"
                                                },
                                                "type": "Double"
                                            },
                                            "ErrorMessage": {
                                                "value": null,
                                                "type": "String"
                                            },
                                            "RowsSkipped": {
                                                "value": {
                                                    "value": "@if(\n    contains(activity('FullLoadCopyWithLogging').output, 'rowsSkipped'),\n    activity('FullLoadCopyWithLogging').output.rowsSkipped,\n    null\n)",
                                                    "type": "Expression"
                                                },
                                                "type": "Int64"
                                            },
                                            "LogFilePath": {
                                                "value": {
                                                    "value": "@if(\n    contains(activity('FullLoadCopyWithLogging').output, 'logFilePath'),\n    activity('FullLoadCopyWithLogging').output.logFilePath,\n    null\n)",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            },
                                            "FileName": {
                                                "value": {
                                                    "value": "@if(contains(pipeline().parameters.FwkItem['Path'], '*'), pipeline().parameters.FileName, null)",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            }
                                        }
                                    },
                                    "linkedServiceName": {
                                        "referenceName": "LS_configurationDB",
                                        "type": "LinkedServiceReference"
                                    }
                                },
                                {
                                    "name": "spu_IngtLogUpdate_failed",
                                    "description": "Executes the SP spu_IngtLogUpdate to update record into IngtLog table with the execution module information.",
                                    "type": "SqlServerStoredProcedure",
                                    "dependsOn": [
                                        {
                                            "activity": "FullLoadCopyWithLogging",
                                            "dependencyConditions": [
                                                "Failed"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "storedProcedureName": "[[dbo].[spu_IngtLogUpdate]",
                                        "storedProcedureParameters": {
                                            "IngtOutputId": {
                                                "value": {
                                                    "value": "@pipeline().parameters.FwkItem['IngtOutputId']",
                                                    "type": "Expression"
                                                },
                                                "type": "Int32"
                                            },
                                            "EntRunId": {
                                                "value": {
                                                    "value": "@pipeline().parameters.EntRunId",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            },
                                            "ModuleRunId": {
                                                "value": {
                                                    "value": "@pipeline().parameters.ModuleRunId",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            },
                                            "PipelineStatus": {
                                                "value": {
                                                    "value": "Failed",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            },
                                            "RowsRead": {
                                                "value": null,
                                                "type": "Int64"
                                            },
                                            "RowsCopied": {
                                                "value": null,
                                                "type": "Int64"
                                            },
                                            "CopyDuration": {
                                                "value": null,
                                                "type": "Double"
                                            },
                                            "Throughput": {
                                                "value": null,
                                                "type": "Double"
                                            },
                                            "ErrorMessage": {
                                                "value": {
                                                    "value": "@if(\n    and(\n        contains(activity('FullLoadCopyWithLogging').output, 'errors'),\n        greater(length(activity('FullLoadCopyWithLogging').output.errors), 0)\n    ),\n    activity('FullLoadCopyWithLogging').output.errors[0].Message,\n    null\n)",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            },
                                            "RowsSkipped": {
                                                "value": {
                                                    "value": "@if(\n    contains(activity('FullLoadCopyWithLogging').output, 'rowsSkipped'),\n    activity('FullLoadCopyWithLogging').output.rowsSkipped,\n    null\n)",
                                                    "type": "Expression"
                                                },
                                                "type": "Int64"
                                            },
                                            "LogFilePath": {
                                                "value": {
                                                    "value": "@if(\n    contains(activity('FullLoadCopyWithLogging').output, 'logFilePath'),\n    activity('FullLoadCopyWithLogging').output.logFilePath,\n    null\n)",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            }
                                        }
                                    },
                                    "linkedServiceName": {
                                        "referenceName": "LS_configurationDB",
                                        "type": "LinkedServiceReference"
                                    }
                                }
                            ]
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {}
                },
                "parameters": {
                    "FwkItem": {
                        "type": "array"
                    },
                    "EntRunId": {
                        "type": "string"
                    },
                    "ModuleRunId": {
                        "type": "string"
                    },
                    "FileName": {
                        "type": "string"
                    },
                    "FilePath": {
                        "type": "string"
                    },
                    "PL_01TriggerTime": {
                        "type": "string"
                    }
                },
                "folder": {
                    "name": "01 Ingestion Module/07 ADLS"
                },
                "annotations": []
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/pipelines/PL_ING_07_99_Archive')]",
                "[concat(variables('factoryId'), '/datasets/DS_ADLS_Excel_Source')]",
                "[concat(variables('factoryId'), '/datasets/DS_ADLS_PRQ_Sink')]",
                "[concat(variables('factoryId'), '/linkedServices/LS_configurationDB')]",
                "[concat(variables('factoryId'), '/linkedServices/LS_adls')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/PL_ING_07_02_ADLSIngestAllExcelFiles')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "ForEach Excel file",
                        "type": "ForEach",
                        "dependsOn": [],
                        "userProperties": [],
                        "typeProperties": {
                            "items": {
                                "value": "@pipeline().parameters.FileNames",
                                "type": "Expression"
                            },
                            "isSequential": true,
                            "activities": [
                                {
                                    "name": "Execute ADLSExcelLoad",
                                    "type": "ExecutePipeline",
                                    "dependsOn": [
                                        {
                                            "activity": "spi_IngtLogInsert",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "pipeline": {
                                            "referenceName": "PL_ING_07_02_ADLSExcelLoad",
                                            "type": "PipelineReference"
                                        },
                                        "waitOnCompletion": true,
                                        "parameters": {
                                            "FwkItem": {
                                                "value": "@pipeline().parameters.FwkItem",
                                                "type": "Expression"
                                            },
                                            "EntRunId": {
                                                "value": "@pipeline().parameters.EntRunId",
                                                "type": "Expression"
                                            },
                                            "ModuleRunId": {
                                                "value": "@pipeline().parameters.ModuleRunId",
                                                "type": "Expression"
                                            },
                                            "FileName": {
                                                "value": "@item().name",
                                                "type": "Expression"
                                            },
                                            "FilePath": {
                                                "value": "@pipeline().parameters.FilePath",
                                                "type": "Expression"
                                            },
                                            "PL_01TriggerTime": {
                                                "value": "@pipeline().parameters.PL_01TriggerTime",
                                                "type": "Expression"
                                            }
                                        }
                                    }
                                },
                                {
                                    "name": "spi_IngtLogInsert",
                                    "description": "Executes the SP spi_IngtLogInsert to insert record into IngtLog table with the execution module information.",
                                    "type": "SqlServerStoredProcedure",
                                    "dependsOn": [],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "storedProcedureName": "[[dbo].[spi_IngtLogInsert]",
                                        "storedProcedureParameters": {
                                            "IngtOutputId": {
                                                "value": {
                                                    "value": "@pipeline().parameters.FwkItem['IngtOutputId']",
                                                    "type": "Expression"
                                                },
                                                "type": "Int32"
                                            },
                                            "EntRunId": {
                                                "value": {
                                                    "value": "@pipeline().parameters.EntRunId",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            },
                                            "ModuleRunId": {
                                                "value": {
                                                    "value": "@pipeline().parameters.ModuleRunId",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            },
                                            "PipelineStatus": {
                                                "value": {
                                                    "value": "InProgress",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            },
                                            "StartDate": {
                                                "value": {
                                                    "value": "@formatdatetime(pipeline().TriggerTime)",
                                                    "type": "Expression"
                                                },
                                                "type": "Datetime"
                                            },
                                            "RowsRead": {
                                                "value": null,
                                                "type": "Int64"
                                            },
                                            "RowsCopied": {
                                                "value": null,
                                                "type": "Int64"
                                            },
                                            "CopyDuration": {
                                                "value": null,
                                                "type": "Double"
                                            },
                                            "Throughput": {
                                                "value": null,
                                                "type": "Double"
                                            },
                                            "ErrorMessage": {
                                                "value": null,
                                                "type": "String"
                                            },
                                            "FileName": {
                                                "value": {
                                                    "value": "@if(contains(pipeline().parameters.FwkItem['Path'], '*'), item().name, null)",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            }
                                        }
                                    },
                                    "linkedServiceName": {
                                        "referenceName": "LS_configurationDB",
                                        "type": "LinkedServiceReference"
                                    }
                                }
                            ]
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {}
                },
                "parameters": {
                    "FileNames": {
                        "type": "array"
                    },
                    "FwkItem": {
                        "type": "array"
                    },
                    "EntRunId": {
                        "type": "string"
                    },
                    "ModuleRunId": {
                        "type": "string"
                    },
                    "FilePath": {
                        "type": "string"
                    },
                    "PL_01TriggerTime": {
                        "type": "string"
                    }
                },
                "folder": {
                    "name": "01 Ingestion Module/07 ADLS"
                },
                "annotations": []
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/pipelines/PL_ING_07_02_ADLSExcelLoad')]",
                "[concat(variables('factoryId'), '/linkedServices/LS_configurationDB')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/PL_ING_07_03_ADLSXMLCheck')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Select 1 file by wildcard and last modified date",
                        "type": "ExecutePipeline",
                        "dependsOn": [],
                        "policy": {
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "PL_ING_07_ADLSGetFiles",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {
                                "FwkItem": {
                                    "value": "@pipeline().parameters.FwkItem",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    {
                        "name": "IfMissingFile",
                        "type": "IfCondition",
                        "dependsOn": [
                            {
                                "activity": "Select 1 file by wildcard and last modified date",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "expression": {
                                "value": "@equals(length(activity('Select 1 file by wildcard and last modified date').output.pipelineReturnValue['outputFileName']), 0)",
                                "type": "Expression"
                            },
                            "ifFalseActivities": [
                                {
                                    "name": "CopyActivity",
                                    "type": "ExecutePipeline",
                                    "dependsOn": [
                                        {
                                            "activity": "spi_IngtLogInsert_copy1",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "pipeline": {
                                            "referenceName": "PL_ING_07_03_ADLSXMLLoad",
                                            "type": "PipelineReference"
                                        },
                                        "waitOnCompletion": true,
                                        "parameters": {
                                            "FwkItem": {
                                                "value": "@pipeline().parameters.FwkItem",
                                                "type": "Expression"
                                            },
                                            "EntRunId": {
                                                "value": "@pipeline().parameters.EntRunId",
                                                "type": "Expression"
                                            },
                                            "ModuleRunId": {
                                                "value": "@pipeline().parameters.ModuleRunId",
                                                "type": "Expression"
                                            },
                                            "FileName": {
                                                "value": "@activity('Select 1 file by wildcard and last modified date').output.pipelineReturnValue['outputFileName'][0]['name']",
                                                "type": "Expression"
                                            },
                                            "FilePath": {
                                                "value": "@activity('Select 1 file by wildcard and last modified date').output.pipelineReturnValue['outputFilePath']",
                                                "type": "Expression"
                                            },
                                            "PL_01TriggerTime": {
                                                "value": "@pipeline().parameters.PL_01TriggerTime",
                                                "type": "Expression"
                                            }
                                        }
                                    }
                                },
                                {
                                    "name": "spi_IngtLogInsert_copy1",
                                    "description": "Executes the SP spi_IngtLogInsert to insert record into IngtLog table with the execution module information.",
                                    "type": "SqlServerStoredProcedure",
                                    "dependsOn": [],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "storedProcedureName": "[[dbo].[spi_IngtLogInsert]",
                                        "storedProcedureParameters": {
                                            "IngtOutputId": {
                                                "value": {
                                                    "value": "@pipeline().parameters.FwkItem['IngtOutputId']",
                                                    "type": "Expression"
                                                },
                                                "type": "Int32"
                                            },
                                            "EntRunId": {
                                                "value": {
                                                    "value": "@pipeline().parameters.EntRunId",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            },
                                            "ModuleRunId": {
                                                "value": {
                                                    "value": "@pipeline().parameters.ModuleRunId",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            },
                                            "PipelineStatus": {
                                                "value": {
                                                    "value": "InProgress",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            },
                                            "StartDate": {
                                                "value": {
                                                    "value": "@formatdatetime(pipeline().TriggerTime)",
                                                    "type": "Expression"
                                                },
                                                "type": "Datetime"
                                            },
                                            "RowsRead": {
                                                "value": null,
                                                "type": "Int64"
                                            },
                                            "RowsCopied": {
                                                "value": null,
                                                "type": "Int64"
                                            },
                                            "CopyDuration": {
                                                "value": null,
                                                "type": "Double"
                                            },
                                            "Throughput": {
                                                "value": null,
                                                "type": "Double"
                                            },
                                            "ErrorMessage": {
                                                "value": null,
                                                "type": "String"
                                            },
                                            "FileName": {
                                                "value": {
                                                    "value": "@if(contains(pipeline().parameters.FwkItem['Path'], '*'), activity('Select 1 file by wildcard and last modified date').output.pipelineReturnValue[0]['name'], null)",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            }
                                        }
                                    },
                                    "linkedServiceName": {
                                        "referenceName": "LS_configurationDB",
                                        "type": "LinkedServiceReference"
                                    }
                                }
                            ],
                            "ifTrueActivities": [
                                {
                                    "name": "spi_IngtLogInsert",
                                    "description": "Executes the SP spi_IngtLogInsert to insert record into IngtLog table with the execution module information.",
                                    "type": "SqlServerStoredProcedure",
                                    "dependsOn": [],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "storedProcedureName": "[[dbo].[spi_IngtLogInsert]",
                                        "storedProcedureParameters": {
                                            "IngtOutputId": {
                                                "value": {
                                                    "value": "@pipeline().parameters.FwkItem['IngtOutputId']",
                                                    "type": "Expression"
                                                },
                                                "type": "Int32"
                                            },
                                            "EntRunId": {
                                                "value": {
                                                    "value": "@pipeline().parameters.EntRunId",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            },
                                            "ModuleRunId": {
                                                "value": {
                                                    "value": "@pipeline().parameters.ModuleRunId",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            },
                                            "PipelineStatus": {
                                                "value": {
                                                    "value": "Skipped - Missing source file",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            },
                                            "StartDate": {
                                                "value": {
                                                    "value": "@formatdatetime(pipeline().TriggerTime)",
                                                    "type": "Expression"
                                                },
                                                "type": "Datetime"
                                            },
                                            "RowsRead": {
                                                "value": null,
                                                "type": "Int64"
                                            },
                                            "RowsCopied": {
                                                "value": null,
                                                "type": "Int64"
                                            },
                                            "CopyDuration": {
                                                "value": null,
                                                "type": "Double"
                                            },
                                            "Throughput": {
                                                "value": null,
                                                "type": "Double"
                                            },
                                            "ErrorMessage": {
                                                "value": null,
                                                "type": "String"
                                            },
                                            "FileName": {
                                                "value": null,
                                                "type": "String"
                                            }
                                        }
                                    },
                                    "linkedServiceName": {
                                        "referenceName": "LS_configurationDB",
                                        "type": "LinkedServiceReference"
                                    }
                                }
                            ]
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {}
                },
                "parameters": {
                    "FwkItem": {
                        "type": "array"
                    },
                    "PL_01TriggerTime": {
                        "type": "string"
                    },
                    "EntRunId": {
                        "type": "string"
                    },
                    "ModuleRunId": {
                        "type": "string"
                    }
                },
                "folder": {
                    "name": "01 Ingestion Module/07 ADLS"
                },
                "annotations": [],
                "lastPublishTime": "2023-07-06T08:29:16Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/pipelines/PL_ING_07_ADLSGetFiles')]",
                "[concat(variables('factoryId'), '/pipelines/PL_ING_07_03_ADLSXMLLoad')]",
                "[concat(variables('factoryId'), '/linkedServices/LS_configurationDB')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/PL_ING_07_03_ADLSXMLLoad')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "IF archivePath Defined",
                        "description": "if the archive path is defined then copy source file with timestamp prefix to archive folder",
                        "type": "IfCondition",
                        "dependsOn": [
                            {
                                "activity": "If Logging Required",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "expression": {
                                "value": "@empty(pipeline().parameters.FwkItem['ArchivePath'])",
                                "type": "Expression"
                            },
                            "ifFalseActivities": [
                                {
                                    "name": "Execute FileArchival",
                                    "type": "ExecutePipeline",
                                    "dependsOn": [],
                                    "policy": {
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "pipeline": {
                                            "referenceName": "PL_ING_07_99_Archive",
                                            "type": "PipelineReference"
                                        },
                                        "waitOnCompletion": true,
                                        "parameters": {
                                            "FwkItem": {
                                                "value": "@pipeline().parameters.FwkItem",
                                                "type": "Expression"
                                            },
                                            "PL_01TriggerTime": {
                                                "value": "@pipeline().parameters.PL_01TriggerTime",
                                                "type": "Expression"
                                            },
                                            "FilePath": {
                                                "value": "@pipeline().parameters.FilePath",
                                                "type": "Expression"
                                            },
                                            "FileName": {
                                                "value": "@pipeline().parameters.FileName",
                                                "type": "Expression"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "name": "If Logging Required",
                        "type": "IfCondition",
                        "dependsOn": [],
                        "userProperties": [],
                        "typeProperties": {
                            "expression": {
                                "value": "@if(and(contains(json(pipeline().parameters.FwkItem['Params']), 'logSettingsInstanceURL'), contains(json(pipeline().parameters.FwkItem['Params']), 'logSettingsPath')), true, false)",
                                "type": "Expression"
                            },
                            "ifFalseActivities": [
                                {
                                    "name": "FullLoadCopyWithoutLogging",
                                    "description": "Copy a table from a database to the configurated Sink dynamically taking by input FwkItem, SrcPath.",
                                    "type": "Copy",
                                    "dependsOn": [],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "source": {
                                            "type": "XmlSource",
                                            "additionalColumns": {
                                                "type": "Expression",
                                                "value": "@if(\n    contains(json(pipeline().parameters.FwkItem['Params']), 'additionalColumns'),\n    json(pipeline().parameters.FwkItem['Params']).additionalColumns,\n    json('[]')\n)"
                                            },
                                            "storeSettings": {
                                                "type": "AzureBlobFSReadSettings",
                                                "recursive": true,
                                                "enablePartitionDiscovery": false
                                            },
                                            "formatSettings": {
                                                "type": "XmlReadSettings",
                                                "validationMode": "none",
                                                "detectDataType": true,
                                                "namespaces": false
                                            }
                                        },
                                        "sink": {
                                            "type": "ParquetSink",
                                            "storeSettings": {
                                                "type": "AzureBlobFSWriteSettings"
                                            },
                                            "formatSettings": {
                                                "type": "ParquetWriteSettings"
                                            }
                                        },
                                        "enableStaging": false,
                                        "enableSkipIncompatibleRow": {
                                            "value": "@if(contains(json(pipeline().parameters.FwkItem['Params']), 'enableSkipIncompatibleRow'), json(pipeline().parameters.FwkItem['Params']).enableSkipIncompatibleRow, false)",
                                            "type": "Expression"
                                        },
                                        "translator": {
                                            "value": "@if(\n    contains(json(pipeline().parameters.FwkItem['Params']), 'mapping'),\n    json(pipeline().parameters.FwkItem['Params']).mapping,\n    '\"mapping\":{}'\n)",
                                            "type": "Expression"
                                        }
                                    },
                                    "inputs": [
                                        {
                                            "referenceName": "DS_ADLS_XML_Source",
                                            "type": "DatasetReference",
                                            "parameters": {
                                                "FwkItem": {
                                                    "value": "@pipeline().parameters.FwkItem",
                                                    "type": "Expression"
                                                },
                                                "ds_inputFileName": {
                                                    "value": "@pipeline().parameters.FileName",
                                                    "type": "Expression"
                                                },
                                                "ds_inputFilePath": {
                                                    "value": "@pipeline().parameters.FilePath",
                                                    "type": "Expression"
                                                }
                                            }
                                        }
                                    ],
                                    "outputs": [
                                        {
                                            "referenceName": "DS_ADLS_PRQ_Sink",
                                            "type": "DatasetReference",
                                            "parameters": {
                                                "InstanceURL": {
                                                    "value": "@pipeline().parameters.FwkItem['SinkInstanceURL']",
                                                    "type": "Expression"
                                                },
                                                "FullPath": {
                                                    "value": "@concat(pipeline().parameters.FwkItem['SinkPath'], \n\t'/',\n\tformatDateTime(pipeline().parameters.PL_01TriggerTime,'yyyy'),\n\tformatDateTime(pipeline().parameters.PL_01TriggerTime,'MM'),\n\tformatDateTime(pipeline().parameters.PL_01TriggerTime,'dd'),\n\tformatDateTime(pipeline().parameters.PL_01TriggerTime,'HH'),\n\tformatDateTime(pipeline().parameters.PL_01TriggerTime,'mm'),\n\t'_',\n\tpipeline().parameters.FwkItem['EntityName'],\n\t'.snappy.parquet'\n)",
                                                    "type": "Expression"
                                                }
                                            }
                                        }
                                    ]
                                },
                                {
                                    "name": "spu_IngtLogUpdate_succeeded2",
                                    "description": "Executes the SP spu_IngtLogUpdate to update record into IngtLog table with the execution module information.",
                                    "type": "SqlServerStoredProcedure",
                                    "dependsOn": [
                                        {
                                            "activity": "FullLoadCopyWithoutLogging",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "storedProcedureName": "[[dbo].[spu_IngtLogUpdate]",
                                        "storedProcedureParameters": {
                                            "IngtOutputId": {
                                                "value": {
                                                    "value": "@pipeline().parameters.FwkItem['IngtOutputId']",
                                                    "type": "Expression"
                                                },
                                                "type": "Int32"
                                            },
                                            "EntRunId": {
                                                "value": {
                                                    "value": "@pipeline().parameters.EntRunId",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            },
                                            "ModuleRunId": {
                                                "value": {
                                                    "value": "@pipeline().parameters.ModuleRunId",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            },
                                            "PipelineStatus": {
                                                "value": {
                                                    "value": "Succeeded",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            },
                                            "RowsRead": {
                                                "value": {
                                                    "value": "@if(\n    contains(activity('FullLoadCopyWithoutLogging').output, 'rowsRead'),\n    activity('FullLoadCopyWithoutLogging').output.rowsRead,\n    null\n)",
                                                    "type": "Expression"
                                                },
                                                "type": "Int64"
                                            },
                                            "RowsCopied": {
                                                "value": {
                                                    "value": "@if(\n    contains(activity('FullLoadCopyWithoutLogging').output, 'rowsCopied'),\n    activity('FullLoadCopyWithoutLogging').output.rowsCopied,\n    null\n)",
                                                    "type": "Expression"
                                                },
                                                "type": "Int64"
                                            },
                                            "CopyDuration": {
                                                "value": {
                                                    "value": "@if(\n    contains(activity('FullLoadCopyWithoutLogging').output, 'copyDuration'),\n    activity('FullLoadCopyWithoutLogging').output.copyDuration,\n    null\n)",
                                                    "type": "Expression"
                                                },
                                                "type": "Double"
                                            },
                                            "Throughput": {
                                                "value": {
                                                    "value": "@if(\n    contains(activity('FullLoadCopyWithoutLogging').output, 'throughput'),\n    activity('FullLoadCopyWithoutLogging').output.throughput,\n    null\n)",
                                                    "type": "Expression"
                                                },
                                                "type": "Double"
                                            },
                                            "ErrorMessage": {
                                                "value": null,
                                                "type": "String"
                                            },
                                            "RowsSkipped": {
                                                "value": {
                                                    "value": "@if(\n    contains(activity('FullLoadCopyWithoutLogging').output, 'rowsSkipped'),\n    activity('FullLoadCopyWithoutLogging').output.rowsSkipped,\n    null\n)",
                                                    "type": "Expression"
                                                },
                                                "type": "Int64"
                                            },
                                            "LogFilePath": {
                                                "value": null,
                                                "type": "String"
                                            },
                                            "FileName": {
                                                "value": {
                                                    "value": "@if(contains(pipeline().parameters.FwkItem['Path'], '*'), pipeline().parameters.FileName, null)",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            }
                                        }
                                    },
                                    "linkedServiceName": {
                                        "referenceName": "LS_configurationDB",
                                        "type": "LinkedServiceReference"
                                    }
                                },
                                {
                                    "name": "spu_IngtLogUpdate_failed2",
                                    "description": "Executes the SP spu_IngtLogUpdate to update record into IngtLog table with the execution module information.",
                                    "type": "SqlServerStoredProcedure",
                                    "dependsOn": [
                                        {
                                            "activity": "FullLoadCopyWithoutLogging",
                                            "dependencyConditions": [
                                                "Failed"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "storedProcedureName": "[[dbo].[spu_IngtLogUpdate]",
                                        "storedProcedureParameters": {
                                            "IngtOutputId": {
                                                "value": {
                                                    "value": "@pipeline().parameters.FwkItem['IngtOutputId']",
                                                    "type": "Expression"
                                                },
                                                "type": "Int32"
                                            },
                                            "EntRunId": {
                                                "value": {
                                                    "value": "@pipeline().parameters.EntRunId",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            },
                                            "ModuleRunId": {
                                                "value": {
                                                    "value": "@pipeline().parameters.ModuleRunId",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            },
                                            "PipelineStatus": {
                                                "value": {
                                                    "value": "Failed",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            },
                                            "RowsRead": {
                                                "value": null,
                                                "type": "Int64"
                                            },
                                            "RowsCopied": {
                                                "value": null,
                                                "type": "Int64"
                                            },
                                            "CopyDuration": {
                                                "value": null,
                                                "type": "Double"
                                            },
                                            "Throughput": {
                                                "value": null,
                                                "type": "Double"
                                            },
                                            "ErrorMessage": {
                                                "value": {
                                                    "value": "@if(\n    and(\n        contains(activity('FullLoadCopyWithoutLogging').output, 'errors'),\n        greater(length(activity('FullLoadCopyWithoutLogging').output.errors), 0)\n    ),\n    activity('FullLoadCopyWithoutLogging').output.errors[0].Message,\n    null\n)",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            },
                                            "RowsSkipped": {
                                                "value": {
                                                    "value": "@if(\n    contains(activity('FullLoadCopyWithoutLogging').output, 'rowsSkipped'),\n    activity('FullLoadCopyWithoutLogging').output.rowsSkipped,\n    null\n)",
                                                    "type": "Expression"
                                                },
                                                "type": "Int64"
                                            },
                                            "LogFilePath": {
                                                "value": null,
                                                "type": "String"
                                            }
                                        }
                                    },
                                    "linkedServiceName": {
                                        "referenceName": "LS_configurationDB",
                                        "type": "LinkedServiceReference"
                                    }
                                }
                            ],
                            "ifTrueActivities": [
                                {
                                    "name": "FullLoadCopyWithLogging",
                                    "description": "Copy a table from a database to the configurated Sink dynamically taking by input FwkItem, SrcPath.",
                                    "type": "Copy",
                                    "dependsOn": [],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "source": {
                                            "type": "XmlSource",
                                            "additionalColumns": {
                                                "type": "Expression",
                                                "value": "@if(\n    contains(json(pipeline().parameters.FwkItem['Params']), 'additionalColumns'),\n    json(pipeline().parameters.FwkItem['Params']).additionalColumns,\n    json('[]')\n)"
                                            },
                                            "storeSettings": {
                                                "type": "AzureBlobFSReadSettings",
                                                "recursive": true,
                                                "enablePartitionDiscovery": false
                                            },
                                            "formatSettings": {
                                                "type": "XmlReadSettings",
                                                "validationMode": "none",
                                                "detectDataType": true,
                                                "namespaces": false
                                            }
                                        },
                                        "sink": {
                                            "type": "ParquetSink",
                                            "storeSettings": {
                                                "type": "AzureBlobFSWriteSettings"
                                            },
                                            "formatSettings": {
                                                "type": "ParquetWriteSettings"
                                            }
                                        },
                                        "enableStaging": false,
                                        "enableSkipIncompatibleRow": {
                                            "value": "@if(contains(json(pipeline().parameters.FwkItem['Params']), 'enableSkipIncompatibleRow'), json(pipeline().parameters.FwkItem['Params']).enableSkipIncompatibleRow, false)",
                                            "type": "Expression"
                                        },
                                        "logSettings": {
                                            "enableCopyActivityLog": true,
                                            "copyActivityLogSettings": {
                                                "logLevel": "Warning",
                                                "enableReliableLogging": false
                                            },
                                            "logLocationSettings": {
                                                "linkedServiceName": {
                                                    "referenceName": "LS_adls",
                                                    "type": "LinkedServiceReference",
                                                    "parameters": {
                                                        "InstanceURL": {
                                                            "value": "@json(pipeline().parameters.FwkItem['Params']).logSettingsInstanceURL",
                                                            "type": "Expression"
                                                        }
                                                    }
                                                },
                                                "path": {
                                                    "value": "@json(pipeline().parameters.FwkItem['Params']).logSettingsPath",
                                                    "type": "Expression"
                                                }
                                            }
                                        },
                                        "translator": {
                                            "value": "@if(\n    contains(json(pipeline().parameters.FwkItem['Params']), 'mapping'),\n    json(pipeline().parameters.FwkItem['Params']).mapping,\n    '\"mapping\":{}'\n)",
                                            "type": "Expression"
                                        }
                                    },
                                    "inputs": [
                                        {
                                            "referenceName": "DS_ADLS_XML_Source",
                                            "type": "DatasetReference",
                                            "parameters": {
                                                "FwkItem": {
                                                    "value": "@pipeline().parameters.FwkItem",
                                                    "type": "Expression"
                                                },
                                                "ds_inputFileName": {
                                                    "value": "@pipeline().parameters.FileName",
                                                    "type": "Expression"
                                                },
                                                "ds_inputFilePath": {
                                                    "value": "@pipeline().parameters.FilePath",
                                                    "type": "Expression"
                                                }
                                            }
                                        }
                                    ],
                                    "outputs": [
                                        {
                                            "referenceName": "DS_ADLS_PRQ_Sink",
                                            "type": "DatasetReference",
                                            "parameters": {
                                                "InstanceURL": {
                                                    "value": "@pipeline().parameters.FwkItem['SinkInstanceURL']",
                                                    "type": "Expression"
                                                },
                                                "FullPath": {
                                                    "value": "@concat(pipeline().parameters.FwkItem['SinkPath'], \n\t'/',\n\tformatDateTime(pipeline().parameters.PL_01TriggerTime,'yyyy'),\n\tformatDateTime(pipeline().parameters.PL_01TriggerTime,'MM'),\n\tformatDateTime(pipeline().parameters.PL_01TriggerTime,'dd'),\n\tformatDateTime(pipeline().parameters.PL_01TriggerTime,'HH'),\n\tformatDateTime(pipeline().parameters.PL_01TriggerTime,'mm'),\n\t'_',\n\tpipeline().parameters.FwkItem['EntityName'],\n\t'.snappy.parquet'\n)",
                                                    "type": "Expression"
                                                }
                                            }
                                        }
                                    ]
                                },
                                {
                                    "name": "spu_IngtLogUpdate_succeeded",
                                    "description": "Executes the SP spu_IngtLogUpdate to update record into IngtLog table with the execution module information.",
                                    "type": "SqlServerStoredProcedure",
                                    "dependsOn": [
                                        {
                                            "activity": "FullLoadCopyWithLogging",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "storedProcedureName": "[[dbo].[spu_IngtLogUpdate]",
                                        "storedProcedureParameters": {
                                            "IngtOutputId": {
                                                "value": {
                                                    "value": "@pipeline().parameters.FwkItem['IngtOutputId']",
                                                    "type": "Expression"
                                                },
                                                "type": "Int32"
                                            },
                                            "EntRunId": {
                                                "value": {
                                                    "value": "@pipeline().parameters.EntRunId",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            },
                                            "ModuleRunId": {
                                                "value": {
                                                    "value": "@pipeline().parameters.ModuleRunId",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            },
                                            "PipelineStatus": {
                                                "value": {
                                                    "value": "Succeeded",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            },
                                            "RowsRead": {
                                                "value": {
                                                    "value": "@if(\n    contains(activity('FullLoadCopyWithLogging').output, 'rowsRead'),\n    activity('FullLoadCopyWithLogging').output.rowsRead,\n    null\n)",
                                                    "type": "Expression"
                                                },
                                                "type": "Int64"
                                            },
                                            "RowsCopied": {
                                                "value": {
                                                    "value": "@if(\n    contains(activity('FullLoadCopyWithLogging').output, 'rowsCopied'),\n    activity('FullLoadCopyWithLogging').output.rowsCopied,\n    null\n)",
                                                    "type": "Expression"
                                                },
                                                "type": "Int64"
                                            },
                                            "CopyDuration": {
                                                "value": {
                                                    "value": "@if(\n    contains(activity('FullLoadCopyWithLogging').output, 'copyDuration'),\n    activity('FullLoadCopyWithLogging').output.copyDuration,\n    null\n)",
                                                    "type": "Expression"
                                                },
                                                "type": "Double"
                                            },
                                            "Throughput": {
                                                "value": {
                                                    "value": "@if(\n    contains(activity('FullLoadCopyWithLogging').output, 'throughput'),\n    activity('FullLoadCopyWithLogging').output.throughput,\n    null\n)",
                                                    "type": "Expression"
                                                },
                                                "type": "Double"
                                            },
                                            "ErrorMessage": {
                                                "value": null,
                                                "type": "String"
                                            },
                                            "RowsSkipped": {
                                                "value": {
                                                    "value": "@if(\n    contains(activity('FullLoadCopyWithLogging').output, 'rowsSkipped'),\n    activity('FullLoadCopyWithLogging').output.rowsSkipped,\n    null\n)",
                                                    "type": "Expression"
                                                },
                                                "type": "Int64"
                                            },
                                            "LogFilePath": {
                                                "value": {
                                                    "value": "@if(\n    contains(activity('FullLoadCopyWithLogging').output, 'logFilePath'),\n    activity('FullLoadCopyWithLogging').output.logFilePath,\n    null\n)",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            },
                                            "FileName": {
                                                "value": {
                                                    "value": "@if(contains(pipeline().parameters.FwkItem['Path'], '*'), pipeline().parameters.FileName, null)",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            }
                                        }
                                    },
                                    "linkedServiceName": {
                                        "referenceName": "LS_configurationDB",
                                        "type": "LinkedServiceReference"
                                    }
                                },
                                {
                                    "name": "spu_IngtLogUpdate_failed",
                                    "description": "Executes the SP spu_IngtLogUpdate to update record into IngtLog table with the execution module information.",
                                    "type": "SqlServerStoredProcedure",
                                    "dependsOn": [
                                        {
                                            "activity": "FullLoadCopyWithLogging",
                                            "dependencyConditions": [
                                                "Failed"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "storedProcedureName": "[[dbo].[spu_IngtLogUpdate]",
                                        "storedProcedureParameters": {
                                            "IngtOutputId": {
                                                "value": {
                                                    "value": "@pipeline().parameters.FwkItem['IngtOutputId']",
                                                    "type": "Expression"
                                                },
                                                "type": "Int32"
                                            },
                                            "EntRunId": {
                                                "value": {
                                                    "value": "@pipeline().parameters.EntRunId",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            },
                                            "ModuleRunId": {
                                                "value": {
                                                    "value": "@pipeline().parameters.ModuleRunId",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            },
                                            "PipelineStatus": {
                                                "value": {
                                                    "value": "Failed",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            },
                                            "RowsRead": {
                                                "value": null,
                                                "type": "Int64"
                                            },
                                            "RowsCopied": {
                                                "value": null,
                                                "type": "Int64"
                                            },
                                            "CopyDuration": {
                                                "value": null,
                                                "type": "Double"
                                            },
                                            "Throughput": {
                                                "value": null,
                                                "type": "Double"
                                            },
                                            "ErrorMessage": {
                                                "value": {
                                                    "value": "@if(\n    and(\n        contains(activity('FullLoadCopyWithLogging').output, 'errors'),\n        greater(length(activity('FullLoadCopyWithLogging').output.errors), 0)\n    ),\n    activity('FullLoadCopyWithLogging').output.errors[0].Message,\n    null\n)",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            },
                                            "RowsSkipped": {
                                                "value": {
                                                    "value": "@if(\n    contains(activity('FullLoadCopyWithLogging').output, 'rowsSkipped'),\n    activity('FullLoadCopyWithLogging').output.rowsSkipped,\n    null\n)",
                                                    "type": "Expression"
                                                },
                                                "type": "Int64"
                                            },
                                            "LogFilePath": {
                                                "value": {
                                                    "value": "@if(\n    contains(activity('FullLoadCopyWithLogging').output, 'logFilePath'),\n    activity('FullLoadCopyWithLogging').output.logFilePath,\n    null\n)",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            }
                                        }
                                    },
                                    "linkedServiceName": {
                                        "referenceName": "LS_configurationDB",
                                        "type": "LinkedServiceReference"
                                    }
                                }
                            ]
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {}
                },
                "parameters": {
                    "FwkItem": {
                        "type": "array"
                    },
                    "EntRunId": {
                        "type": "string"
                    },
                    "ModuleRunId": {
                        "type": "string"
                    },
                    "FileName": {
                        "type": "string"
                    },
                    "FilePath": {
                        "type": "string"
                    },
                    "PL_01TriggerTime": {
                        "type": "string"
                    }
                },
                "folder": {
                    "name": "01 Ingestion Module/07 ADLS"
                },
                "annotations": []
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/pipelines/PL_ING_07_99_Archive')]",
                "[concat(variables('factoryId'), '/datasets/DS_ADLS_XML_Source')]",
                "[concat(variables('factoryId'), '/datasets/DS_ADLS_PRQ_Sink')]",
                "[concat(variables('factoryId'), '/linkedServices/LS_configurationDB')]",
                "[concat(variables('factoryId'), '/linkedServices/LS_adls')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/PL_ING_07_99_Archive')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "IF archiveLinkedService Defined",
                        "description": "if the archive path is defined then copy source file with timestamp prefix to archive folder",
                        "type": "IfCondition",
                        "dependsOn": [],
                        "userProperties": [],
                        "typeProperties": {
                            "expression": {
                                "value": "@empty(pipeline().parameters.FwkItem['ArchivalLinkedServiceId'])",
                                "type": "Expression"
                            },
                            "ifFalseActivities": [
                                {
                                    "name": "Move to archivePath SFTP",
                                    "type": "Copy",
                                    "dependsOn": [],
                                    "policy": {
                                        "timeout": "0.12:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "source": {
                                            "type": "BinarySource",
                                            "storeSettings": {
                                                "type": "AzureBlobFSReadSettings",
                                                "recursive": true,
                                                "deleteFilesAfterCompletion": true
                                            },
                                            "formatSettings": {
                                                "type": "BinaryReadSettings"
                                            }
                                        },
                                        "sink": {
                                            "type": "BinarySink",
                                            "storeSettings": {
                                                "type": "SftpWriteSettings",
                                                "operationTimeout": "01:00:00",
                                                "useTempFileRename": true
                                            }
                                        },
                                        "enableStaging": false
                                    },
                                    "inputs": [
                                        {
                                            "referenceName": "DS_ADLS_BIN_File",
                                            "type": "DatasetReference",
                                            "parameters": {
                                                "InstanceURL": {
                                                    "value": "@pipeline().parameters.FwkItem['InstanceURL']",
                                                    "type": "Expression"
                                                },
                                                "FullPath": {
                                                    "value": "@pipeline().parameters.FilePath",
                                                    "type": "Expression"
                                                },
                                                "FileName": {
                                                    "value": "@pipeline().parameters.FileName",
                                                    "type": "Expression"
                                                }
                                            }
                                        }
                                    ],
                                    "outputs": [
                                        {
                                            "referenceName": "DS_SFTPArchive_BIN_File",
                                            "type": "DatasetReference",
                                            "parameters": {
                                                "FwkItem": {
                                                    "value": "@pipeline().parameters.FwkItem",
                                                    "type": "Expression"
                                                },
                                                "ds_inputFileName": {
                                                    "value": "@concat(\n\tformatDateTime(pipeline().parameters.PL_01TriggerTime,'yyyy'),\n\tformatDateTime(pipeline().parameters.PL_01TriggerTime,'MM'),\n\tformatDateTime(pipeline().parameters.PL_01TriggerTime,'dd'),\n\tformatDateTime(pipeline().parameters.PL_01TriggerTime,'HH'),\n\tformatDateTime(pipeline().parameters.PL_01TriggerTime,'mm'),\n\t'_',\n\tpipeline().parameters.FileName\n)",
                                                    "type": "Expression"
                                                },
                                                "ds_inputFilePath": {
                                                    "value": "@pipeline().parameters.FwkItem['ArchivePath']",
                                                    "type": "Expression"
                                                }
                                            }
                                        }
                                    ]
                                }
                            ],
                            "ifTrueActivities": [
                                {
                                    "name": "Move to archivePath  ADLS",
                                    "type": "Copy",
                                    "dependsOn": [],
                                    "policy": {
                                        "timeout": "0.12:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "source": {
                                            "type": "BinarySource",
                                            "storeSettings": {
                                                "type": "AzureBlobFSReadSettings",
                                                "recursive": true,
                                                "deleteFilesAfterCompletion": true
                                            },
                                            "formatSettings": {
                                                "type": "BinaryReadSettings"
                                            }
                                        },
                                        "sink": {
                                            "type": "BinarySink",
                                            "storeSettings": {
                                                "type": "AzureBlobFSWriteSettings"
                                            }
                                        },
                                        "enableStaging": false
                                    },
                                    "inputs": [
                                        {
                                            "referenceName": "DS_ADLS_BIN_File",
                                            "type": "DatasetReference",
                                            "parameters": {
                                                "InstanceURL": {
                                                    "value": "@pipeline().parameters.FwkItem['InstanceURL']",
                                                    "type": "Expression"
                                                },
                                                "FullPath": {
                                                    "value": "@pipeline().parameters.FilePath",
                                                    "type": "Expression"
                                                },
                                                "FileName": {
                                                    "value": "@pipeline().parameters.FileName",
                                                    "type": "Expression"
                                                }
                                            }
                                        }
                                    ],
                                    "outputs": [
                                        {
                                            "referenceName": "DS_ADLS_BIN_File",
                                            "type": "DatasetReference",
                                            "parameters": {
                                                "InstanceURL": {
                                                    "value": "@pipeline().parameters.FwkItem['InstanceURL']",
                                                    "type": "Expression"
                                                },
                                                "FullPath": {
                                                    "value": "@pipeline().parameters.FwkItem['ArchivePath']",
                                                    "type": "Expression"
                                                },
                                                "FileName": {
                                                    "value": "@concat(\n\tformatDateTime(pipeline().parameters.PL_01TriggerTime,'yyyy'),\n\tformatDateTime(pipeline().parameters.PL_01TriggerTime,'MM'),\n\tformatDateTime(pipeline().parameters.PL_01TriggerTime,'dd'),\n\tformatDateTime(pipeline().parameters.PL_01TriggerTime,'HH'),\n\tformatDateTime(pipeline().parameters.PL_01TriggerTime,'mm'),\n\t'_',\npipeline().parameters.FileName\n)",
                                                    "type": "Expression"
                                                }
                                            }
                                        }
                                    ]
                                }
                            ]
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {}
                },
                "parameters": {
                    "FwkItem": {
                        "type": "array"
                    },
                    "PL_01TriggerTime": {
                        "type": "string"
                    },
                    "FilePath": {
                        "type": "string"
                    },
                    "FileName": {
                        "type": "string"
                    }
                },
                "folder": {
                    "name": "01 Ingestion Module/07 ADLS"
                },
                "annotations": []
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/datasets/DS_ADLS_BIN_File')]",
                "[concat(variables('factoryId'), '/datasets/DS_SFTPArchive_BIN_File')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/PL_ING_07_ADLSGetFiles')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "setFilePath",
                        "type": "SetVariable",
                        "dependsOn": [
                            {
                                "activity": "setFileName",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "variableName": "varFwkFilePath",
                            "value": {
                                "value": "@substring(pipeline().parameters.FwkItem['Path'], \n    0, \n    if(equals(lastindexof(pipeline().parameters.FwkItem['Path'],'/'),-1),0,lastindexof(pipeline().parameters.FwkItem['Path'],'/'))\n)",
                                "type": "Expression"
                            }
                        }
                    },
                    {
                        "name": "setFileName",
                        "description": "@dataset().FwkItem['Path']",
                        "type": "SetVariable",
                        "dependsOn": [],
                        "policy": {
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "variableName": "varFwkFileName",
                            "value": {
                                "value": "@substring(pipeline().parameters.FwkItem['Path'], \n    add(lastindexof(pipeline().parameters.FwkItem['Path'],'/'), 1), \n    add(add(length(pipeline().parameters.FwkItem['Path']), mul(lastindexof(pipeline().parameters.FwkItem['Path'],'/'),-1)), -1\n    )\n)",
                                "type": "Expression"
                            }
                        }
                    },
                    {
                        "name": "setFwkFileIfWildcardPosition",
                        "type": "SetVariable",
                        "dependsOn": [
                            {
                                "activity": "setFilePath",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "variableName": "varFwkFileIfWildcardPosition",
                            "value": {
                                "value": "@string(if(equals(indexOf(variables('varFwkFileName'), '*'),-1),0,1))",
                                "type": "Expression"
                            }
                        }
                    },
                    {
                        "name": "setOutput",
                        "type": "SetVariable",
                        "dependsOn": [
                            {
                                "activity": "loopThroughMatchingFileNames",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "variableName": "pipelineReturnValue",
                            "value": [
                                {
                                    "key": "outputFileName",
                                    "value": {
                                        "type": "Expression",
                                        "content": "@variables('varFileName')"
                                    }
                                },
                                {
                                    "key": "outputFilePath",
                                    "value": {
                                        "type": "Expression",
                                        "content": "@variables('varFwkFilePath')"
                                    }
                                }
                            ],
                            "setSystemVariable": true
                        }
                    },
                    {
                        "name": "switchWildcardPresent",
                        "description": "this switch determinate if we have wildcard.",
                        "type": "Switch",
                        "dependsOn": [
                            {
                                "activity": "setFwkFileIfWildcardPosition",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "on": {
                                "value": "@variables('varFwkFileIfWildcardPosition')",
                                "type": "Expression"
                            },
                            "cases": [
                                {
                                    "value": "0",
                                    "activities": [
                                        {
                                            "name": "getListOfFileNamesFile",
                                            "type": "GetMetadata",
                                            "dependsOn": [],
                                            "policy": {
                                                "timeout": "0.12:00:00",
                                                "retry": 0,
                                                "retryIntervalInSeconds": 30,
                                                "secureOutput": false,
                                                "secureInput": false
                                            },
                                            "userProperties": [],
                                            "typeProperties": {
                                                "dataset": {
                                                    "referenceName": "DS_ADLS_BIN_Folder",
                                                    "type": "DatasetReference",
                                                    "parameters": {
                                                        "InstanceURL": {
                                                            "value": "@pipeline().parameters.FwkItem['InstanceURL']",
                                                            "type": "Expression"
                                                        },
                                                        "FullPath": {
                                                            "value": "@variables('varFwkFilePath')",
                                                            "type": "Expression"
                                                        }
                                                    }
                                                },
                                                "fieldList": [
                                                    "childItems"
                                                ],
                                                "storeSettings": {
                                                    "type": "AzureBlobFSReadSettings",
                                                    "recursive": true,
                                                    "enablePartitionDiscovery": false
                                                },
                                                "formatSettings": {
                                                    "type": "BinaryReadSettings"
                                                }
                                            }
                                        },
                                        {
                                            "name": "getListOfFileNamesFilterFile",
                                            "type": "Filter",
                                            "dependsOn": [
                                                {
                                                    "activity": "getListOfFileNamesFile",
                                                    "dependencyConditions": [
                                                        "Succeeded"
                                                    ]
                                                }
                                            ],
                                            "userProperties": [],
                                            "typeProperties": {
                                                "items": {
                                                    "value": "@activity('getListOfFileNamesFile').output.childItems",
                                                    "type": "Expression"
                                                },
                                                "condition": {
                                                    "value": "@and(equals(toLower(item().name), toLower(variables('varFwkFileName'))), equals(item().type,'File'))",
                                                    "type": "Expression"
                                                }
                                            }
                                        },
                                        {
                                            "name": "setMatchingFileNamesFile",
                                            "type": "SetVariable",
                                            "dependsOn": [
                                                {
                                                    "activity": "getListOfFileNamesFilterFile",
                                                    "dependencyConditions": [
                                                        "Succeeded"
                                                    ]
                                                }
                                            ],
                                            "policy": {
                                                "secureOutput": false,
                                                "secureInput": false
                                            },
                                            "userProperties": [],
                                            "typeProperties": {
                                                "variableName": "varMatchingFileNames",
                                                "value": {
                                                    "value": "@activity('getListOfFileNamesFilterFile').output.value",
                                                    "type": "Expression"
                                                }
                                            }
                                        }
                                    ]
                                },
                                {
                                    "value": "1",
                                    "activities": [
                                        {
                                            "name": "getListOfFileNames",
                                            "type": "GetMetadata",
                                            "dependsOn": [
                                                {
                                                    "activity": "setFwkFileRight",
                                                    "dependencyConditions": [
                                                        "Succeeded"
                                                    ]
                                                }
                                            ],
                                            "policy": {
                                                "timeout": "0.12:00:00",
                                                "retry": 0,
                                                "retryIntervalInSeconds": 30,
                                                "secureOutput": false,
                                                "secureInput": false
                                            },
                                            "userProperties": [],
                                            "typeProperties": {
                                                "dataset": {
                                                    "referenceName": "DS_ADLS_BIN_Folder",
                                                    "type": "DatasetReference",
                                                    "parameters": {
                                                        "InstanceURL": {
                                                            "value": "@pipeline().parameters.FwkItem['InstanceURL']",
                                                            "type": "Expression"
                                                        },
                                                        "FullPath": {
                                                            "value": "@variables('varFwkFilePath')",
                                                            "type": "Expression"
                                                        }
                                                    }
                                                },
                                                "fieldList": [
                                                    "childItems"
                                                ],
                                                "storeSettings": {
                                                    "type": "AzureBlobFSReadSettings",
                                                    "recursive": true,
                                                    "enablePartitionDiscovery": false
                                                },
                                                "formatSettings": {
                                                    "type": "BinaryReadSettings"
                                                }
                                            }
                                        },
                                        {
                                            "name": "setFwkFileLeft",
                                            "type": "SetVariable",
                                            "dependsOn": [],
                                            "policy": {
                                                "secureOutput": false,
                                                "secureInput": false
                                            },
                                            "userProperties": [],
                                            "typeProperties": {
                                                "variableName": "varFwkFileLeft",
                                                "value": {
                                                    "value": "@split(variables('varFwkFileName'), '*')[0]",
                                                    "type": "Expression"
                                                }
                                            }
                                        },
                                        {
                                            "name": "setFwkFileRight",
                                            "type": "SetVariable",
                                            "dependsOn": [
                                                {
                                                    "activity": "setFwkFileLeft",
                                                    "dependencyConditions": [
                                                        "Succeeded"
                                                    ]
                                                }
                                            ],
                                            "policy": {
                                                "secureOutput": false,
                                                "secureInput": false
                                            },
                                            "userProperties": [],
                                            "typeProperties": {
                                                "variableName": "varFwkFileRight",
                                                "value": {
                                                    "value": "@split(variables('varFwkFileName'), '*')[int(variables('varFwkFileIfWildcardPosition'))]",
                                                    "type": "Expression"
                                                }
                                            }
                                        },
                                        {
                                            "name": "getListOfFileNamesFilter",
                                            "type": "Filter",
                                            "dependsOn": [
                                                {
                                                    "activity": "getListOfFileNames",
                                                    "dependencyConditions": [
                                                        "Succeeded"
                                                    ]
                                                }
                                            ],
                                            "userProperties": [],
                                            "typeProperties": {
                                                "items": {
                                                    "value": "@activity('getListOfFileNames').output.childItems",
                                                    "type": "Expression"
                                                },
                                                "condition": {
                                                    "value": "@and(and(startswith(toLower(item().name), toLower(variables('varFwkFileLeft'))), endswith(toLower(item().name), toLower(variables('varFwkFileRight')))\n    ),\n        equals(item().type,'File'))",
                                                    "type": "Expression"
                                                }
                                            }
                                        },
                                        {
                                            "name": "setMatchingFileNames",
                                            "type": "SetVariable",
                                            "dependsOn": [
                                                {
                                                    "activity": "getListOfFileNamesFilter",
                                                    "dependencyConditions": [
                                                        "Succeeded"
                                                    ]
                                                }
                                            ],
                                            "policy": {
                                                "secureOutput": false,
                                                "secureInput": false
                                            },
                                            "userProperties": [],
                                            "typeProperties": {
                                                "variableName": "varMatchingFileNames",
                                                "value": {
                                                    "value": "@activity('getListOfFileNamesFilter').output.value",
                                                    "type": "Expression"
                                                }
                                            }
                                        }
                                    ]
                                }
                            ]
                        }
                    },
                    {
                        "name": "loopThroughMatchingFileNames",
                        "type": "ForEach",
                        "dependsOn": [
                            {
                                "activity": "Check for ingestAllFiles",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "items": {
                                "value": "@variables('varIngestMatchingFileNames')",
                                "type": "Expression"
                            },
                            "isSequential": true,
                            "activities": [
                                {
                                    "name": "getLastModifiedDateOfTheCurrentIterationFile",
                                    "type": "GetMetadata",
                                    "dependsOn": [],
                                    "policy": {
                                        "timeout": "0.12:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "dataset": {
                                            "referenceName": "DS_ADLS_BIN_File",
                                            "type": "DatasetReference",
                                            "parameters": {
                                                "InstanceURL": {
                                                    "value": "@pipeline().parameters.FwkItem['InstanceURL']",
                                                    "type": "Expression"
                                                },
                                                "FullPath": {
                                                    "value": "@variables('varFwkFilePath')",
                                                    "type": "Expression"
                                                },
                                                "FileName": {
                                                    "value": "@item().name",
                                                    "type": "Expression"
                                                }
                                            }
                                        },
                                        "fieldList": [
                                            "itemName",
                                            "lastModified"
                                        ],
                                        "storeSettings": {
                                            "type": "AzureBlobFSReadSettings",
                                            "recursive": true,
                                            "enablePartitionDiscovery": false
                                        },
                                        "formatSettings": {
                                            "type": "BinaryReadSettings"
                                        }
                                    }
                                },
                                {
                                    "name": "conditionToCheckIfFileDateGreaterThanSetDate",
                                    "type": "IfCondition",
                                    "dependsOn": [
                                        {
                                            "activity": "getLastModifiedDateOfTheCurrentIterationFile",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "userProperties": [],
                                    "typeProperties": {
                                        "expression": {
                                            "value": "@greater(ticks(activity('getLastModifiedDateOfTheCurrentIterationFile').output.lastModified),ticks(formatDateTime(variables('varReferenceDateTime'))))",
                                            "type": "Expression"
                                        },
                                        "ifTrueActivities": [
                                            {
                                                "name": "setFileLastModifiedDate",
                                                "type": "SetVariable",
                                                "dependsOn": [],
                                                "policy": {
                                                    "secureOutput": false,
                                                    "secureInput": false
                                                },
                                                "userProperties": [],
                                                "typeProperties": {
                                                    "variableName": "varReferenceDateTime",
                                                    "value": {
                                                        "value": "@activity('getLastModifiedDateOfTheCurrentIterationFile').output.lastModified",
                                                        "type": "Expression"
                                                    }
                                                }
                                            },
                                            {
                                                "name": "setLatestFileName",
                                                "type": "SetVariable",
                                                "dependsOn": [
                                                    {
                                                        "activity": "setFileLastModifiedDate",
                                                        "dependencyConditions": [
                                                            "Succeeded"
                                                        ]
                                                    }
                                                ],
                                                "policy": {
                                                    "secureOutput": false,
                                                    "secureInput": false
                                                },
                                                "userProperties": [],
                                                "typeProperties": {
                                                    "variableName": "varFileName",
                                                    "value": {
                                                        "value": "@createArray(item())",
                                                        "type": "Expression"
                                                    }
                                                }
                                            }
                                        ]
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "name": "Check for ingestAllFiles",
                        "type": "IfCondition",
                        "dependsOn": [
                            {
                                "activity": "switchWildcardPresent",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "expression": {
                                "value": "@if(contains(pipeline().parameters.FwkItem, 'Params'), \n    if(contains(json(pipeline().parameters.FwkItem['Params']), 'ingestAllMatchingFiles'), \n        bool(json(pipeline().parameters.FwkItem['Params'])['ingestAllMatchingFiles']), \n        false\n    ), \n    false\n)",
                                "type": "Expression"
                            },
                            "ifFalseActivities": [
                                {
                                    "name": "Set varIngestMatchingFileNames",
                                    "type": "SetVariable",
                                    "dependsOn": [],
                                    "policy": {
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "variableName": "varIngestMatchingFileNames",
                                        "value": {
                                            "value": "@variables('varMatchingFileNames')",
                                            "type": "Expression"
                                        }
                                    }
                                }
                            ],
                            "ifTrueActivities": [
                                {
                                    "name": "Set output",
                                    "type": "SetVariable",
                                    "dependsOn": [],
                                    "policy": {
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "variableName": "varFileName",
                                        "value": {
                                            "value": "@variables('varMatchingFileNames')",
                                            "type": "Expression"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {}
                },
                "parameters": {
                    "FwkItem": {
                        "type": "array"
                    }
                },
                "variables": {
                    "varFwkFilePath": {
                        "type": "String"
                    },
                    "varFwkFileName": {
                        "type": "String"
                    },
                    "varFwkFileLeft": {
                        "type": "String"
                    },
                    "varFwkFileRight": {
                        "type": "String"
                    },
                    "varFwkFileIfWildcardPosition": {
                        "type": "String"
                    },
                    "varReferenceDateTime": {
                        "type": "String",
                        "defaultValue": "1900-01-01 00:00:00"
                    },
                    "varFileName": {
                        "type": "Array"
                    },
                    "varMatchingFileNames": {
                        "type": "Array",
                        "defaultValue": []
                    },
                    "varIngestMatchingFileNames": {
                        "type": "Array",
                        "defaultValue": []
                    }
                },
                "folder": {
                    "name": "01 Ingestion Module/07 ADLS"
                },
                "annotations": [],
                "lastPublishTime": "2023-07-06T08:29:14Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/datasets/DS_ADLS_BIN_File')]",
                "[concat(variables('factoryId'), '/datasets/DS_ADLS_BIN_Folder')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/PL_ING_07_ADLSLoad')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Switch_Format",
                        "description": "Evaluates the input value ‘Format’ corresponding to a case that matches the condition.",
                        "type": "Switch",
                        "dependsOn": [],
                        "userProperties": [],
                        "typeProperties": {
                            "on": {
                                "value": "@string(pipeline().parameters.FwkItem['Format'])",
                                "type": "Expression"
                            },
                            "cases": [
                                {
                                    "value": "CSV",
                                    "activities": [
                                        {
                                            "name": "Execute PL_ING_07_01_ADLSCSVCheck",
                                            "type": "ExecutePipeline",
                                            "dependsOn": [],
                                            "policy": {
                                                "secureInput": false
                                            },
                                            "userProperties": [],
                                            "typeProperties": {
                                                "pipeline": {
                                                    "referenceName": "PL_ING_07_01_ADLSCSVCheck",
                                                    "type": "PipelineReference"
                                                },
                                                "waitOnCompletion": true,
                                                "parameters": {
                                                    "FwkItem": {
                                                        "value": "@pipeline().parameters.FwkItem",
                                                        "type": "Expression"
                                                    },
                                                    "PL_01TriggerTime": {
                                                        "value": "@pipeline().parameters.PL_01TriggerTime",
                                                        "type": "Expression"
                                                    },
                                                    "EntRunId": {
                                                        "value": "@pipeline().parameters.EntRunId",
                                                        "type": "Expression"
                                                    },
                                                    "ModuleRunId": {
                                                        "value": "@pipeline().parameters.ModuleRunId",
                                                        "type": "Expression"
                                                    }
                                                }
                                            }
                                        }
                                    ]
                                },
                                {
                                    "value": "EXCEL",
                                    "activities": [
                                        {
                                            "name": "Execute PL_ING_07_02_ADLSExcelCheck",
                                            "type": "ExecutePipeline",
                                            "dependsOn": [],
                                            "policy": {
                                                "secureInput": false
                                            },
                                            "userProperties": [],
                                            "typeProperties": {
                                                "pipeline": {
                                                    "referenceName": "PL_ING_07_02_ADLSExcelCheck",
                                                    "type": "PipelineReference"
                                                },
                                                "waitOnCompletion": true,
                                                "parameters": {
                                                    "FwkItem": {
                                                        "value": "@pipeline().parameters.FwkItem",
                                                        "type": "Expression"
                                                    },
                                                    "PL_01TriggerTime": {
                                                        "value": "@pipeline().parameters.PL_01TriggerTime",
                                                        "type": "Expression"
                                                    },
                                                    "EntRunId": {
                                                        "value": "@pipeline().parameters.EntRunId",
                                                        "type": "Expression"
                                                    },
                                                    "ModuleRunId": {
                                                        "value": "@pipeline().parameters.ModuleRunId",
                                                        "type": "Expression"
                                                    }
                                                }
                                            }
                                        }
                                    ]
                                },
                                {
                                    "value": "XML",
                                    "activities": [
                                        {
                                            "name": "Execute PL_ING_07_03_ADLSXMLCheck",
                                            "type": "ExecutePipeline",
                                            "dependsOn": [],
                                            "policy": {
                                                "secureInput": false
                                            },
                                            "userProperties": [],
                                            "typeProperties": {
                                                "pipeline": {
                                                    "referenceName": "PL_ING_07_03_ADLSXMLCheck",
                                                    "type": "PipelineReference"
                                                },
                                                "waitOnCompletion": true,
                                                "parameters": {
                                                    "FwkItem": {
                                                        "value": "@pipeline().parameters.FwkItem",
                                                        "type": "Expression"
                                                    },
                                                    "PL_01TriggerTime": {
                                                        "value": "@pipeline().parameters.PL_01TriggerTime",
                                                        "type": "Expression"
                                                    },
                                                    "EntRunId": {
                                                        "value": "@pipeline().parameters.EntRunId",
                                                        "type": "Expression"
                                                    },
                                                    "ModuleRunId": {
                                                        "value": "@pipeline().parameters.ModuleRunId",
                                                        "type": "Expression"
                                                    }
                                                }
                                            }
                                        }
                                    ]
                                }
                            ]
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {}
                },
                "parameters": {
                    "FwkItem": {
                        "type": "array"
                    },
                    "PL_01TriggerTime": {
                        "type": "string"
                    },
                    "EntRunId": {
                        "type": "string"
                    },
                    "ModuleRunId": {
                        "type": "string"
                    }
                },
                "folder": {
                    "name": "01 Ingestion Module/07 ADLS"
                },
                "annotations": [],
                "lastPublishTime": "2023-07-06T08:29:17Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/pipelines/PL_ING_07_01_ADLSCSVCheck')]",
                "[concat(variables('factoryId'), '/pipelines/PL_ING_07_02_ADLSExcelCheck')]",
                "[concat(variables('factoryId'), '/pipelines/PL_ING_07_03_ADLSXMLCheck')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/PL_ING_08_01_SnowflakeFullLoad')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "FullLoad Copy into Landing",
                        "description": "Copy a table from a database to the configurated Sink dynamically taking by input FwkItem, SrcPath.",
                        "type": "Copy",
                        "dependsOn": [
                            {
                                "activity": "spi_IngtLogInsert",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "OdbcSource",
                                "query": {
                                    "value": "@if(\r\n    empty(string(pipeline().parameters.FwkItem['Query'])),\r\n    concat(\r\n        'SELECT ', \r\n        pipeline().parameters.FwkItem['TableHint'], ' ', \r\n        coalesce(pipeline().parameters.FwkItem['SelectedColumnNames'], '*'), \r\n        ' FROM ',\r\n        pipeline().parameters.FwkItem['Schemaname'], \r\n        '.',\r\n        pipeline().parameters.FwkItem['EntityName']\r\n    ), \r\n    pipeline().parameters.FwkItem['Query']\r\n)",
                                    "type": "Expression"
                                },
                                "queryTimeout": "02:00:00"
                            },
                            "sink": {
                                "type": "ParquetSink",
                                "storeSettings": {
                                    "type": "AzureBlobFSWriteSettings"
                                },
                                "formatSettings": {
                                    "type": "ParquetWriteSettings"
                                }
                            },
                            "enableStaging": false,
                            "validateDataConsistency": true,
                            "translator": {
                                "type": "TabularTranslator",
                                "typeConversion": true,
                                "typeConversionSettings": {
                                    "allowDataTruncation": true,
                                    "treatBooleanAsNumber": false
                                }
                            }
                        },
                        "inputs": [
                            {
                                "referenceName": "DS_Snowflake_Source",
                                "type": "DatasetReference",
                                "parameters": {
                                    "FwkItem": {
                                        "value": "@pipeline().parameters.FwkItem",
                                        "type": "Expression"
                                    }
                                }
                            }
                        ],
                        "outputs": [
                            {
                                "referenceName": "DS_ADLS_PRQ_Sink",
                                "type": "DatasetReference",
                                "parameters": {
                                    "InstanceURL": {
                                        "value": "@pipeline().parameters.FwkItem['SinkInstanceURL']",
                                        "type": "Expression"
                                    },
                                    "FullPath": {
                                        "value": "@concat(pipeline().parameters.FwkItem['SinkPath'], \n\t'/',\n\tformatDateTime(pipeline().parameters.PL_01TriggerTime,'yyyy'),\n\tformatDateTime(pipeline().parameters.PL_01TriggerTime,'MM'),\n\tformatDateTime(pipeline().parameters.PL_01TriggerTime,'dd'),\n\tformatDateTime(pipeline().parameters.PL_01TriggerTime,'HH'),\n\tformatDateTime(pipeline().parameters.PL_01TriggerTime,'mm'),\n\t'_',\n\tpipeline().parameters.FwkItem['EntityName'],\n\t'.snappy.parquet'\n)",
                                        "type": "Expression"
                                    }
                                }
                            }
                        ]
                    },
                    {
                        "name": "spi_IngtLogInsert",
                        "description": "Executes the SP spi_IngtLogInsert to insert record into IngtLog table with the execution module information.",
                        "type": "SqlServerStoredProcedure",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "storedProcedureName": "[[dbo].[spi_IngtLogInsert]",
                            "storedProcedureParameters": {
                                "IngtOutputId": {
                                    "value": {
                                        "value": "@pipeline().parameters.FwkItem['IngtOutputId']",
                                        "type": "Expression"
                                    },
                                    "type": "Int32"
                                },
                                "EntRunId": {
                                    "value": {
                                        "value": "@pipeline().parameters.EntRunId",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                },
                                "ModuleRunId": {
                                    "value": {
                                        "value": "@pipeline().parameters.ModuleRunId",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                },
                                "PipelineStatus": {
                                    "value": {
                                        "value": "InProgress",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                },
                                "StartDate": {
                                    "value": {
                                        "value": "@formatdatetime(pipeline().TriggerTime)",
                                        "type": "Expression"
                                    },
                                    "type": "Datetime"
                                },
                                "RowsRead": {
                                    "value": null,
                                    "type": "Int64"
                                },
                                "RowsCopied": {
                                    "value": null,
                                    "type": "Int64"
                                },
                                "CopyDuration": {
                                    "value": null,
                                    "type": "Double"
                                },
                                "Throughput": {
                                    "value": null,
                                    "type": "Double"
                                },
                                "ErrorMessage": {
                                    "value": null,
                                    "type": "String"
                                },
                                "FileName": {
                                    "value": null,
                                    "type": "String"
                                }
                            }
                        },
                        "linkedServiceName": {
                            "referenceName": "LS_configurationDB",
                            "type": "LinkedServiceReference"
                        }
                    },
                    {
                        "name": "spu_IngtLogUpdate_succeeded",
                        "description": "Executes the SP spu_IngtLogUpdate to update record into IngtLog table with the execution module information.",
                        "type": "SqlServerStoredProcedure",
                        "dependsOn": [
                            {
                                "activity": "FullLoad Copy into Landing",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "storedProcedureName": "[[dbo].[spu_IngtLogUpdate]",
                            "storedProcedureParameters": {
                                "IngtOutputId": {
                                    "value": {
                                        "value": "@pipeline().parameters.FwkItem['IngtOutputId']",
                                        "type": "Expression"
                                    },
                                    "type": "Int32"
                                },
                                "EntRunId": {
                                    "value": {
                                        "value": "@pipeline().parameters.EntRunId",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                },
                                "ModuleRunId": {
                                    "value": {
                                        "value": "@pipeline().parameters.ModuleRunId",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                },
                                "PipelineStatus": {
                                    "value": {
                                        "value": "Succeeded",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                },
                                "RowsRead": {
                                    "value": {
                                        "value": "@if(\n    contains(activity('FullLoad Copy into Landing').output, 'rowsRead'),\n    activity('FullLoad Copy into Landing').output.rowsRead,\n    null\n)",
                                        "type": "Expression"
                                    },
                                    "type": "Int64"
                                },
                                "RowsCopied": {
                                    "value": {
                                        "value": "@if(\n    contains(activity('FullLoad Copy into Landing').output, 'rowsCopied'),\n    activity('FullLoad Copy into Landing').output.rowsCopied,\n    null\n)",
                                        "type": "Expression"
                                    },
                                    "type": "Int64"
                                },
                                "CopyDuration": {
                                    "value": {
                                        "value": "@if(\n    contains(activity('FullLoad Copy into Landing').output, 'copyDuration'),\n    activity('FullLoad Copy into Landing').output.copyDuration,\n    null\n)",
                                        "type": "Expression"
                                    },
                                    "type": "Double"
                                },
                                "Throughput": {
                                    "value": {
                                        "value": "@if(\n    contains(activity('FullLoad Copy into Landing').output, 'throughput'),\n    activity('FullLoad Copy into Landing').output.throughput,\n    null\n)",
                                        "type": "Expression"
                                    },
                                    "type": "Double"
                                },
                                "ErrorMessage": {
                                    "value": null,
                                    "type": "String"
                                },
                                "RowsSkipped": {
                                    "value": null,
                                    "type": "Int64"
                                },
                                "LogFilePath": {
                                    "value": null,
                                    "type": "String"
                                },
                                "FileName": {
                                    "value": null,
                                    "type": "String"
                                }
                            }
                        },
                        "linkedServiceName": {
                            "referenceName": "LS_configurationDB",
                            "type": "LinkedServiceReference"
                        }
                    },
                    {
                        "name": "spu_IngtLogUpdate_failed",
                        "description": "Executes the SP spu_IngtLogUpdate to update record into IngtLog table with the execution module information.",
                        "type": "SqlServerStoredProcedure",
                        "dependsOn": [
                            {
                                "activity": "FullLoad Copy into Landing",
                                "dependencyConditions": [
                                    "Failed"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "storedProcedureName": "[[dbo].[spu_IngtLogUpdate]",
                            "storedProcedureParameters": {
                                "IngtOutputId": {
                                    "value": {
                                        "value": "@pipeline().parameters.FwkItem['IngtOutputId']",
                                        "type": "Expression"
                                    },
                                    "type": "Int32"
                                },
                                "EntRunId": {
                                    "value": {
                                        "value": "@pipeline().parameters.EntRunId",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                },
                                "ModuleRunId": {
                                    "value": {
                                        "value": "@pipeline().parameters.ModuleRunId",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                },
                                "PipelineStatus": {
                                    "value": {
                                        "value": "Failed",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                },
                                "RowsRead": {
                                    "value": null,
                                    "type": "Int64"
                                },
                                "RowsCopied": {
                                    "value": null,
                                    "type": "Int64"
                                },
                                "CopyDuration": {
                                    "value": null,
                                    "type": "Double"
                                },
                                "Throughput": {
                                    "value": null,
                                    "type": "Double"
                                },
                                "ErrorMessage": {
                                    "value": {
                                        "value": "@if(\n    and(\n        contains(activity('FullLoad Copy into Landing').output, 'errors'),\n        greater(length(activity('FullLoad Copy into Landing').output.errors), 0)\n    ),\n    activity('FullLoad Copy into Landing').output.errors[0].Message,\n    null\n)",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                },
                                "RowsSkipped": {
                                    "value": null,
                                    "type": "Int64"
                                },
                                "LogFilePath": {
                                    "value": null,
                                    "type": "String"
                                },
                                "FileName": {
                                    "value": null,
                                    "type": "String"
                                }
                            }
                        },
                        "linkedServiceName": {
                            "referenceName": "LS_configurationDB",
                            "type": "LinkedServiceReference"
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {}
                },
                "parameters": {
                    "FwkItem": {
                        "type": "array"
                    },
                    "PL_01TriggerTime": {
                        "type": "string"
                    },
                    "EntRunId": {
                        "type": "string"
                    },
                    "ModuleRunId": {
                        "type": "string"
                    }
                },
                "folder": {
                    "name": "01 Ingestion Module/08 Snowflake"
                },
                "annotations": [],
                "lastPublishTime": "2023-07-06T08:29:13Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/datasets/DS_Snowflake_Source')]",
                "[concat(variables('factoryId'), '/datasets/DS_ADLS_PRQ_Sink')]",
                "[concat(variables('factoryId'), '/linkedServices/LS_configurationDB')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/PL_ING_08_02_SnowflakeDeltaLoad')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Delta Copy into Landing",
                        "description": "Copy a table from a database to the configurated Sink dynamically taking by input FwkItem, SrcPath.",
                        "type": "Copy",
                        "dependsOn": [
                            {
                                "activity": "IF numeric",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            },
                            {
                                "activity": "LookupOldWmkConfig",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "OdbcSource",
                                "query": {
                                    "value": "@concat(\n    'SELECT * FROM (',\n        if(empty(string(pipeline().parameters.FwkItem['Query'])),\n            concat(\n                'SELECT ', \n                pipeline().parameters.FwkItem['TableHint'],\n                ' ',\n                coalesce(pipeline().parameters.FwkItem['SelectedColumnNames'], '*'), \n                ' FROM ', \n                pipeline().parameters.FwkItem['SchemaName'], \n                '.', \n                pipeline().parameters.FwkItem['EntityName']\n                ),\n                pipeline().parameters.FwkItem['Query']\n            ),\n    ') T1 WHERE ( ''', pipeline().parameters.FwkItem['WmkDataType'], ''' = ''datetime'' AND ', pipeline().parameters.FwkItem['WmkColumnName'], ' > ''', convertToUtc(activity('LookupOldWmkConfig').output.firstRow.NewValueWatermark, 'UTC', 'yyyy-MM-ddTHH:mm:ss'), '''',' ) \n\t \t\tOR ( ''', pipeline().parameters.FwkItem['WmkDataType'], ''' = ''numeric'' AND ', pipeline().parameters.FwkItem['WmkColumnName'], ' > ''', coalesce(activity('LookupOldWmkConfig').output.firstRow.NewValueWatermark, 0), '''', ' )\n            OR ( ''', pipeline().parameters.FwkItem['WmkDataType'], ''' = ''stringDatetime'' AND TO_TIMESTAMP(',pipeline().parameters.FwkItem['WmkColumnName'],') > ''', convertToUtc(activity('LookupOldWmkConfig').output.firstRow.NewValueWatermark, 'UTC', 'yyyy-MM-ddTHH:mm:ss'), '''',')',\n    ' '\n)",
                                    "type": "Expression"
                                },
                                "queryTimeout": "02:00:00"
                            },
                            "sink": {
                                "type": "ParquetSink",
                                "storeSettings": {
                                    "type": "AzureBlobFSWriteSettings"
                                },
                                "formatSettings": {
                                    "type": "ParquetWriteSettings"
                                }
                            },
                            "enableStaging": false,
                            "validateDataConsistency": true,
                            "translator": {
                                "type": "TabularTranslator",
                                "typeConversion": true,
                                "typeConversionSettings": {
                                    "allowDataTruncation": true,
                                    "treatBooleanAsNumber": false
                                }
                            }
                        },
                        "inputs": [
                            {
                                "referenceName": "DS_Snowflake_Source",
                                "type": "DatasetReference",
                                "parameters": {
                                    "FwkItem": {
                                        "value": "@pipeline().parameters.FwkItem",
                                        "type": "Expression"
                                    }
                                }
                            }
                        ],
                        "outputs": [
                            {
                                "referenceName": "DS_ADLS_PRQ_Sink",
                                "type": "DatasetReference",
                                "parameters": {
                                    "InstanceURL": {
                                        "value": "@pipeline().parameters.FwkItem['SinkInstanceURL']",
                                        "type": "Expression"
                                    },
                                    "FullPath": {
                                        "value": "@concat(pipeline().parameters.FwkItem['SinkPath'], \n\t'/',\n\tformatDateTime(pipeline().parameters.PL_01TriggerTime,'yyyy'),\n\tformatDateTime(pipeline().parameters.PL_01TriggerTime,'MM'),\n\tformatDateTime(pipeline().parameters.PL_01TriggerTime,'dd'),\n\tformatDateTime(pipeline().parameters.PL_01TriggerTime,'HH'),\n\tformatDateTime(pipeline().parameters.PL_01TriggerTime,'mm'),\n\t'_',\n\tpipeline().parameters.FwkItem['EntityName'],\n\t'.snappy.parquet'\n)",
                                        "type": "Expression"
                                    }
                                }
                            }
                        ]
                    },
                    {
                        "name": "spu_UpdateWmk",
                        "description": "Executes the SP ‘spu_FwkWatermarkIntUpdate’ to Update the watermark value for objects using watermark datatype \"1\"",
                        "type": "SqlServerStoredProcedure",
                        "dependsOn": [
                            {
                                "activity": "Delta Copy into Landing",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "storedProcedureName": "[[dbo].[spu_IngtWatermarkUpdate]",
                            "storedProcedureParameters": {
                                "FwkEntityId": {
                                    "value": {
                                        "value": "@pipeline().parameters.FwkItem['FwkEntityId']",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                },
                                "NewValueWmkInt": {
                                    "value": {
                                        "value": "@if(equals(pipeline().parameters.FwkItem['WmkDataType'], 'numeric'), activity('LookupNewWmkSrc').output.firstRow.NewWatermarkValue, null)",
                                        "type": "Expression"
                                    },
                                    "type": "Int64"
                                },
                                "NewValueWmkDt": {
                                    "value": {
                                        "value": "@if(equals(pipeline().parameters.FwkItem['WmkDataType'], 'datetime'), convertToUtc(pipeline().parameters.PL_01TriggerTime, 'UTC', 'yyyy-MM-ddTHH:mm:ss'), if(equals(pipeline().parameters.FwkItem['WmkDataType'], 'stringDatetime'), pipeline().parameters.PL_01TriggerTime, null))",
                                        "type": "Expression"
                                    },
                                    "type": "Datetime"
                                }
                            }
                        },
                        "linkedServiceName": {
                            "referenceName": "LS_configurationDB",
                            "type": "LinkedServiceReference"
                        }
                    },
                    {
                        "name": "spi_NewRowsToWmkInt",
                        "description": "Executes the SP ‘spi_FwkWatermarkInsert’ to create watermark for the source object.",
                        "type": "SqlServerStoredProcedure",
                        "dependsOn": [
                            {
                                "activity": "spi_IngtLogInsert",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "storedProcedureName": "[[dbo].[spi_IngtWatermarkInsert]",
                            "storedProcedureParameters": {
                                "FwkEntityId": {
                                    "value": {
                                        "value": "@pipeline().parameters.FwkItem['FwkEntityId']",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                },
                                "WmkDataType": {
                                    "value": {
                                        "value": "@pipeline().parameters.FwkItem['WmkDataType']",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                }
                            }
                        },
                        "linkedServiceName": {
                            "referenceName": "LS_configurationDB",
                            "type": "LinkedServiceReference"
                        }
                    },
                    {
                        "name": "LookupOldWmkConfig",
                        "description": "Executes the SP ‘sps_LookupIngtWatermark’ to retrieve the information from the table  ‘FwkWatermark’ by SrcObjectChild and FwkTriggerId.",
                        "type": "Lookup",
                        "dependsOn": [
                            {
                                "activity": "spi_NewRowsToWmkInt",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "AzureSqlSource",
                                "sqlReaderStoredProcedureName": "[[dbo].[sps_LookupIngtWatermark]",
                                "storedProcedureParameters": {
                                    "FwkEntityId": {
                                        "type": "String",
                                        "value": {
                                            "value": "@pipeline().parameters.FwkItem['FwkEntityId']",
                                            "type": "Expression"
                                        }
                                    },
                                    "WmkDataType": {
                                        "type": "String",
                                        "value": {
                                            "value": "@pipeline().parameters.FwkItem['WmkDataType']",
                                            "type": "Expression"
                                        }
                                    }
                                },
                                "queryTimeout": "02:00:00",
                                "partitionOption": "None"
                            },
                            "dataset": {
                                "referenceName": "DS_SQL_Configuration",
                                "type": "DatasetReference",
                                "parameters": {}
                            },
                            "firstRowOnly": true
                        }
                    },
                    {
                        "name": "IF numeric",
                        "type": "IfCondition",
                        "dependsOn": [
                            {
                                "activity": "spi_NewRowsToWmkInt",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "expression": {
                                "value": "@equals(pipeline().parameters.FwkItem['WmkDataType'], 'numeric')\n",
                                "type": "Expression"
                            },
                            "ifTrueActivities": [
                                {
                                    "name": "LookupNewWmkSrc",
                                    "description": "Executes a query to the ‘FwkWatermark’ table  to get the ‘NewWatermarkValue’ column value.",
                                    "type": "Lookup",
                                    "dependsOn": [],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "source": {
                                            "type": "AzureSqlSource",
                                            "sqlReaderQuery": {
                                                "value": "SELECT MAX(@{pipeline().parameters.FwkItem['WmkColumnName']}) as NewWatermarkValue from [@{pipeline().parameters.FwkItem['SchemaName']}].[@{pipeline().parameters.FwkItem['EntityName']}]",
                                                "type": "Expression"
                                            },
                                            "queryTimeout": "02:00:00",
                                            "partitionOption": "None"
                                        },
                                        "dataset": {
                                            "referenceName": "DS_SQL_Source",
                                            "type": "DatasetReference",
                                            "parameters": {
                                                "FwkItem": {
                                                    "value": "@pipeline().parameters.FwkItem",
                                                    "type": "Expression"
                                                }
                                            }
                                        },
                                        "firstRowOnly": true
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "name": "spi_IngtIfNumeric_failed",
                        "description": "Executes the SP spi_IngtLogInsert to insert record into IngtLog table with the execution module information.",
                        "type": "SqlServerStoredProcedure",
                        "dependsOn": [
                            {
                                "activity": "IF numeric",
                                "dependencyConditions": [
                                    "Failed"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "storedProcedureName": "[[dbo].[spi_IngtLogInsert]",
                            "storedProcedureParameters": {
                                "IngtOutputId": {
                                    "value": {
                                        "value": "@pipeline().parameters.FwkItem['IngtOutputId']",
                                        "type": "Expression"
                                    },
                                    "type": "Int32"
                                },
                                "EntRunId": {
                                    "value": {
                                        "value": "@pipeline().parameters.EntRunId",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                },
                                "ModuleRunId": {
                                    "value": {
                                        "value": "@pipeline().parameters.ModuleRunId",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                },
                                "PipelineStatus": {
                                    "value": "Failed",
                                    "type": "String"
                                },
                                "StartDate": {
                                    "value": {
                                        "value": "@formatdatetime(pipeline().TriggerTime)",
                                        "type": "Expression"
                                    },
                                    "type": "Datetime"
                                },
                                "RowsRead": {
                                    "value": null,
                                    "type": "Int64"
                                },
                                "RowsCopied": {
                                    "value": null,
                                    "type": "Int64"
                                },
                                "CopyDuration": {
                                    "value": null,
                                    "type": "Double"
                                },
                                "Throughput": {
                                    "value": null,
                                    "type": "Double"
                                },
                                "ErrorMessage": {
                                    "value": null,
                                    "type": "String"
                                },
                                "FileName": {
                                    "value": null,
                                    "type": "String"
                                }
                            }
                        },
                        "linkedServiceName": {
                            "referenceName": "LS_configurationDB",
                            "type": "LinkedServiceReference"
                        }
                    },
                    {
                        "name": "spi_IngtLogInsert",
                        "description": "Executes the SP spi_IngtLogInsert to insert record into IngtLog table with the execution module information.",
                        "type": "SqlServerStoredProcedure",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "storedProcedureName": "[[dbo].[spi_IngtLogInsert]",
                            "storedProcedureParameters": {
                                "IngtOutputId": {
                                    "value": {
                                        "value": "@pipeline().parameters.FwkItem['IngtOutputId']",
                                        "type": "Expression"
                                    },
                                    "type": "Int32"
                                },
                                "EntRunId": {
                                    "value": {
                                        "value": "@pipeline().parameters.EntRunId",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                },
                                "ModuleRunId": {
                                    "value": {
                                        "value": "@pipeline().parameters.ModuleRunId",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                },
                                "PipelineStatus": {
                                    "value": {
                                        "value": "InProgress",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                },
                                "StartDate": {
                                    "value": {
                                        "value": "@formatdatetime(pipeline().TriggerTime)",
                                        "type": "Expression"
                                    },
                                    "type": "Datetime"
                                },
                                "RowsRead": {
                                    "value": null,
                                    "type": "Int64"
                                },
                                "RowsCopied": {
                                    "value": null,
                                    "type": "Int64"
                                },
                                "CopyDuration": {
                                    "value": null,
                                    "type": "Double"
                                },
                                "Throughput": {
                                    "value": null,
                                    "type": "Double"
                                },
                                "ErrorMessage": {
                                    "value": null,
                                    "type": "String"
                                },
                                "FileName": {
                                    "value": null,
                                    "type": "String"
                                }
                            }
                        },
                        "linkedServiceName": {
                            "referenceName": "LS_configurationDB",
                            "type": "LinkedServiceReference"
                        }
                    },
                    {
                        "name": "spu_IngtLogUpdate_succeeded",
                        "description": "Executes the SP spu_IngtLogUpdate to update record into IngtLog table with the execution module information.",
                        "type": "SqlServerStoredProcedure",
                        "dependsOn": [
                            {
                                "activity": "spu_UpdateWmk",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "storedProcedureName": "[[dbo].[spu_IngtLogUpdate]",
                            "storedProcedureParameters": {
                                "IngtOutputId": {
                                    "value": {
                                        "value": "@pipeline().parameters.FwkItem['IngtOutputId']",
                                        "type": "Expression"
                                    },
                                    "type": "Int32"
                                },
                                "EntRunId": {
                                    "value": {
                                        "value": "@pipeline().parameters.EntRunId",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                },
                                "ModuleRunId": {
                                    "value": {
                                        "value": "@pipeline().parameters.ModuleRunId",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                },
                                "PipelineStatus": {
                                    "value": {
                                        "value": "Succeeded",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                },
                                "RowsRead": {
                                    "value": {
                                        "value": "@if(\n    contains(activity('Delta Copy into Landing').output, 'rowsRead'),\n    activity('Delta Copy into Landing').output.rowsRead,\n    null\n)",
                                        "type": "Expression"
                                    },
                                    "type": "Int64"
                                },
                                "RowsCopied": {
                                    "value": {
                                        "value": "@if(\n    contains(activity('Delta Copy into Landing').output, 'rowsCopied'),\n    activity('Delta Copy into Landing').output.rowsCopied,\n    null\n)",
                                        "type": "Expression"
                                    },
                                    "type": "Int64"
                                },
                                "CopyDuration": {
                                    "value": {
                                        "value": "@if(\n    contains(activity('Delta Copy into Landing').output, 'copyDuration'),\n    activity('Delta Copy into Landing').output.copyDuration,\n    null\n)",
                                        "type": "Expression"
                                    },
                                    "type": "Double"
                                },
                                "Throughput": {
                                    "value": {
                                        "value": "@if(\n    contains(activity('Delta Copy into Landing').output, 'throughput'),\n    activity('Delta Copy into Landing').output.throughput,\n    null\n)",
                                        "type": "Expression"
                                    },
                                    "type": "Double"
                                },
                                "ErrorMessage": {
                                    "value": null,
                                    "type": "String"
                                },
                                "RowsSkipped": {
                                    "value": null,
                                    "type": "Int64"
                                },
                                "LogFilePath": {
                                    "value": null,
                                    "type": "String"
                                },
                                "FileName": {
                                    "value": null,
                                    "type": "String"
                                }
                            }
                        },
                        "linkedServiceName": {
                            "referenceName": "LS_configurationDB",
                            "type": "LinkedServiceReference"
                        }
                    },
                    {
                        "name": "spu_IngtLogUpdate_failed",
                        "description": "Executes the SP spu_IngtLogUpdate to update record into IngtLog table with the execution module information.",
                        "type": "SqlServerStoredProcedure",
                        "dependsOn": [
                            {
                                "activity": "Delta Copy into Landing",
                                "dependencyConditions": [
                                    "Failed"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "storedProcedureName": "[[dbo].[spu_IngtLogUpdate]",
                            "storedProcedureParameters": {
                                "IngtOutputId": {
                                    "value": {
                                        "value": "@pipeline().parameters.FwkItem['IngtOutputId']",
                                        "type": "Expression"
                                    },
                                    "type": "Int32"
                                },
                                "EntRunId": {
                                    "value": {
                                        "value": "@pipeline().parameters.EntRunId",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                },
                                "ModuleRunId": {
                                    "value": {
                                        "value": "@pipeline().parameters.ModuleRunId",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                },
                                "PipelineStatus": {
                                    "value": {
                                        "value": "Failed",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                },
                                "RowsRead": {
                                    "value": null,
                                    "type": "Int64"
                                },
                                "RowsCopied": {
                                    "value": null,
                                    "type": "Int64"
                                },
                                "CopyDuration": {
                                    "value": null,
                                    "type": "Double"
                                },
                                "Throughput": {
                                    "value": null,
                                    "type": "Double"
                                },
                                "ErrorMessage": {
                                    "value": {
                                        "value": "@if(\n    and(\n        contains(activity('Delta Copy into Landing').output, 'errors'),\n        greater(length(activity('Delta Copy into Landing').output.errors), 0)\n    ),\n    activity('Delta Copy into Landing').output.errors[0].Message,\n    null\n)",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                },
                                "RowsSkipped": {
                                    "value": null,
                                    "type": "Int64"
                                },
                                "LogFilePath": {
                                    "value": null,
                                    "type": "String"
                                },
                                "FileName": {
                                    "value": null,
                                    "type": "String"
                                }
                            }
                        },
                        "linkedServiceName": {
                            "referenceName": "LS_configurationDB",
                            "type": "LinkedServiceReference"
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {}
                },
                "parameters": {
                    "FwkItem": {
                        "type": "array"
                    },
                    "PL_01TriggerTime": {
                        "type": "string"
                    },
                    "EntRunId": {
                        "type": "string"
                    },
                    "ModuleRunId": {
                        "type": "string"
                    }
                },
                "folder": {
                    "name": "01 Ingestion Module/08 Snowflake"
                },
                "annotations": [],
                "lastPublishTime": "2023-07-06T08:29:13Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/datasets/DS_Snowflake_Source')]",
                "[concat(variables('factoryId'), '/datasets/DS_ADLS_PRQ_Sink')]",
                "[concat(variables('factoryId'), '/linkedServices/LS_configurationDB')]",
                "[concat(variables('factoryId'), '/datasets/DS_SQL_Configuration')]",
                "[concat(variables('factoryId'), '/datasets/DS_SQL_Source')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/PL_ING_09_01_ODataFullLoad')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "FullLoad Copy into Landing",
                        "description": "Copy a table from a database to the configurated Sink dynamically taking by input FwkItem, SrcPath.",
                        "type": "Copy",
                        "dependsOn": [
                            {
                                "activity": "spi_IngtLogInsert",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "ODataSource",
                                "query": {
                                    "value": "@if(\n    empty(string(pipeline().parameters.FwkItem['Query'])),\n    concat(\n        '?$select=', \n        replace(coalesce(pipeline().parameters.FwkItem['SelectedColumnNames'], '*'), ' ', '')\n    ), \n    pipeline().parameters.FwkItem['Query']\n)",
                                    "type": "Expression"
                                },
                                "httpRequestTimeout": "00:05:00"
                            },
                            "sink": {
                                "type": "ParquetSink",
                                "storeSettings": {
                                    "type": "AzureBlobFSWriteSettings"
                                },
                                "formatSettings": {
                                    "type": "ParquetWriteSettings"
                                }
                            },
                            "enableStaging": false,
                            "validateDataConsistency": true
                        },
                        "inputs": [
                            {
                                "referenceName": "DS_OData_Source",
                                "type": "DatasetReference",
                                "parameters": {
                                    "FwkItem": {
                                        "value": "@pipeline().parameters.FwkItem",
                                        "type": "Expression"
                                    }
                                }
                            }
                        ],
                        "outputs": [
                            {
                                "referenceName": "DS_ADLS_PRQ_Sink",
                                "type": "DatasetReference",
                                "parameters": {
                                    "InstanceURL": {
                                        "value": "@pipeline().parameters.FwkItem['SinkInstanceURL']",
                                        "type": "Expression"
                                    },
                                    "FullPath": {
                                        "value": "@concat(pipeline().parameters.FwkItem['SinkPath'], \n\t'/',\n\tformatDateTime(pipeline().parameters.PL_01TriggerTime,'yyyy'),\n\tformatDateTime(pipeline().parameters.PL_01TriggerTime,'MM'),\n\tformatDateTime(pipeline().parameters.PL_01TriggerTime,'dd'),\n\tformatDateTime(pipeline().parameters.PL_01TriggerTime,'HH'),\n\tformatDateTime(pipeline().parameters.PL_01TriggerTime,'mm'),\n\t'_',\n\tpipeline().parameters.FwkItem['EntityName'],\n\t'.snappy.parquet'\n)",
                                        "type": "Expression"
                                    }
                                }
                            }
                        ]
                    },
                    {
                        "name": "spi_IngtLogInsert",
                        "description": "Executes the SP spi_IngtLogInsert to insert record into IngtLog table with the execution module information.",
                        "type": "SqlServerStoredProcedure",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "storedProcedureName": "[[dbo].[spi_IngtLogInsert]",
                            "storedProcedureParameters": {
                                "IngtOutputId": {
                                    "value": {
                                        "value": "@pipeline().parameters.FwkItem['IngtOutputId']",
                                        "type": "Expression"
                                    },
                                    "type": "Int32"
                                },
                                "EntRunId": {
                                    "value": {
                                        "value": "@pipeline().parameters.EntRunId",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                },
                                "ModuleRunId": {
                                    "value": {
                                        "value": "@pipeline().parameters.ModuleRunId",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                },
                                "PipelineStatus": {
                                    "value": {
                                        "value": "InProgress",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                },
                                "StartDate": {
                                    "value": {
                                        "value": "@formatdatetime(pipeline().TriggerTime)",
                                        "type": "Expression"
                                    },
                                    "type": "Datetime"
                                },
                                "RowsRead": {
                                    "value": null,
                                    "type": "Int64"
                                },
                                "RowsCopied": {
                                    "value": null,
                                    "type": "Int64"
                                },
                                "CopyDuration": {
                                    "value": null,
                                    "type": "Double"
                                },
                                "Throughput": {
                                    "value": null,
                                    "type": "Double"
                                },
                                "ErrorMessage": {
                                    "value": null,
                                    "type": "String"
                                },
                                "FileName": {
                                    "value": null,
                                    "type": "String"
                                }
                            }
                        },
                        "linkedServiceName": {
                            "referenceName": "LS_configurationDB",
                            "type": "LinkedServiceReference"
                        }
                    },
                    {
                        "name": "spu_IngtLogUpdate_succeeded",
                        "description": "Executes the SP spu_IngtLogUpdate to update record into IngtLog table with the execution module information.",
                        "type": "SqlServerStoredProcedure",
                        "dependsOn": [
                            {
                                "activity": "FullLoad Copy into Landing",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "storedProcedureName": "[[dbo].[spu_IngtLogUpdate]",
                            "storedProcedureParameters": {
                                "IngtOutputId": {
                                    "value": {
                                        "value": "@pipeline().parameters.FwkItem['IngtOutputId']",
                                        "type": "Expression"
                                    },
                                    "type": "Int32"
                                },
                                "EntRunId": {
                                    "value": {
                                        "value": "@pipeline().parameters.EntRunId",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                },
                                "ModuleRunId": {
                                    "value": {
                                        "value": "@pipeline().parameters.ModuleRunId",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                },
                                "PipelineStatus": {
                                    "value": {
                                        "value": "Succeeded",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                },
                                "RowsRead": {
                                    "value": {
                                        "value": "@if(\n    contains(activity('FullLoad Copy into Landing').output, 'rowsRead'),\n    activity('FullLoad Copy into Landing').output.rowsRead,\n    null\n)",
                                        "type": "Expression"
                                    },
                                    "type": "Int64"
                                },
                                "RowsCopied": {
                                    "value": {
                                        "value": "@if(\n    contains(activity('FullLoad Copy into Landing').output, 'rowsCopied'),\n    activity('FullLoad Copy into Landing').output.rowsCopied,\n    null\n)",
                                        "type": "Expression"
                                    },
                                    "type": "Int64"
                                },
                                "CopyDuration": {
                                    "value": {
                                        "value": "@if(\n    contains(activity('FullLoad Copy into Landing').output, 'copyDuration'),\n    activity('FullLoad Copy into Landing').output.copyDuration,\n    null\n)",
                                        "type": "Expression"
                                    },
                                    "type": "Double"
                                },
                                "Throughput": {
                                    "value": {
                                        "value": "@if(\n    contains(activity('FullLoad Copy into Landing').output, 'throughput'),\n    activity('FullLoad Copy into Landing').output.throughput,\n    null\n)",
                                        "type": "Expression"
                                    },
                                    "type": "Double"
                                },
                                "ErrorMessage": {
                                    "value": null,
                                    "type": "String"
                                },
                                "RowsSkipped": {
                                    "value": null,
                                    "type": "Int64"
                                },
                                "LogFilePath": {
                                    "value": null,
                                    "type": "String"
                                },
                                "FileName": {
                                    "value": null,
                                    "type": "String"
                                }
                            }
                        },
                        "linkedServiceName": {
                            "referenceName": "LS_configurationDB",
                            "type": "LinkedServiceReference"
                        }
                    },
                    {
                        "name": "spu_IngtLogUpdate_failed",
                        "description": "Executes the SP spu_IngtLogUpdate to update record into IngtLog table with the execution module information.",
                        "type": "SqlServerStoredProcedure",
                        "dependsOn": [
                            {
                                "activity": "FullLoad Copy into Landing",
                                "dependencyConditions": [
                                    "Failed"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "storedProcedureName": "[[dbo].[spu_IngtLogUpdate]",
                            "storedProcedureParameters": {
                                "IngtOutputId": {
                                    "value": {
                                        "value": "@pipeline().parameters.FwkItem['IngtOutputId']",
                                        "type": "Expression"
                                    },
                                    "type": "Int32"
                                },
                                "EntRunId": {
                                    "value": {
                                        "value": "@pipeline().parameters.EntRunId",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                },
                                "ModuleRunId": {
                                    "value": {
                                        "value": "@pipeline().parameters.ModuleRunId",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                },
                                "PipelineStatus": {
                                    "value": {
                                        "value": "Failed",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                },
                                "RowsRead": {
                                    "value": null,
                                    "type": "Int64"
                                },
                                "RowsCopied": {
                                    "value": null,
                                    "type": "Int64"
                                },
                                "CopyDuration": {
                                    "value": null,
                                    "type": "Double"
                                },
                                "Throughput": {
                                    "value": null,
                                    "type": "Double"
                                },
                                "ErrorMessage": {
                                    "value": {
                                        "value": "@if(\n    and(\n        contains(activity('FullLoad Copy into Landing').output, 'errors'),\n        greater(length(activity('FullLoad Copy into Landing').output.errors), 0)\n    ),\n    activity('FullLoad Copy into Landing').output.errors[0].Message,\n    null\n)",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                },
                                "RowsSkipped": {
                                    "value": null,
                                    "type": "Int64"
                                },
                                "LogFilePath": {
                                    "value": null,
                                    "type": "String"
                                },
                                "FileName": {
                                    "value": null,
                                    "type": "String"
                                }
                            }
                        },
                        "linkedServiceName": {
                            "referenceName": "LS_configurationDB",
                            "type": "LinkedServiceReference"
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {}
                },
                "parameters": {
                    "FwkItem": {
                        "type": "array"
                    },
                    "PL_01TriggerTime": {
                        "type": "string"
                    },
                    "EntRunId": {
                        "type": "string"
                    },
                    "ModuleRunId": {
                        "type": "string"
                    }
                },
                "folder": {
                    "name": "01 Ingestion Module/09 OData"
                },
                "annotations": [],
                "lastPublishTime": "2023-07-06T08:29:13Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/datasets/DS_OData_Source')]",
                "[concat(variables('factoryId'), '/datasets/DS_ADLS_PRQ_Sink')]",
                "[concat(variables('factoryId'), '/linkedServices/LS_configurationDB')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/PL_ING_09_02_ODataDeltaLoad')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Delta Copy into Landing",
                        "description": "Copy a table from a database to the configurated Sink dynamically taking by input FwkItem, SrcPath.",
                        "type": "Copy",
                        "dependsOn": [
                            {
                                "activity": "IF numeric",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            },
                            {
                                "activity": "LookupOldWmkConfig",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "ODataSource",
                                "query": {
                                    "value": "@concat(\n    if(\n        empty(string(pipeline().parameters.FwkItem['Query'])),\n        concat(\n            '?$select=', \n            replace(coalesce(pipeline().parameters.FwkItem['SelectedColumnNames'], '*'), ' ', ''), \n            '&$filter=', \n            pipeline().parameters.FwkItem['WmkColumnName'], \n            ' gt ', \n            concat(convertToUtc(activity('LookupOldWmkConfig').output.firstRow.NewValueWatermark, 'UTC', 'yyyy-MM-ddTHH:mm:ss'), 'Z')\n        ),\n        concat(\n            pipeline().parameters.FwkItem['Query'],\n            if(\n                contains(pipeline().parameters.FwkItem['Query'], '$filter'),\n                concat(\n                    ' and ',\n                    pipeline().parameters.FwkItem['WmkColumnName'], \n                    ' gt ', \n                    concat(convertToUtc(activity('LookupOldWmkConfig').output.firstRow.NewValueWatermark, 'UTC', 'yyyy-MM-ddTHH:mm:ss'), 'Z')\n                ),\n                concat(\n                    '&$filter=',\n                    pipeline().parameters.FwkItem['WmkColumnName'], \n                    ' gt ', \n                    concat(convertToUtc(activity('LookupOldWmkConfig').output.firstRow.NewValueWatermark, 'UTC', 'yyyy-MM-ddTHH:mm:ss'), 'Z')\n                )\n            )\n        )\n    )\n)",
                                    "type": "Expression"
                                },
                                "httpRequestTimeout": "00:05:00"
                            },
                            "sink": {
                                "type": "ParquetSink",
                                "storeSettings": {
                                    "type": "AzureBlobFSWriteSettings"
                                },
                                "formatSettings": {
                                    "type": "ParquetWriteSettings"
                                }
                            },
                            "enableStaging": false,
                            "validateDataConsistency": true
                        },
                        "inputs": [
                            {
                                "referenceName": "DS_OData_Source",
                                "type": "DatasetReference",
                                "parameters": {
                                    "FwkItem": {
                                        "value": "@pipeline().parameters.FwkItem",
                                        "type": "Expression"
                                    }
                                }
                            }
                        ],
                        "outputs": [
                            {
                                "referenceName": "DS_ADLS_PRQ_Sink",
                                "type": "DatasetReference",
                                "parameters": {
                                    "InstanceURL": {
                                        "value": "@pipeline().parameters.FwkItem['SinkInstanceURL']",
                                        "type": "Expression"
                                    },
                                    "FullPath": {
                                        "value": "@concat(pipeline().parameters.FwkItem['SinkPath'], \n\t'/',\n\tformatDateTime(pipeline().parameters.PL_01TriggerTime,'yyyy'),\n\tformatDateTime(pipeline().parameters.PL_01TriggerTime,'MM'),\n\tformatDateTime(pipeline().parameters.PL_01TriggerTime,'dd'),\n\tformatDateTime(pipeline().parameters.PL_01TriggerTime,'HH'),\n\tformatDateTime(pipeline().parameters.PL_01TriggerTime,'mm'),\n\t'_',\n\tpipeline().parameters.FwkItem['EntityName'],\n\t'.snappy.parquet'\n)",
                                        "type": "Expression"
                                    }
                                }
                            }
                        ]
                    },
                    {
                        "name": "spu_UpdateWmk",
                        "description": "Executes the SP ‘spu_FwkWatermarkIntUpdate’ to Update the watermark value for objects using watermark datatype \"1\"",
                        "type": "SqlServerStoredProcedure",
                        "dependsOn": [
                            {
                                "activity": "Delta Copy into Landing",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "storedProcedureName": "[[dbo].[spu_IngtWatermarkUpdate]",
                            "storedProcedureParameters": {
                                "FwkEntityId": {
                                    "value": {
                                        "value": "@pipeline().parameters.FwkItem['FwkEntityId']",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                },
                                "NewValueWmkInt": {
                                    "value": {
                                        "value": "@if(equals(pipeline().parameters.FwkItem['WmkDataType'], 'numeric'), activity('LookupNewWmkSrc').output.firstRow.NewWatermarkValue, null)",
                                        "type": "Expression"
                                    },
                                    "type": "Int64"
                                },
                                "NewValueWmkDt": {
                                    "value": {
                                        "value": "@if(equals(pipeline().parameters.FwkItem['WmkDataType'], 'datetime'), convertToUtc(pipeline().parameters.PL_01TriggerTime, 'UTC', 'yyyy-MM-ddTHH:mm:ss'), if(equals(pipeline().parameters.FwkItem['WmkDataType'], 'stringDatetime'), pipeline().parameters.PL_01TriggerTime, null))",
                                        "type": "Expression"
                                    },
                                    "type": "Datetime"
                                }
                            }
                        },
                        "linkedServiceName": {
                            "referenceName": "LS_configurationDB",
                            "type": "LinkedServiceReference"
                        }
                    },
                    {
                        "name": "spi_NewRowsToWmkInt",
                        "description": "Executes the SP ‘spi_FwkWatermarkInsert’ to create watermark for the source object.",
                        "type": "SqlServerStoredProcedure",
                        "dependsOn": [
                            {
                                "activity": "spi_IngtLogInsert",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "storedProcedureName": "[[dbo].[spi_IngtWatermarkInsert]",
                            "storedProcedureParameters": {
                                "FwkEntityId": {
                                    "value": {
                                        "value": "@pipeline().parameters.FwkItem['FwkEntityId']",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                },
                                "WmkDataType": {
                                    "value": {
                                        "value": "@pipeline().parameters.FwkItem['WmkDataType']",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                }
                            }
                        },
                        "linkedServiceName": {
                            "referenceName": "LS_configurationDB",
                            "type": "LinkedServiceReference"
                        }
                    },
                    {
                        "name": "LookupOldWmkConfig",
                        "description": "Executes the SP ‘sps_LookupIngtWatermark’ to retrieve the information from the table  ‘FwkWatermark’ by SrcObjectChild and FwkTriggerId.",
                        "type": "Lookup",
                        "dependsOn": [
                            {
                                "activity": "spi_NewRowsToWmkInt",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "AzureSqlSource",
                                "sqlReaderStoredProcedureName": "[[dbo].[sps_LookupIngtWatermark]",
                                "storedProcedureParameters": {
                                    "FwkEntityId": {
                                        "type": "String",
                                        "value": {
                                            "value": "@pipeline().parameters.FwkItem['FwkEntityId']",
                                            "type": "Expression"
                                        }
                                    },
                                    "WmkDataType": {
                                        "type": "String",
                                        "value": {
                                            "value": "@pipeline().parameters.FwkItem['WmkDataType']",
                                            "type": "Expression"
                                        }
                                    }
                                },
                                "queryTimeout": "02:00:00",
                                "partitionOption": "None"
                            },
                            "dataset": {
                                "referenceName": "DS_SQL_Configuration",
                                "type": "DatasetReference",
                                "parameters": {}
                            },
                            "firstRowOnly": true
                        }
                    },
                    {
                        "name": "IF numeric",
                        "type": "IfCondition",
                        "dependsOn": [
                            {
                                "activity": "spi_NewRowsToWmkInt",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "expression": {
                                "value": "@equals(pipeline().parameters.FwkItem['WmkDataType'], 'numeric')\n",
                                "type": "Expression"
                            },
                            "ifTrueActivities": [
                                {
                                    "name": "LookupNewWmkSrc",
                                    "description": "Executes a query to the ‘FwkWatermark’ table  to get the ‘NewWatermarkValue’ column value.",
                                    "type": "Lookup",
                                    "dependsOn": [],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "source": {
                                            "type": "AzureSqlSource",
                                            "sqlReaderQuery": {
                                                "value": "SELECT MAX(@{pipeline().parameters.FwkItem['WmkColumnName']}) as NewWatermarkValue from [@{pipeline().parameters.FwkItem['SchemaName']}].[@{pipeline().parameters.FwkItem['EntityName']}]",
                                                "type": "Expression"
                                            },
                                            "queryTimeout": "02:00:00",
                                            "partitionOption": "None"
                                        },
                                        "dataset": {
                                            "referenceName": "DS_SQL_Source",
                                            "type": "DatasetReference",
                                            "parameters": {
                                                "FwkItem": {
                                                    "value": "@pipeline().parameters.FwkItem",
                                                    "type": "Expression"
                                                }
                                            }
                                        },
                                        "firstRowOnly": true
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "name": "spi_IngtIfNumeric_failed",
                        "description": "Executes the SP spi_IngtLogInsert to insert record into IngtLog table with the execution module information.",
                        "type": "SqlServerStoredProcedure",
                        "dependsOn": [
                            {
                                "activity": "IF numeric",
                                "dependencyConditions": [
                                    "Failed"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "storedProcedureName": "[[dbo].[spi_IngtLogInsert]",
                            "storedProcedureParameters": {
                                "IngtOutputId": {
                                    "value": {
                                        "value": "@pipeline().parameters.FwkItem['IngtOutputId']",
                                        "type": "Expression"
                                    },
                                    "type": "Int32"
                                },
                                "EntRunId": {
                                    "value": {
                                        "value": "@pipeline().parameters.EntRunId",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                },
                                "ModuleRunId": {
                                    "value": {
                                        "value": "@pipeline().parameters.ModuleRunId",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                },
                                "PipelineStatus": {
                                    "value": "Failed",
                                    "type": "String"
                                },
                                "StartDate": {
                                    "value": {
                                        "value": "@formatdatetime(pipeline().TriggerTime)",
                                        "type": "Expression"
                                    },
                                    "type": "Datetime"
                                },
                                "RowsRead": {
                                    "value": null,
                                    "type": "Int64"
                                },
                                "RowsCopied": {
                                    "value": null,
                                    "type": "Int64"
                                },
                                "CopyDuration": {
                                    "value": null,
                                    "type": "Double"
                                },
                                "Throughput": {
                                    "value": null,
                                    "type": "Double"
                                },
                                "ErrorMessage": {
                                    "value": null,
                                    "type": "String"
                                },
                                "FileName": {
                                    "value": null,
                                    "type": "String"
                                }
                            }
                        },
                        "linkedServiceName": {
                            "referenceName": "LS_configurationDB",
                            "type": "LinkedServiceReference"
                        }
                    },
                    {
                        "name": "spi_IngtLogInsert",
                        "description": "Executes the SP spi_IngtLogInsert to insert record into IngtLog table with the execution module information.",
                        "type": "SqlServerStoredProcedure",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "storedProcedureName": "[[dbo].[spi_IngtLogInsert]",
                            "storedProcedureParameters": {
                                "IngtOutputId": {
                                    "value": {
                                        "value": "@pipeline().parameters.FwkItem['IngtOutputId']",
                                        "type": "Expression"
                                    },
                                    "type": "Int32"
                                },
                                "EntRunId": {
                                    "value": {
                                        "value": "@pipeline().parameters.EntRunId",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                },
                                "ModuleRunId": {
                                    "value": {
                                        "value": "@pipeline().parameters.ModuleRunId",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                },
                                "PipelineStatus": {
                                    "value": {
                                        "value": "InProgress",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                },
                                "StartDate": {
                                    "value": {
                                        "value": "@formatdatetime(pipeline().TriggerTime)",
                                        "type": "Expression"
                                    },
                                    "type": "Datetime"
                                },
                                "RowsRead": {
                                    "value": null,
                                    "type": "Int64"
                                },
                                "RowsCopied": {
                                    "value": null,
                                    "type": "Int64"
                                },
                                "CopyDuration": {
                                    "value": null,
                                    "type": "Double"
                                },
                                "Throughput": {
                                    "value": null,
                                    "type": "Double"
                                },
                                "ErrorMessage": {
                                    "value": null,
                                    "type": "String"
                                },
                                "FileName": {
                                    "value": null,
                                    "type": "String"
                                }
                            }
                        },
                        "linkedServiceName": {
                            "referenceName": "LS_configurationDB",
                            "type": "LinkedServiceReference"
                        }
                    },
                    {
                        "name": "spu_IngtLogUpdate_succeeded",
                        "description": "Executes the SP spu_IngtLogUpdate to update record into IngtLog table with the execution module information.",
                        "type": "SqlServerStoredProcedure",
                        "dependsOn": [
                            {
                                "activity": "spu_UpdateWmk",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "storedProcedureName": "[[dbo].[spu_IngtLogUpdate]",
                            "storedProcedureParameters": {
                                "IngtOutputId": {
                                    "value": {
                                        "value": "@pipeline().parameters.FwkItem['IngtOutputId']",
                                        "type": "Expression"
                                    },
                                    "type": "Int32"
                                },
                                "EntRunId": {
                                    "value": {
                                        "value": "@pipeline().parameters.EntRunId",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                },
                                "ModuleRunId": {
                                    "value": {
                                        "value": "@pipeline().parameters.ModuleRunId",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                },
                                "PipelineStatus": {
                                    "value": {
                                        "value": "Succeeded",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                },
                                "RowsRead": {
                                    "value": {
                                        "value": "@if(\n    contains(activity('Delta Copy into Landing').output, 'rowsRead'),\n    activity('Delta Copy into Landing').output.rowsRead,\n    null\n)",
                                        "type": "Expression"
                                    },
                                    "type": "Int64"
                                },
                                "RowsCopied": {
                                    "value": {
                                        "value": "@if(\n    contains(activity('Delta Copy into Landing').output, 'rowsCopied'),\n    activity('Delta Copy into Landing').output.rowsCopied,\n    null\n)",
                                        "type": "Expression"
                                    },
                                    "type": "Int64"
                                },
                                "CopyDuration": {
                                    "value": {
                                        "value": "@if(\n    contains(activity('Delta Copy into Landing').output, 'copyDuration'),\n    activity('Delta Copy into Landing').output.copyDuration,\n    null\n)",
                                        "type": "Expression"
                                    },
                                    "type": "Double"
                                },
                                "Throughput": {
                                    "value": {
                                        "value": "@if(\n    contains(activity('Delta Copy into Landing').output, 'throughput'),\n    activity('Delta Copy into Landing').output.throughput,\n    null\n)",
                                        "type": "Expression"
                                    },
                                    "type": "Double"
                                },
                                "ErrorMessage": {
                                    "value": null,
                                    "type": "String"
                                },
                                "RowsSkipped": {
                                    "value": null,
                                    "type": "Int64"
                                },
                                "LogFilePath": {
                                    "value": null,
                                    "type": "String"
                                },
                                "FileName": {
                                    "value": null,
                                    "type": "String"
                                }
                            }
                        },
                        "linkedServiceName": {
                            "referenceName": "LS_configurationDB",
                            "type": "LinkedServiceReference"
                        }
                    },
                    {
                        "name": "spu_IngtLogUpdate_failed",
                        "description": "Executes the SP spu_IngtLogUpdate to update record into IngtLog table with the execution module information.",
                        "type": "SqlServerStoredProcedure",
                        "dependsOn": [
                            {
                                "activity": "Delta Copy into Landing",
                                "dependencyConditions": [
                                    "Failed"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "storedProcedureName": "[[dbo].[spu_IngtLogUpdate]",
                            "storedProcedureParameters": {
                                "IngtOutputId": {
                                    "value": {
                                        "value": "@pipeline().parameters.FwkItem['IngtOutputId']",
                                        "type": "Expression"
                                    },
                                    "type": "Int32"
                                },
                                "EntRunId": {
                                    "value": {
                                        "value": "@pipeline().parameters.EntRunId",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                },
                                "ModuleRunId": {
                                    "value": {
                                        "value": "@pipeline().parameters.ModuleRunId",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                },
                                "PipelineStatus": {
                                    "value": {
                                        "value": "Failed",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                },
                                "RowsRead": {
                                    "value": null,
                                    "type": "Int64"
                                },
                                "RowsCopied": {
                                    "value": null,
                                    "type": "Int64"
                                },
                                "CopyDuration": {
                                    "value": null,
                                    "type": "Double"
                                },
                                "Throughput": {
                                    "value": null,
                                    "type": "Double"
                                },
                                "ErrorMessage": {
                                    "value": {
                                        "value": "@if(\n    and(\n        contains(activity('Delta Copy into Landing').output, 'errors'),\n        greater(length(activity('Delta Copy into Landing').output.errors), 0)\n    ),\n    activity('Delta Copy into Landing').output.errors[0].Message,\n    null\n)",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                },
                                "RowsSkipped": {
                                    "value": null,
                                    "type": "Int64"
                                },
                                "LogFilePath": {
                                    "value": null,
                                    "type": "String"
                                },
                                "FileName": {
                                    "value": null,
                                    "type": "String"
                                }
                            }
                        },
                        "linkedServiceName": {
                            "referenceName": "LS_configurationDB",
                            "type": "LinkedServiceReference"
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {}
                },
                "parameters": {
                    "FwkItem": {
                        "type": "array"
                    },
                    "PL_01TriggerTime": {
                        "type": "string"
                    },
                    "EntRunId": {
                        "type": "string"
                    },
                    "ModuleRunId": {
                        "type": "string"
                    }
                },
                "folder": {
                    "name": "01 Ingestion Module/09 OData"
                },
                "annotations": [],
                "lastPublishTime": "2023-07-06T08:29:13Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/datasets/DS_OData_Source')]",
                "[concat(variables('factoryId'), '/datasets/DS_ADLS_PRQ_Sink')]",
                "[concat(variables('factoryId'), '/linkedServices/LS_configurationDB')]",
                "[concat(variables('factoryId'), '/datasets/DS_SQL_Configuration')]",
                "[concat(variables('factoryId'), '/datasets/DS_SQL_Source')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/PL_ING_09_ODataLoad')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "If is FullLoad",
                        "description": "Evaluates the ‘LoadType’ and go in case it matches.",
                        "type": "IfCondition",
                        "dependsOn": [],
                        "userProperties": [],
                        "typeProperties": {
                            "expression": {
                                "value": "@equals(pipeline().parameters.FwkItem['TypeLoad'], 'Full')",
                                "type": "Expression"
                            },
                            "ifFalseActivities": [
                                {
                                    "name": "Execute PL_ING_09_02_ODataDeltaLoad",
                                    "description": "This pipeline is used to execute all the inner activities that are included in the ingestion module.",
                                    "type": "ExecutePipeline",
                                    "dependsOn": [],
                                    "policy": {
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "pipeline": {
                                            "referenceName": "PL_ING_09_02_ODataDeltaLoad",
                                            "type": "PipelineReference"
                                        },
                                        "waitOnCompletion": true,
                                        "parameters": {
                                            "FwkItem": {
                                                "value": "@pipeline().parameters.FwkItem",
                                                "type": "Expression"
                                            },
                                            "PL_01TriggerTime": {
                                                "value": "@pipeline().parameters.PL_01TriggerTime",
                                                "type": "Expression"
                                            },
                                            "EntRunId": {
                                                "value": "@pipeline().parameters.EntRunId",
                                                "type": "Expression"
                                            },
                                            "ModuleRunId": {
                                                "value": "@pipeline().parameters.ModuleRunId",
                                                "type": "Expression"
                                            }
                                        }
                                    }
                                }
                            ],
                            "ifTrueActivities": [
                                {
                                    "name": "Execute PL_ING_09_01_ODataFullLoad",
                                    "description": "This pipeline is used to execute all the inner activities that are included in the ingestion module.",
                                    "type": "ExecutePipeline",
                                    "dependsOn": [],
                                    "policy": {
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "pipeline": {
                                            "referenceName": "PL_ING_09_01_ODataFullLoad",
                                            "type": "PipelineReference"
                                        },
                                        "waitOnCompletion": true,
                                        "parameters": {
                                            "FwkItem": {
                                                "value": "@pipeline().parameters.FwkItem",
                                                "type": "Expression"
                                            },
                                            "PL_01TriggerTime": {
                                                "value": "@pipeline().parameters.PL_01TriggerTime",
                                                "type": "Expression"
                                            },
                                            "EntRunId": {
                                                "value": "@pipeline().parameters.EntRunId",
                                                "type": "Expression"
                                            },
                                            "ModuleRunId": {
                                                "value": "@pipeline().parameters.ModuleRunId",
                                                "type": "Expression"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {}
                },
                "parameters": {
                    "FwkItem": {
                        "type": "array"
                    },
                    "PL_01TriggerTime": {
                        "type": "string"
                    },
                    "EntRunId": {
                        "type": "string"
                    },
                    "ModuleRunId": {
                        "type": "string"
                    }
                },
                "folder": {
                    "name": "01 Ingestion Module/09 OData"
                },
                "annotations": [],
                "lastPublishTime": "2023-07-06T08:29:15Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/pipelines/PL_ING_09_02_ODataDeltaLoad')]",
                "[concat(variables('factoryId'), '/pipelines/PL_ING_09_01_ODataFullLoad')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/PL_LogToMattermost')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Call Mattermost Webhook",
                        "type": "WebActivity",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "0.12:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "method": "POST",
                            "headers": {},
                            "url": {
                                "value": "@pipeline().parameters.MatterMostWebHookURL",
                                "type": "Expression"
                            },
                            "body": {
                                "value": "@concat(\n    '{\"channel\":\"',\n    pipeline().parameters.Channel,\n    '\",\"text\":\"Alert from ADF **',\n    pipeline().DataFactory,\n    '** for EntRunId **',\n    pipeline().parameters.EntRunId,\n    '**: ',\n    pipeline().parameters.Message,\n    '\"}'\n)",
                                "type": "Expression"
                            }
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {}
                },
                "parameters": {
                    "Message": {
                        "type": "string"
                    },
                    "Channel": {
                        "type": "string",
                        "defaultValue": "[parameters('PL_LogToMattermost_properties_parameters_Channel_defaultValue')]"
                    },
                    "EntRunId": {
                        "type": "string"
                    },
                    "MatterMostWebHookURL": {
                        "type": "string",
                        "defaultValue": "[parameters('PL_LogToMattermost_properties_parameters_MatterMostWebHookURL_defaultValue')]"
                    }
                },
                "folder": {
                    "name": "99 Utils"
                },
                "annotations": [],
                "lastPublishTime": "2023-07-06T08:29:09Z"
            },
            "dependsOn": []
        },
        {
            "name": "[concat(parameters('factoryName'), '/PL_MaintenancePipeline')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "DT_RunMaintenanceNotebook",
                        "type": "DatabricksNotebook",
                        "dependsOn": [
                            {
                                "activity": "sp_FwkLogInsert_Maintenance",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "0.12:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "notebookPath": "/Code/mdmf/maintenance/maintenance"
                        },
                        "linkedServiceName": {
                            "referenceName": "LS_databricks",
                            "type": "LinkedServiceReference"
                        }
                    },
                    {
                        "name": "sp_UpdateMaintenanceLog_succeeded",
                        "description": "Executes the SP spu_FwkLogUpdate to update the record created by the ‘InsertIntoFwkLog’ activity in the table ‘FwkLog’ by updating the columns ‘PipelineStatus’ to ‘Success’.",
                        "type": "SqlServerStoredProcedure",
                        "dependsOn": [
                            {
                                "activity": "DT_RunMaintenanceNotebook",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "storedProcedureName": "[[dbo].[spu_FwkLogUpdate]",
                            "storedProcedureParameters": {
                                "ModuleRunId": {
                                    "value": {
                                        "value": "@pipeline().RunId",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                },
                                "PipelineStatus": {
                                    "value": {
                                        "value": "Succeeded",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                },
                                "JobRunUrl": {
                                    "value": {
                                        "value": "@activity('DT_RunMaintenanceNotebook').output.runPageUrl",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                }
                            }
                        },
                        "linkedServiceName": {
                            "referenceName": "LS_configurationDB",
                            "type": "LinkedServiceReference"
                        }
                    },
                    {
                        "name": "sp_UpdateMaintenanceLog_failed",
                        "description": "Executes the SP spu_FwkLogUpdate to update the record created by the ‘InsertIntoFwkLog’ activity in the table ‘FwkLog’ by updating the columns ‘PipelineStatus’ to ‘Success’.",
                        "type": "SqlServerStoredProcedure",
                        "dependsOn": [
                            {
                                "activity": "DT_RunMaintenanceNotebook",
                                "dependencyConditions": [
                                    "Failed"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "storedProcedureName": "[[dbo].[spu_FwkLogUpdate]",
                            "storedProcedureParameters": {
                                "ModuleRunId": {
                                    "value": {
                                        "value": "@pipeline().RunId",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                },
                                "PipelineStatus": {
                                    "value": {
                                        "value": "Failed",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                },
                                "JobRunUrl": {
                                    "value": {
                                        "value": "@activity('DT_RunMaintenanceNotebook').output.runPageUrl",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                }
                            }
                        },
                        "linkedServiceName": {
                            "referenceName": "LS_configurationDB",
                            "type": "LinkedServiceReference"
                        }
                    },
                    {
                        "name": "sp_FwkLogInsert_Maintenance",
                        "description": "Executes the SP spi_FwkLogInsert to insert record into FwkLog table with the execution module information by pipeline id and with null status.",
                        "type": "SqlServerStoredProcedure",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "storedProcedureName": "[[dbo].[spi_FwkLogInsert]",
                            "storedProcedureParameters": {
                                "EntRunId": {
                                    "value": {
                                        "value": "@pipeline().RunId",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                },
                                "Module": {
                                    "value": "Maintenance",
                                    "type": "String"
                                },
                                "ModuleRunId": {
                                    "value": {
                                        "value": "@pipeline().RunId",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                },
                                "StartDate": {
                                    "value": {
                                        "value": "@formatdatetime(pipeline().TriggerTime)",
                                        "type": "Expression"
                                    },
                                    "type": "DateTime"
                                },
                                "ADFTriggerName": {
                                    "value": null,
                                    "type": "String"
                                }
                            }
                        },
                        "linkedServiceName": {
                            "referenceName": "LS_configurationDB",
                            "type": "LinkedServiceReference"
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {}
                },
                "annotations": []
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/LS_databricks')]",
                "[concat(variables('factoryId'), '/linkedServices/LS_configurationDB')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/PL_MasterPipeline')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Lookup FwkTriggerId",
                        "type": "Lookup",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "0.12:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "AzureSqlSource",
                                "sqlReaderStoredProcedureName": "[[dbo].[sps_LookupFwkTriggerId]",
                                "storedProcedureParameters": {
                                    "ADFTriggerName": {
                                        "type": "String",
                                        "value": {
                                            "value": "@if(\n    equals(pipeline().parameters.ADFTriggerName, 'none'),\n    pipeline().TriggerName,\n    pipeline().parameters.ADFTriggerName\n)",
                                            "type": "Expression"
                                        }
                                    }
                                },
                                "queryTimeout": "02:00:00",
                                "partitionOption": "None"
                            },
                            "dataset": {
                                "referenceName": "DS_SQL_Configuration",
                                "type": "DatasetReference",
                                "parameters": {}
                            },
                            "firstRowOnly": true
                        }
                    },
                    {
                        "name": "Execute Is Pipeline Running",
                        "type": "ExecutePipeline",
                        "dependsOn": [
                            {
                                "activity": "Lookup FwkTriggerId",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "PL_PipelineRunStatus",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {
                                "CancelIfAlreadyRunning": {
                                    "value": "@activity('Lookup FwkTriggerId').output.firstRow['FwkCancelIfAlreadyRunning']",
                                    "type": "Expression"
                                },
                                "ADFTriggerName": {
                                    "value": "@pipeline().parameters.ADFTriggerName",
                                    "type": "Expression"
                                },
                                "FwkLayerId": {
                                    "value": "@pipeline().parameters.FwkLayerId",
                                    "type": "Expression"
                                },
                                "MasterRunId": {
                                    "value": "@pipeline().RunId",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    {
                        "name": "If PipelineRuninParallel",
                        "type": "IfCondition",
                        "dependsOn": [
                            {
                                "activity": "Execute Is Pipeline Running",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "expression": {
                                "value": "@activity('Lookup FwkTriggerId').output.firstRow['FwkRunInParallelWithOthers']\n    ",
                                "type": "Expression"
                            },
                            "ifFalseActivities": [
                                {
                                    "name": "Execute ETL Pipeline Queue",
                                    "type": "ExecutePipeline",
                                    "dependsOn": [],
                                    "policy": {
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "pipeline": {
                                            "referenceName": "PL_ETLPipeline_Queue",
                                            "type": "PipelineReference"
                                        },
                                        "waitOnCompletion": true,
                                        "parameters": {
                                            "EntRunId": {
                                                "value": "@pipeline().RunId",
                                                "type": "Expression"
                                            },
                                            "EntTriggerTime": {
                                                "value": "@pipeline().TriggerTime",
                                                "type": "Expression"
                                            },
                                            "FwkTriggerId": {
                                                "value": "@activity('Lookup FwkTriggerId').output.firstRow['FwkTriggerId']",
                                                "type": "Expression"
                                            },
                                            "FwkLayerId": {
                                                "value": "@pipeline().parameters.FwkLayerId",
                                                "type": "Expression"
                                            },
                                            "ADFTriggerName": {
                                                "value": "@pipeline().parameters.ADFTriggerName",
                                                "type": "Expression"
                                            }
                                        }
                                    }
                                }
                            ],
                            "ifTrueActivities": [
                                {
                                    "name": "Execute ETL Pipeline Parallel Check",
                                    "type": "ExecutePipeline",
                                    "dependsOn": [],
                                    "policy": {
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "pipeline": {
                                            "referenceName": "PL_ETLPipeline_Parallel",
                                            "type": "PipelineReference"
                                        },
                                        "waitOnCompletion": false,
                                        "parameters": {
                                            "EntRunId": {
                                                "value": "@pipeline().RunId",
                                                "type": "Expression"
                                            },
                                            "EntTriggerTime": {
                                                "value": "@pipeline().TriggerTime",
                                                "type": "Expression"
                                            },
                                            "FwkTriggerId": {
                                                "value": "@activity('Lookup FwkTriggerId').output.firstRow['FwkTriggerId']",
                                                "type": "Expression"
                                            },
                                            "FwkLayerId": {
                                                "value": "@pipeline().parameters.FwkLayerId",
                                                "type": "Expression"
                                            },
                                            "ADFTriggerName": {
                                                "value": "@if(\n    equals(pipeline().parameters.ADFTriggerName, 'none'),\n    pipeline().TriggerName,\n    pipeline().parameters.ADFTriggerName\n)",
                                                "type": "Expression"
                                            },
                                            "CancelIfAlreadyRunning": {
                                                "value": "@activity('Lookup FwkTriggerId').output.firstRow['FwkCancelIfAlreadyRunning']",
                                                "type": "Expression"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {}
                },
                "parameters": {
                    "ADFTriggerName": {
                        "type": "string",
                        "defaultValue": "none"
                    },
                    "FwkLayerId": {
                        "type": "string",
                        "defaultValue": "none"
                    }
                },
                "annotations": [],
                "lastPublishTime": "2023-07-06T08:29:23Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/datasets/DS_SQL_Configuration')]",
                "[concat(variables('factoryId'), '/pipelines/PL_PipelineRunStatus')]",
                "[concat(variables('factoryId'), '/pipelines/PL_ETLPipeline_Queue')]",
                "[concat(variables('factoryId'), '/pipelines/PL_ETLPipeline_Parallel')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/PL_PipelineRunStatus')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "get_pipeline_details",
                        "type": "WebActivity",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "0.12:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "method": "POST",
                            "headers": {},
                            "url": {
                                "value": "@concat(pipeline().parameters.AzureRestApiUrl,'/providers/Microsoft.DataFactory/factories/',pipeline().DataFactory,'/queryPipelineRuns?api-version=2018-06-01')",
                                "type": "Expression"
                            },
                            "body": {
                                "value": "@concat('{\n  \"lastUpdatedAfter\": \"', subtractFromTime(utcNow(),1,'Day'),'\",\n  \"lastUpdatedBefore\":\"', utcNow(),'\",\n  \"filters\": [\n    {\n      \"operand\": \"PipelineName\",\n      \"operator\": \"In\",\n      \"values\": [\"PL_MasterPipeline\",\"PL_ETLPipeline\"]\n    },\n    { \n      \"operand\": \"Status\", \n      \"operator\": \"In\", \n      \"values\": [ \"InProgress\", \"Queued\"] \n      }\n      ]\n}')",
                                "type": "Expression"
                            },
                            "authentication": {
                                "type": "MSI",
                                "resource": {
                                    "value": "https://management.azure.com/",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    {
                        "name": "Filter Running Pipeline",
                        "type": "Filter",
                        "dependsOn": [
                            {
                                "activity": "get_pipeline_details",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "items": {
                                "value": "@activity('get_pipeline_details').output.value",
                                "type": "Expression"
                            },
                            "condition": {
                                "value": "@and(\n    not(\n        equals(item().runId,pipeline().parameters.MasterRunId)\n    ),\n    equals(item().parameters['ADFTriggerName'],pipeline().parameters.ADFTriggerName)\n)",
                                "type": "Expression"
                            }
                        }
                    },
                    {
                        "name": "ForEachRunningPipeline",
                        "type": "ForEach",
                        "dependsOn": [
                            {
                                "activity": "Set ETLPipelineTriggerStatus_Continue",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "items": {
                                "value": "@activity('Filter Running Pipeline').output.value",
                                "type": "Expression"
                            },
                            "isSequential": true,
                            "activities": [
                                {
                                    "name": "CancelIFAlreadyRunning",
                                    "type": "IfCondition",
                                    "dependsOn": [
                                        {
                                            "activity": "Set ContinueWithETLRun_False",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "userProperties": [],
                                    "typeProperties": {
                                        "expression": {
                                            "value": "@equals(\n    toUpper(string(pipeline().parameters.CancelIfAlreadyRunning)),'TRUE'\n    )        \n",
                                            "type": "Expression"
                                        },
                                        "ifTrueActivities": [
                                            {
                                                "name": "Fail ETL pipeline Run",
                                                "type": "Fail",
                                                "dependsOn": [
                                                    {
                                                        "activity": "Log Cancelled",
                                                        "dependencyConditions": [
                                                            "Succeeded"
                                                        ]
                                                    }
                                                ],
                                                "userProperties": [],
                                                "typeProperties": {
                                                    "message": {
                                                        "value": "Cancelled pipeline since same paramater pipeline already Running",
                                                        "type": "Expression"
                                                    },
                                                    "errorCode": "403"
                                                }
                                            },
                                            {
                                                "name": "Log Cancelled",
                                                "type": "ExecutePipeline",
                                                "dependsOn": [],
                                                "policy": {
                                                    "secureInput": false
                                                },
                                                "userProperties": [],
                                                "typeProperties": {
                                                    "pipeline": {
                                                        "referenceName": "PL_LogToMattermost",
                                                        "type": "PipelineReference"
                                                    },
                                                    "waitOnCompletion": true,
                                                    "parameters": {
                                                        "Message": {
                                                            "value": "@concat('Execution of pipeline ''PL_MasterPipeline'' for FwkTriggerId **', pipeline().parameters.ADFTriggerName,'** will not start because another pipeline with same paramters is runnning')",
                                                            "type": "Expression"
                                                        },
                                                        "EntRunId": {
                                                            "value": "@pipeline().GroupId",
                                                            "type": "Expression"
                                                        }
                                                    }
                                                }
                                            }
                                        ]
                                    }
                                },
                                {
                                    "name": "Set ContinueWithETLRun_False",
                                    "type": "SetVariable",
                                    "dependsOn": [],
                                    "policy": {
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "variableName": "pipelineReturnValue",
                                        "value": [
                                            {
                                                "key": "ContinueWithETLPipelineRun",
                                                "value": {
                                                    "type": "Boolean",
                                                    "content": false
                                                }
                                            }
                                        ],
                                        "setSystemVariable": true
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "name": "Set ETLPipelineTriggerStatus_Continue",
                        "type": "SetVariable",
                        "dependsOn": [
                            {
                                "activity": "Filter Running Pipeline",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "variableName": "pipelineReturnValue",
                            "value": [
                                {
                                    "key": "ContinueWithETLPipelineRun",
                                    "value": {
                                        "type": "Boolean",
                                        "content": true
                                    }
                                }
                            ],
                            "setSystemVariable": true
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {}
                },
                "parameters": {
                    "AzureRestApiUrl": {
                        "type": "string",
                        "defaultValue": "[parameters('PL_PipelineRunStatus_properties_parameters_AzureRestApiUrl_defaultValue')]"
                    },
                    "CancelIfAlreadyRunning": {
                        "type": "string"
                    },
                    "ADFTriggerName": {
                        "type": "string",
                        "defaultValue": "none"
                    },
                    "FwkLayerId": {
                        "type": "string",
                        "defaultValue": "none"
                    },
                    "MasterRunId": {
                        "type": "string"
                    }
                },
                "folder": {
                    "name": "99 Utils"
                },
                "annotations": []
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/pipelines/PL_LogToMattermost')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/PL_StartOrStopTrigger')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "For each Trigger",
                        "type": "ForEach",
                        "dependsOn": [],
                        "userProperties": [],
                        "typeProperties": {
                            "items": {
                                "value": "@pipeline().parameters.TriggerNames",
                                "type": "Expression"
                            },
                            "activities": [
                                {
                                    "name": "Check RuntimeState vlaue is valid",
                                    "type": "IfCondition",
                                    "dependsOn": [],
                                    "userProperties": [],
                                    "typeProperties": {
                                        "expression": {
                                            "value": "@or(equals(pipeline().parameters.RuntimeState, 'Started'), equals(pipeline().parameters.RuntimeState, 'Stopped'))",
                                            "type": "Expression"
                                        },
                                        "ifFalseActivities": [
                                            {
                                                "name": "Invalid RuntimeState in parameters",
                                                "type": "Fail",
                                                "dependsOn": [],
                                                "userProperties": [],
                                                "typeProperties": {
                                                    "message": "Invalid RuntimeState. Please choose \"Started\" or \"Stopped\".",
                                                    "errorCode": "500"
                                                }
                                            }
                                        ]
                                    }
                                },
                                {
                                    "name": "Switch STOP or START triggers",
                                    "type": "Switch",
                                    "dependsOn": [
                                        {
                                            "activity": "Check RuntimeState vlaue is valid",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "userProperties": [],
                                    "typeProperties": {
                                        "on": {
                                            "value": "@pipeline().parameters.RuntimeState",
                                            "type": "Expression"
                                        },
                                        "cases": [
                                            {
                                                "value": "Started",
                                                "activities": [
                                                    {
                                                        "name": "Start Trigger",
                                                        "description": "This will start the scheduled triggers in the targeted ADF",
                                                        "type": "WebActivity",
                                                        "dependsOn": [],
                                                        "policy": {
                                                            "timeout": "7.00:00:00",
                                                            "retry": 0,
                                                            "retryIntervalInSeconds": 30,
                                                            "secureOutput": false,
                                                            "secureInput": false
                                                        },
                                                        "userProperties": [],
                                                        "typeProperties": {
                                                            "method": "POST",
                                                            "headers": {},
                                                            "url": {
                                                                "value": "@concat(\n    pipeline().parameters.AzureRestApiUrl,\n    '/providers/Microsoft.DataFactory/factories/'\n    ,pipeline().DataFactory,\n    '/triggers/',\n    item(),\n    '/start?api-version=2018-06-01'\n    )",
                                                                "type": "Expression"
                                                            },
                                                            "body": {
                                                                "value": "{}",
                                                                "type": "Expression"
                                                            },
                                                            "authentication": {
                                                                "type": "MSI",
                                                                "resource": {
                                                                    "value": "https://management.azure.com/",
                                                                    "type": "Expression"
                                                                }
                                                            }
                                                        }
                                                    }
                                                ]
                                            },
                                            {
                                                "value": "Stopped",
                                                "activities": [
                                                    {
                                                        "name": "Stop Trigger",
                                                        "type": "WebActivity",
                                                        "dependsOn": [],
                                                        "policy": {
                                                            "timeout": "7.00:00:00",
                                                            "retry": 0,
                                                            "retryIntervalInSeconds": 30,
                                                            "secureOutput": false,
                                                            "secureInput": false
                                                        },
                                                        "userProperties": [],
                                                        "typeProperties": {
                                                            "method": "POST",
                                                            "headers": {},
                                                            "url": {
                                                                "value": "@concat(\n    pipeline().parameters.AzureRestApiUrl,\n    '/providers/Microsoft.DataFactory/factories/'\n    ,pipeline().DataFactory,\n    '/triggers/',\n    item(),\n    '/stop?api-version=2018-06-01'\n    )",
                                                                "type": "Expression"
                                                            },
                                                            "body": {
                                                                "value": "{}",
                                                                "type": "Expression"
                                                            },
                                                            "authentication": {
                                                                "type": "MSI",
                                                                "resource": {
                                                                    "value": "https://management.azure.com/",
                                                                    "type": "Expression"
                                                                }
                                                            }
                                                        }
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                }
                            ]
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {}
                },
                "parameters": {
                    "AzureRestApiUrl": {
                        "type": "string",
                        "defaultValue": "[parameters('PL_StartOrStopTrigger_properties_parameters_AzureRestApiUrl_defaultValue')]"
                    },
                    "TriggerNames": {
                        "type": "array"
                    },
                    "RuntimeState": {
                        "type": "string"
                    }
                },
                "variables": {
                    "ADFTriggers": {
                        "type": "Array",
                        "defaultValue": []
                    },
                    "IsNextLinkPresent": {
                        "type": "Boolean",
                        "defaultValue": true
                    },
                    "GetADFTriggersURL": {
                        "type": "String"
                    },
                    "ListADFTriggersTemp": {
                        "type": "Array"
                    },
                    "TriggerFoundFlag": {
                        "type": "Boolean",
                        "defaultValue": false
                    },
                    "IsRuntimeStateSame": {
                        "type": "Boolean",
                        "defaultValue": false
                    },
                    "DummyRunTimeState": {
                        "type": "String"
                    },
                    "Dummy2": {
                        "type": "String"
                    }
                },
                "annotations": [],
                "lastPublishTime": "2023-07-06T08:29:13Z"
            },
            "dependsOn": []
        },
        {
            "name": "[concat(parameters('factoryName'), '/PL_TRN_00_TransformationMaster')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "If has active instructions",
                        "type": "IfCondition",
                        "dependsOn": [
                            {
                                "activity": "Has active instructions",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "expression": {
                                "value": "@activity('Has active instructions').output.firstRow['Result']",
                                "type": "Expression"
                            },
                            "ifFalseActivities": [
                                {
                                    "name": "Set outputContinueETL to True",
                                    "type": "SetVariable",
                                    "dependsOn": [],
                                    "policy": {
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "variableName": "pipelineReturnValue",
                                        "value": [
                                            {
                                                "key": "outputContinueETL",
                                                "value": {
                                                    "type": "Boolean",
                                                    "content": true
                                                }
                                            }
                                        ],
                                        "setSystemVariable": true
                                    }
                                }
                            ],
                            "ifTrueActivities": [
                                {
                                    "name": "Execute PL_TRN_01_RunTransformation",
                                    "type": "ExecutePipeline",
                                    "dependsOn": [
                                        {
                                            "activity": "DT_RunPreETLNotebook",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "pipeline": {
                                            "referenceName": "PL_TRN_01_RunTransformation",
                                            "type": "PipelineReference"
                                        },
                                        "waitOnCompletion": true,
                                        "parameters": {
                                            "EntRunId": {
                                                "value": "@pipeline().parameters.EntRunId",
                                                "type": "Expression"
                                            },
                                            "EntTriggerTime": {
                                                "value": "@pipeline().parameters.EntTriggerTime",
                                                "type": "Expression"
                                            },
                                            "FwkTriggerId": {
                                                "value": "@pipeline().parameters.FwkTriggerId",
                                                "type": "Expression"
                                            },
                                            "FwkLayerId": {
                                                "value": "@pipeline().parameters.FwkLayerId",
                                                "type": "Expression"
                                            },
                                            "ADFTriggerName": {
                                                "value": "@pipeline().parameters.ADFTriggerName",
                                                "type": "Expression"
                                            }
                                        }
                                    }
                                },
                                {
                                    "name": "Set outputContinueETL from pipeline output",
                                    "type": "SetVariable",
                                    "dependsOn": [
                                        {
                                            "activity": "Execute PL_TRN_01_RunTransformation",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "variableName": "pipelineReturnValue",
                                        "value": [
                                            {
                                                "key": "outputContinueETL",
                                                "value": {
                                                    "type": "Expression",
                                                    "content": "@not(activity('Execute PL_TRN_01_RunTransformation').output.pipelineReturnValue['outputStopETLAfterTransformation'])"
                                                }
                                            }
                                        ],
                                        "setSystemVariable": true
                                    }
                                },
                                {
                                    "name": "Set outputStopOrContinueETLonFailure",
                                    "type": "SetVariable",
                                    "dependsOn": [
                                        {
                                            "activity": "Execute PL_TRN_01_RunTransformation",
                                            "dependencyConditions": [
                                                "Failed"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "variableName": "pipelineReturnValue",
                                        "value": [
                                            {
                                                "key": "outputContinueETL",
                                                "value": {
                                                    "type": "Expression",
                                                    "content": "@not(activity('Execute PL_TRN_01_RunTransformation').output.pipelineReturnValue['outputStopETLAfterTransformation'])"
                                                }
                                            }
                                        ],
                                        "setSystemVariable": true
                                    }
                                },
                                {
                                    "name": "DT_RunPreETLNotebook",
                                    "type": "DatabricksNotebook",
                                    "dependsOn": [],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "notebookPath": "/Code/mdmf/etl/preEtl"
                                    },
                                    "linkedServiceName": {
                                        "referenceName": "LS_databricks",
                                        "type": "LinkedServiceReference"
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "name": "Has active instructions",
                        "type": "Lookup",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "0.12:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "AzureSqlSource",
                                "sqlReaderStoredProcedureName": "[[dbo].[sps_HasActiveDtInstructions]",
                                "storedProcedureParameters": {
                                    "FwkLayerId": {
                                        "type": "String",
                                        "value": {
                                            "value": "@if(\n    equals(pipeline().parameters.FwkLayerId, 'none'),\n    null,\n    pipeline().parameters.FwkLayerId\n)",
                                            "type": "Expression"
                                        }
                                    },
                                    "FwkTriggerId": {
                                        "type": "String",
                                        "value": {
                                            "value": "@pipeline().parameters.FwkTriggerId",
                                            "type": "Expression"
                                        }
                                    }
                                },
                                "queryTimeout": "02:00:00",
                                "partitionOption": "None"
                            },
                            "dataset": {
                                "referenceName": "DS_SQL_Configuration",
                                "type": "DatasetReference",
                                "parameters": {}
                            },
                            "firstRowOnly": true
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {}
                },
                "parameters": {
                    "EntRunId": {
                        "type": "string"
                    },
                    "EntTriggerTime": {
                        "type": "string"
                    },
                    "FwkTriggerId": {
                        "type": "string"
                    },
                    "FwkLayerId": {
                        "type": "string"
                    },
                    "ADFTriggerName": {
                        "type": "string"
                    }
                },
                "folder": {
                    "name": "02 Transformation Module"
                },
                "annotations": []
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/datasets/DS_SQL_Configuration')]",
                "[concat(variables('factoryId'), '/pipelines/PL_TRN_01_RunTransformation')]",
                "[concat(variables('factoryId'), '/linkedServices/LS_databricks')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/PL_TRN_01_RunTransformation')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "sp_FwkLogInsert",
                        "description": "Executes the SP spi_FwkLogInsert to insert record into FwkLog table with the execution module information by pipeline id and with null status.",
                        "type": "SqlServerStoredProcedure",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "storedProcedureName": "[[dbo].[spi_FwkLogInsert]",
                            "storedProcedureParameters": {
                                "EntRunId": {
                                    "value": {
                                        "value": "@pipeline().parameters.EntRunId",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                },
                                "Module": {
                                    "value": {
                                        "value": "Transformation",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                },
                                "ModuleRunId": {
                                    "value": {
                                        "value": "@pipeline().RunId",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                },
                                "StartDate": {
                                    "value": {
                                        "value": "@formatdatetime(pipeline().TriggerTime)",
                                        "type": "Expression"
                                    },
                                    "type": "DateTime"
                                },
                                "ADFTriggerName": {
                                    "value": {
                                        "value": "@pipeline().parameters.ADFTriggerName",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                }
                            }
                        },
                        "linkedServiceName": {
                            "referenceName": "LS_configurationDB",
                            "type": "LinkedServiceReference"
                        }
                    },
                    {
                        "name": "LookupDtOrder",
                        "description": "Executes the SP ‘sps_LookupDtOrder’ to get the information about DtOrder numbers.",
                        "type": "Lookup",
                        "dependsOn": [
                            {
                                "activity": "sp_FwkLogInsert",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "AzureSqlSource",
                                "sqlReaderStoredProcedureName": "[[dbo].[sps_LookupDtOrder]",
                                "storedProcedureParameters": {
                                    "FwkLayerId": {
                                        "value": {
                                            "value": "@if(\n    equals(pipeline().parameters.FwkLayerId, 'none'),\n    null,\n    pipeline().parameters.FwkLayerId\n)",
                                            "type": "Expression"
                                        }
                                    }
                                },
                                "queryTimeout": "02:00:00",
                                "partitionOption": "None"
                            },
                            "dataset": {
                                "referenceName": "DS_SQL_Configuration",
                                "type": "DatasetReference",
                                "parameters": {}
                            },
                            "firstRowOnly": false
                        }
                    },
                    {
                        "name": "ForEachDtOrder",
                        "type": "ForEach",
                        "dependsOn": [
                            {
                                "activity": "LookupDtOrder",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "items": {
                                "value": "@array(activity('LookupDtOrder').output.value)",
                                "type": "Expression"
                            },
                            "isSequential": true,
                            "activities": [
                                {
                                    "name": "IfDtOrderIsStopped",
                                    "type": "IfCondition",
                                    "dependsOn": [],
                                    "userProperties": [],
                                    "typeProperties": {
                                        "expression": {
                                            "value": "@variables('varStopETLforDtOrder')",
                                            "type": "Expression"
                                        },
                                        "ifFalseActivities": [
                                            {
                                                "name": "Execute PL_TRN_02_ProcessDtOrder",
                                                "type": "ExecutePipeline",
                                                "dependsOn": [],
                                                "policy": {
                                                    "secureInput": false
                                                },
                                                "userProperties": [],
                                                "typeProperties": {
                                                    "pipeline": {
                                                        "referenceName": "PL_TRN_02_ProcessDtOrder",
                                                        "type": "PipelineReference"
                                                    },
                                                    "waitOnCompletion": true,
                                                    "parameters": {
                                                        "EntRunId": {
                                                            "value": "@pipeline().parameters.EntRunId",
                                                            "type": "Expression"
                                                        },
                                                        "EntTriggerTime": {
                                                            "value": "@pipeline().parameters.EntTriggerTime",
                                                            "type": "Expression"
                                                        },
                                                        "FwkTriggerId": {
                                                            "value": "@pipeline().parameters.FwkTriggerId",
                                                            "type": "Expression"
                                                        },
                                                        "DtOrderItem": {
                                                            "value": "@item()",
                                                            "type": "Expression"
                                                        },
                                                        "FwkLayerId": {
                                                            "value": "@pipeline().parameters.FwkLayerId",
                                                            "type": "Expression"
                                                        },
                                                        "ADFTriggerName": {
                                                            "value": "@pipeline().parameters.ADFTriggerName",
                                                            "type": "Expression"
                                                        }
                                                    }
                                                }
                                            },
                                            {
                                                "name": "setVarStopETLforDtOrder",
                                                "type": "SetVariable",
                                                "dependsOn": [
                                                    {
                                                        "activity": "Execute PL_TRN_02_ProcessDtOrder",
                                                        "dependencyConditions": [
                                                            "Succeeded"
                                                        ]
                                                    }
                                                ],
                                                "policy": {
                                                    "secureOutput": false,
                                                    "secureInput": false
                                                },
                                                "userProperties": [],
                                                "typeProperties": {
                                                    "variableName": "varStopETLforDtOrder",
                                                    "value": {
                                                        "value": "@activity('Execute PL_TRN_02_ProcessDtOrder').output.pipelineReturnValue['outputStopETL']\n",
                                                        "type": "Expression"
                                                    }
                                                }
                                            },
                                            {
                                                "name": "setVarStoporContinueETLforDtOrderonFailure",
                                                "type": "SetVariable",
                                                "dependsOn": [
                                                    {
                                                        "activity": "Execute PL_TRN_02_ProcessDtOrder",
                                                        "dependencyConditions": [
                                                            "Failed"
                                                        ]
                                                    }
                                                ],
                                                "policy": {
                                                    "secureOutput": false,
                                                    "secureInput": false
                                                },
                                                "userProperties": [],
                                                "typeProperties": {
                                                    "variableName": "varStopETLforDtOrder",
                                                    "value": {
                                                        "value": "@activity('Execute PL_TRN_02_ProcessDtOrder').output.pipelineReturnValue['outputStopETL']\n",
                                                        "type": "Expression"
                                                    }
                                                }
                                            }
                                        ]
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "name": "sp_UpdateExecutionLog_failed",
                        "description": "Executes the SP spu_FwkLogUpdate to update the record created by the ‘InsertIntoFwkLog’ activity in the table ‘FwkLog’ by updating the columns ‘PipelineStatus’ to ‘Success’.",
                        "type": "SqlServerStoredProcedure",
                        "dependsOn": [
                            {
                                "activity": "ForEachDtOrder",
                                "dependencyConditions": [
                                    "Failed"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "storedProcedureName": "[[dbo].[spu_FwkLogUpdate]",
                            "storedProcedureParameters": {
                                "ModuleRunId": {
                                    "value": {
                                        "value": "@pipeline().RunId",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                },
                                "PipelineStatus": {
                                    "value": {
                                        "value": "Failed",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                },
                                "JobRunUrl": {
                                    "value": null,
                                    "type": "String"
                                },
                                "ErrorMessage": {
                                    "value": null,
                                    "type": "String"
                                }
                            }
                        },
                        "linkedServiceName": {
                            "referenceName": "LS_configurationDB",
                            "type": "LinkedServiceReference"
                        }
                    },
                    {
                        "name": "setStopETLAfterTransformation",
                        "type": "SetVariable",
                        "dependsOn": [
                            {
                                "activity": "If ETLSetToStop",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "variableName": "pipelineReturnValue",
                            "value": [
                                {
                                    "key": "outputStopETLAfterTransformation",
                                    "value": {
                                        "type": "Expression",
                                        "content": "@variables('varStopETLforDtOrder')"
                                    }
                                }
                            ],
                            "setSystemVariable": true
                        }
                    },
                    {
                        "name": "If ETLSetToStop",
                        "type": "IfCondition",
                        "dependsOn": [
                            {
                                "activity": "ForEachDtOrder",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "expression": {
                                "value": "@variables('varStopETLforDtOrder')",
                                "type": "Expression"
                            },
                            "ifFalseActivities": [
                                {
                                    "name": "sp_UpdateExecutionLog_Suceeded",
                                    "description": "",
                                    "type": "SqlServerStoredProcedure",
                                    "dependsOn": [],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "storedProcedureName": "[[dbo].[spu_FwkLogUpdate]",
                                        "storedProcedureParameters": {
                                            "ModuleRunId": {
                                                "value": {
                                                    "value": "@pipeline().RunId",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            },
                                            "PipelineStatus": {
                                                "value": {
                                                    "value": "Succeeded",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            },
                                            "JobRunUrl": {
                                                "value": null,
                                                "type": "String"
                                            },
                                            "ErrorMessage": {
                                                "value": null,
                                                "type": "String"
                                            }
                                        }
                                    },
                                    "linkedServiceName": {
                                        "referenceName": "LS_configurationDB",
                                        "type": "LinkedServiceReference"
                                    }
                                }
                            ],
                            "ifTrueActivities": [
                                {
                                    "name": "sp_UpdateExecutionLog_Stopped",
                                    "description": "",
                                    "type": "SqlServerStoredProcedure",
                                    "dependsOn": [],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "storedProcedureName": "[[dbo].[spu_FwkLogUpdate]",
                                        "storedProcedureParameters": {
                                            "ModuleRunId": {
                                                "value": {
                                                    "value": "@pipeline().RunId",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            },
                                            "PipelineStatus": {
                                                "value": {
                                                    "value": "Stopped",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            },
                                            "JobRunUrl": {
                                                "value": null,
                                                "type": "String"
                                            },
                                            "ErrorMessage": {
                                                "value": null,
                                                "type": "String"
                                            }
                                        }
                                    },
                                    "linkedServiceName": {
                                        "referenceName": "LS_configurationDB",
                                        "type": "LinkedServiceReference"
                                    }
                                }
                            ]
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {}
                },
                "parameters": {
                    "EntRunId": {
                        "type": "string"
                    },
                    "EntTriggerTime": {
                        "type": "string"
                    },
                    "FwkTriggerId": {
                        "type": "string"
                    },
                    "FwkLayerId": {
                        "type": "string"
                    },
                    "ADFTriggerName": {
                        "type": "string"
                    }
                },
                "variables": {
                    "varStopETLforDtOrder": {
                        "type": "Boolean",
                        "defaultValue": false
                    }
                },
                "folder": {
                    "name": "02 Transformation Module"
                },
                "annotations": [],
                "lastPublishTime": "2023-07-06T08:29:17Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/LS_configurationDB')]",
                "[concat(variables('factoryId'), '/datasets/DS_SQL_Configuration')]",
                "[concat(variables('factoryId'), '/pipelines/PL_TRN_02_ProcessDtOrder')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/PL_TRN_02_ProcessDtOrder')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "LookupDtLayer",
                        "description": "Executes the SP ‘sps_LookupDtOrder’ to get the information about DtOrder numbers.",
                        "type": "Lookup",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "AzureSqlSource",
                                "sqlReaderStoredProcedureName": "[[dbo].[sps_LookupDtLayer]",
                                "storedProcedureParameters": {
                                    "DtOrder": {
                                        "type": "Int32",
                                        "value": {
                                            "value": "@pipeline().parameters.DtOrderItem['DtOrder']",
                                            "type": "Expression"
                                        }
                                    },
                                    "FwkLayerId": {
                                        "type": "String",
                                        "value": {
                                            "value": "@if(\n    equals(pipeline().parameters.FwkLayerId, 'none'),\n    null,\n    pipeline().parameters.FwkLayerId\n)",
                                            "type": "Expression"
                                        }
                                    },
                                    "FwkTriggerId": {
                                        "type": "String",
                                        "value": {
                                            "value": "@pipeline().parameters.FwkTriggerId",
                                            "type": "Expression"
                                        }
                                    }
                                },
                                "queryTimeout": "02:00:00",
                                "partitionOption": "None"
                            },
                            "dataset": {
                                "referenceName": "DS_SQL_Configuration",
                                "type": "DatasetReference",
                                "parameters": {}
                            },
                            "firstRowOnly": false
                        }
                    },
                    {
                        "name": "ForEachDtLayer",
                        "type": "ForEach",
                        "dependsOn": [
                            {
                                "activity": "LookupDtLayer",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "items": {
                                "value": "@array(activity('LookupDtLayer').output.value)",
                                "type": "Expression"
                            },
                            "isSequential": false,
                            "batchCount": 30,
                            "activities": [
                                {
                                    "name": "IfLayerIsStopped",
                                    "type": "IfCondition",
                                    "dependsOn": [],
                                    "userProperties": [],
                                    "typeProperties": {
                                        "expression": {
                                            "value": "@variables('varStopETLforLayers')",
                                            "type": "Expression"
                                        },
                                        "ifFalseActivities": [
                                            {
                                                "name": "Execute PL_TRN_03_PreProcessLayer",
                                                "type": "ExecutePipeline",
                                                "dependsOn": [],
                                                "policy": {
                                                    "secureInput": false
                                                },
                                                "userProperties": [],
                                                "typeProperties": {
                                                    "pipeline": {
                                                        "referenceName": "PL_TRN_03_PreProcessLayer",
                                                        "type": "PipelineReference"
                                                    },
                                                    "waitOnCompletion": true,
                                                    "parameters": {
                                                        "LayerItem": {
                                                            "value": "@item()",
                                                            "type": "Expression"
                                                        },
                                                        "EntRunId": {
                                                            "value": "@pipeline().parameters.EntRunId",
                                                            "type": "Expression"
                                                        },
                                                        "EntTriggerTime": {
                                                            "value": "@pipeline().parameters.EntTriggerTime",
                                                            "type": "Expression"
                                                        },
                                                        "FwkTriggerId": {
                                                            "value": "@pipeline().parameters.FwkTriggerId",
                                                            "type": "Expression"
                                                        },
                                                        "DtOrderItem": {
                                                            "value": "@pipeline().parameters.DtOrderItem",
                                                            "type": "Expression"
                                                        },
                                                        "ADFTriggerName": {
                                                            "value": "@pipeline().parameters.ADFTriggerName",
                                                            "type": "Expression"
                                                        }
                                                    }
                                                }
                                            },
                                            {
                                                "name": "setVarStopETLforLayer",
                                                "type": "SetVariable",
                                                "dependsOn": [
                                                    {
                                                        "activity": "Execute PL_TRN_03_PreProcessLayer",
                                                        "dependencyConditions": [
                                                            "Succeeded"
                                                        ]
                                                    }
                                                ],
                                                "policy": {
                                                    "secureOutput": false,
                                                    "secureInput": false
                                                },
                                                "userProperties": [],
                                                "typeProperties": {
                                                    "variableName": "varStopETLforLayers",
                                                    "value": {
                                                        "value": "@activity('Execute PL_TRN_03_PreProcessLayer').output.pipelineReturnValue['outputStopETL']",
                                                        "type": "Expression"
                                                    }
                                                }
                                            },
                                            {
                                                "name": "setOutputStopOnFailureResult",
                                                "type": "SetVariable",
                                                "dependsOn": [
                                                    {
                                                        "activity": "Execute PL_TRN_03_PreProcessLayer",
                                                        "dependencyConditions": [
                                                            "Failed"
                                                        ]
                                                    }
                                                ],
                                                "policy": {
                                                    "secureOutput": false,
                                                    "secureInput": false
                                                },
                                                "userProperties": [],
                                                "typeProperties": {
                                                    "variableName": "varStopETLforLayers",
                                                    "value": {
                                                        "value": "@activity('Execute PL_TRN_03_PreProcessLayer').output.pipelineReturnValue['outputStopETL']",
                                                        "type": "Expression"
                                                    }
                                                }
                                            }
                                        ]
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "name": "setOutputStopETL",
                        "type": "SetVariable",
                        "dependsOn": [
                            {
                                "activity": "ForEachDtLayer",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "variableName": "pipelineReturnValue",
                            "value": [
                                {
                                    "key": "outputStopETL",
                                    "value": {
                                        "type": "Expression",
                                        "content": "@variables('varStopETLforLayers')"
                                    }
                                }
                            ],
                            "setSystemVariable": true
                        }
                    },
                    {
                        "name": "setOutputStopOrContinueETLonFailure",
                        "type": "SetVariable",
                        "dependsOn": [
                            {
                                "activity": "ForEachDtLayer",
                                "dependencyConditions": [
                                    "Failed"
                                ]
                            }
                        ],
                        "policy": {
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "variableName": "pipelineReturnValue",
                            "value": [
                                {
                                    "key": "outputStopETL",
                                    "value": {
                                        "type": "Expression",
                                        "content": "@variables('varStopETLforLayers')"
                                    }
                                }
                            ],
                            "setSystemVariable": true
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {}
                },
                "parameters": {
                    "EntRunId": {
                        "type": "string"
                    },
                    "EntTriggerTime": {
                        "type": "string"
                    },
                    "FwkTriggerId": {
                        "type": "string"
                    },
                    "DtOrderItem": {
                        "type": "array"
                    },
                    "FwkLayerId": {
                        "type": "string"
                    },
                    "ADFTriggerName": {
                        "type": "string"
                    }
                },
                "variables": {
                    "varStopETLforLayers": {
                        "type": "Boolean",
                        "defaultValue": false
                    }
                },
                "folder": {
                    "name": "02 Transformation Module"
                },
                "annotations": [],
                "lastPublishTime": "2023-07-06T08:29:16Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/datasets/DS_SQL_Configuration')]",
                "[concat(variables('factoryId'), '/pipelines/PL_TRN_03_PreProcessLayer')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/PL_TRN_03_PreProcessLayer')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "sp_FwkLogInsert",
                        "description": "Executes the SP spi_FwkLogInsert to insert record into FwkLog table with the execution module information by pipeline id and with null status.",
                        "type": "SqlServerStoredProcedure",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "storedProcedureName": "[[dbo].[spi_FwkLogInsert]",
                            "storedProcedureParameters": {
                                "EntRunId": {
                                    "value": {
                                        "value": "@pipeline().parameters.EntRunId",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                },
                                "Module": {
                                    "value": {
                                        "value": "@concat('Transformation > ',\n    pipeline().parameters.LayerItem['FwkLayerId'], ' Layer'\n)",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                },
                                "ModuleRunId": {
                                    "value": {
                                        "value": "@pipeline().RunId",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                },
                                "StartDate": {
                                    "value": {
                                        "value": "@formatdatetime(pipeline().TriggerTime)",
                                        "type": "Expression"
                                    },
                                    "type": "DateTime"
                                },
                                "ADFTriggerName": {
                                    "value": {
                                        "value": "@pipeline().parameters.ADFTriggerName",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                }
                            }
                        },
                        "linkedServiceName": {
                            "referenceName": "LS_configurationDB",
                            "type": "LinkedServiceReference"
                        }
                    },
                    {
                        "name": "If PreTransformationNotebookRun",
                        "type": "IfCondition",
                        "dependsOn": [
                            {
                                "activity": "sp_FwkLogInsert",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "expression": {
                                "value": "@not(equals(pipeline().parameters.LayerItem['PreTransformationNotebookRun'], null))",
                                "type": "Expression"
                            },
                            "ifTrueActivities": [
                                {
                                    "name": "DT_RunPreTransformationNotebook",
                                    "type": "DatabricksNotebook",
                                    "dependsOn": [
                                        {
                                            "activity": "sp_FwkLogInsert_PreTrasnformation",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "timeout": "0.12:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "notebookPath": {
                                            "value": "@concat('/Code/compartment/', pipeline().parameters.LayerItem['PreTransformationNotebookRun'])",
                                            "type": "Expression"
                                        },
                                        "baseParameters": {
                                            "FwkTriggerId": {
                                                "value": "@pipeline().parameters.FwkTriggerId",
                                                "type": "Expression"
                                            },
                                            "ADFTriggerName": {
                                                "value": "@pipeline().parameters.ADFTriggerName",
                                                "type": "Expression"
                                            }
                                        }
                                    },
                                    "linkedServiceName": {
                                        "referenceName": "LS_databricks",
                                        "type": "LinkedServiceReference",
                                        "parameters": {
                                            "ClusterId": {
                                                "value": "@pipeline().parameters.LayerItem['ClusterId']",
                                                "type": "Expression"
                                            }
                                        }
                                    }
                                },
                                {
                                    "name": "sp_UpdatePreTrasnformationLog_succeeded",
                                    "description": "Executes the SP spu_FwkLogUpdate to update the record created by the ‘InsertIntoFwkLog’ activity in the table ‘FwkLog’ by updating the columns ‘PipelineStatus’ to ‘Success’.",
                                    "type": "SqlServerStoredProcedure",
                                    "dependsOn": [
                                        {
                                            "activity": "DT_RunPreTransformationNotebook",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "storedProcedureName": "[[dbo].[spu_FwkLogUpdate]",
                                        "storedProcedureParameters": {
                                            "ModuleRunId": {
                                                "value": {
                                                    "value": "@concat(pipeline().RunId, '-pre')",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            },
                                            "PipelineStatus": {
                                                "value": {
                                                    "value": "Succeeded",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            },
                                            "JobRunUrl": {
                                                "value": {
                                                    "value": "@activity('DT_RunPreTransformationNotebook').output.runPageUrl",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            }
                                        }
                                    },
                                    "linkedServiceName": {
                                        "referenceName": "LS_configurationDB",
                                        "type": "LinkedServiceReference"
                                    }
                                },
                                {
                                    "name": "sp_UpdatePreTrasnformationLog_failed",
                                    "description": "Executes the SP spu_FwkLogUpdate to update the record created by the ‘InsertIntoFwkLog’ activity in the table ‘FwkLog’ by updating the columns ‘PipelineStatus’ to ‘Success’.",
                                    "type": "SqlServerStoredProcedure",
                                    "dependsOn": [
                                        {
                                            "activity": "DT_RunPreTransformationNotebook",
                                            "dependencyConditions": [
                                                "Failed"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "storedProcedureName": "[[dbo].[spu_FwkLogUpdate]",
                                        "storedProcedureParameters": {
                                            "ModuleRunId": {
                                                "value": {
                                                    "value": "@concat(pipeline().RunId, '-pre')",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            },
                                            "PipelineStatus": {
                                                "value": {
                                                    "value": "Failed",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            },
                                            "JobRunUrl": {
                                                "value": {
                                                    "value": "@activity('DT_RunPreTransformationNotebook').output.runPageUrl",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            }
                                        }
                                    },
                                    "linkedServiceName": {
                                        "referenceName": "LS_configurationDB",
                                        "type": "LinkedServiceReference"
                                    }
                                },
                                {
                                    "name": "sp_FwkLogInsert_PreTrasnformation",
                                    "description": "Executes the SP spi_FwkLogInsert to insert record into FwkLog table with the execution module information by pipeline id and with null status.",
                                    "type": "SqlServerStoredProcedure",
                                    "dependsOn": [],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "storedProcedureName": "[[dbo].[spi_FwkLogInsert]",
                                        "storedProcedureParameters": {
                                            "EntRunId": {
                                                "value": {
                                                    "value": "@pipeline().parameters.EntRunId",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            },
                                            "Module": {
                                                "value": {
                                                    "value": "@concat('Transformation > ', \n    pipeline().parameters.LayerItem['FwkLayerId'], \n    ' Layer > PreTransformationNotebook'\n)",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            },
                                            "ModuleRunId": {
                                                "value": {
                                                    "value": "@concat(pipeline().RunId, '-pre')",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            },
                                            "StartDate": {
                                                "value": {
                                                    "value": "@formatdatetime(pipeline().TriggerTime)",
                                                    "type": "Expression"
                                                },
                                                "type": "DateTime"
                                            },
                                            "ADFTriggerName": {
                                                "value": {
                                                    "value": "@pipeline().parameters.ADFTriggerName",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            }
                                        }
                                    },
                                    "linkedServiceName": {
                                        "referenceName": "LS_configurationDB",
                                        "type": "LinkedServiceReference"
                                    }
                                },
                                {
                                    "name": "setPreTransformationNotebookOutput",
                                    "type": "SetVariable",
                                    "dependsOn": [
                                        {
                                            "activity": "sp_UpdatePreTrasnformationLog_succeeded",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "variableName": "varPreTransformationNotebookOutput",
                                        "value": {
                                            "value": "@string(activity('DT_RunPreTransformationNotebook').output)",
                                            "type": "Expression"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "name": "sp_UpdatePreTransformationExecutionLog_failed",
                        "description": "Executes the SP spu_FwkLogUpdate to update the record created by the ‘InsertIntoFwkLog’ activity in the table ‘FwkLog’ by updating the columns ‘PipelineStatus’ to ‘Success’.",
                        "type": "SqlServerStoredProcedure",
                        "dependsOn": [
                            {
                                "activity": "If PreTransformationNotebookRun",
                                "dependencyConditions": [
                                    "Failed"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "storedProcedureName": "[[dbo].[spu_FwkLogUpdate]",
                            "storedProcedureParameters": {
                                "ModuleRunId": {
                                    "value": {
                                        "value": "@pipeline().RunId",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                },
                                "PipelineStatus": {
                                    "value": {
                                        "value": "Failed",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                },
                                "JobRunUrl": {
                                    "value": null,
                                    "type": "String"
                                },
                                "ErrorMessage": {
                                    "value": null,
                                    "type": "String"
                                }
                            }
                        },
                        "linkedServiceName": {
                            "referenceName": "LS_configurationDB",
                            "type": "LinkedServiceReference"
                        }
                    },
                    {
                        "name": "IfStopETL",
                        "type": "IfCondition",
                        "dependsOn": [
                            {
                                "activity": "IfWorkflowDefined",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "expression": {
                                "value": "@if(contains(json(variables('varPreTransformationNotebookOutput')), 'runOutput'),\n\tif(contains(json(variables('varPreTransformationNotebookOutput')).runOutput, 'stopETL'), \n\t\tjson(variables('varPreTransformationNotebookOutput')).runOutput['stopETL'], \n\t\t'false'\n\t),\n'false')",
                                "type": "Expression"
                            },
                            "ifFalseActivities": [
                                {
                                    "name": "Execute ProcessTransformation",
                                    "type": "ExecutePipeline",
                                    "dependsOn": [],
                                    "policy": {
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "pipeline": {
                                            "referenceName": "PL_TRN_04_ProcessLayer",
                                            "type": "PipelineReference"
                                        },
                                        "waitOnCompletion": true,
                                        "parameters": {
                                            "LayerItem": {
                                                "value": "@pipeline().parameters.LayerItem",
                                                "type": "Expression"
                                            },
                                            "EntRunId": {
                                                "value": "@pipeline().parameters.EntRunId",
                                                "type": "Expression"
                                            },
                                            "EntTriggerTime": {
                                                "value": "@pipeline().parameters.EntTriggerTime",
                                                "type": "Expression"
                                            },
                                            "FwkTriggerId": {
                                                "value": "@pipeline().parameters.FwkTriggerId",
                                                "type": "Expression"
                                            },
                                            "DtOrderItem": {
                                                "value": "@pipeline().parameters.DtOrderItem",
                                                "type": "Expression"
                                            },
                                            "ModuleRunId": {
                                                "value": "@pipeline().RunId",
                                                "type": "Expression"
                                            },
                                            "ADFTriggerName": {
                                                "value": "@pipeline().parameters.ADFTriggerName",
                                                "type": "Expression"
                                            }
                                        }
                                    }
                                },
                                {
                                    "name": "setOutputStopETLResult",
                                    "type": "SetVariable",
                                    "dependsOn": [
                                        {
                                            "activity": "Execute ProcessTransformation",
                                            "dependencyConditions": [
                                                "Completed"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "variableName": "pipelineReturnValue",
                                        "value": [
                                            {
                                                "key": "outputStopETL",
                                                "value": {
                                                    "type": "Expression",
                                                    "content": "@activity('Execute ProcessTransformation').output.pipelineReturnValue['outputStopETL']"
                                                }
                                            }
                                        ],
                                        "setSystemVariable": true
                                    }
                                }
                            ],
                            "ifTrueActivities": [
                                {
                                    "name": "sp_UpdatePreIngestionExecutionLog_stopped",
                                    "type": "SqlServerStoredProcedure",
                                    "dependsOn": [],
                                    "policy": {
                                        "timeout": "0.12:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "storedProcedureName": "[[dbo].[spu_FwkLogUpdate]",
                                        "storedProcedureParameters": {
                                            "ErrorMessage": {
                                                "value": null,
                                                "type": "String"
                                            },
                                            "JobRunUrl": {
                                                "value": null,
                                                "type": "String"
                                            },
                                            "ModuleRunId": {
                                                "value": {
                                                    "value": "@pipeline().RunId",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            },
                                            "PipelineStatus": {
                                                "value": {
                                                    "value": "Stopped - Request from PreTransformationNotebook",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            }
                                        }
                                    },
                                    "linkedServiceName": {
                                        "referenceName": "LS_configurationDB",
                                        "type": "LinkedServiceReference"
                                    }
                                },
                                {
                                    "name": "setOutputStopETLTrue",
                                    "type": "SetVariable",
                                    "dependsOn": [
                                        {
                                            "activity": "sp_UpdatePreIngestionExecutionLog_stopped",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "variableName": "pipelineReturnValue",
                                        "value": [
                                            {
                                                "key": "outputStopETL",
                                                "value": {
                                                    "type": "Boolean",
                                                    "content": true
                                                }
                                            }
                                        ],
                                        "setSystemVariable": true
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "name": "IfWorkflowDefined",
                        "type": "IfCondition",
                        "dependsOn": [
                            {
                                "activity": "If PreTransformationNotebookRun",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "expression": {
                                "value": "@if(contains(json(variables('varPreTransformationNotebookOutput')), 'runOutput'),\n\tif(contains(json(variables('varPreTransformationNotebookOutput')).runOutput, 'workflow'),\n\t\tcontains(string(json(variables('varPreTransformationNotebookOutput')).runOutput), 'WorkflowId'),\n\t\t'false'\n\t),\n'false')",
                                "type": "Expression"
                            },
                            "ifTrueActivities": [
                                {
                                    "name": "Execute PL_TriggerWorkflow",
                                    "type": "ExecutePipeline",
                                    "dependsOn": [],
                                    "policy": {
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "pipeline": {
                                            "referenceName": "PL_TriggerWorkflow",
                                            "type": "PipelineReference"
                                        },
                                        "waitOnCompletion": true,
                                        "parameters": {
                                            "Workflow": {
                                                "value": "@json(variables('varPreTransformationNotebookOutput')).runOutput['workflow']",
                                                "type": "Expression"
                                            },
                                            "EntRunId": {
                                                "value": "@pipeline().parameters.EntRunId",
                                                "type": "Expression"
                                            },
                                            "Module": {
                                                "value": "@concat('Transformation > ',\n    pipeline().parameters.LayerItem['FwkLayerId'], ' Layer'\n)",
                                                "type": "Expression"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "name": "sp_UpdateWorkflowExecutionLog_failed",
                        "description": "Executes the SP spu_FwkLogUpdate to update the record created by the ‘InsertIntoFwkLog’ activity in the table ‘FwkLog’ by updating the columns ‘PipelineStatus’ to ‘Success’.",
                        "type": "SqlServerStoredProcedure",
                        "dependsOn": [
                            {
                                "activity": "IfWorkflowDefined",
                                "dependencyConditions": [
                                    "Failed"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "storedProcedureName": "[[dbo].[spu_FwkLogUpdate]",
                            "storedProcedureParameters": {
                                "ModuleRunId": {
                                    "value": {
                                        "value": "@pipeline().RunId",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                },
                                "PipelineStatus": {
                                    "value": {
                                        "value": "Failed",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                },
                                "JobRunUrl": {
                                    "value": null,
                                    "type": "String"
                                },
                                "ErrorMessage": {
                                    "value": null,
                                    "type": "String"
                                }
                            }
                        },
                        "linkedServiceName": {
                            "referenceName": "LS_configurationDB",
                            "type": "LinkedServiceReference"
                        }
                    },
                    {
                        "name": "setOutputStopOnFailure",
                        "type": "SetVariable",
                        "dependsOn": [
                            {
                                "activity": "sp_UpdatePreTransformationExecutionLog_failed",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "variableName": "pipelineReturnValue",
                            "value": [
                                {
                                    "key": "outputStopETL",
                                    "value": {
                                        "type": "Boolean",
                                        "content": true
                                    }
                                }
                            ],
                            "setSystemVariable": true
                        }
                    },
                    {
                        "name": "setOutputStopOnFailureWorkflowFailure",
                        "type": "SetVariable",
                        "dependsOn": [
                            {
                                "activity": "sp_UpdateWorkflowExecutionLog_failed",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "variableName": "pipelineReturnValue",
                            "value": [
                                {
                                    "key": "outputStopETL",
                                    "value": {
                                        "type": "Boolean",
                                        "content": true
                                    }
                                }
                            ],
                            "setSystemVariable": true
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {}
                },
                "parameters": {
                    "LayerItem": {
                        "type": "array"
                    },
                    "EntRunId": {
                        "type": "string"
                    },
                    "EntTriggerTime": {
                        "type": "string"
                    },
                    "FwkTriggerId": {
                        "type": "string"
                    },
                    "DtOrderItem": {
                        "type": "array"
                    },
                    "ADFTriggerName": {
                        "type": "string"
                    }
                },
                "variables": {
                    "varPreTransformationNotebookOutput": {
                        "type": "String",
                        "defaultValue": "{}"
                    }
                },
                "folder": {
                    "name": "02 Transformation Module"
                },
                "annotations": [],
                "lastPublishTime": "2023-07-06T08:29:15Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/LS_configurationDB')]",
                "[concat(variables('factoryId'), '/linkedServices/LS_databricks')]",
                "[concat(variables('factoryId'), '/pipelines/PL_TRN_04_ProcessLayer')]",
                "[concat(variables('factoryId'), '/pipelines/PL_TriggerWorkflow')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/PL_TRN_04_ProcessLayer')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "LookupDtBatch",
                        "description": "Executes the SP ‘sps_LookupDtBatch’ to get the information about batches for the layer and their order.",
                        "type": "Lookup",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "0.12:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "AzureSqlSource",
                                "sqlReaderStoredProcedureName": "[[dbo].[sps_LookupDtBatch]",
                                "storedProcedureParameters": {
                                    "FwkLayerId": {
                                        "type": "String",
                                        "value": {
                                            "value": "@pipeline().parameters.LayerItem['FwkLayerId']",
                                            "type": "Expression"
                                        }
                                    },
                                    "FwkTriggerId": {
                                        "type": "String",
                                        "value": {
                                            "value": "@pipeline().parameters.FwkTriggerId",
                                            "type": "Expression"
                                        }
                                    }
                                },
                                "queryTimeout": "02:00:00",
                                "partitionOption": "None"
                            },
                            "dataset": {
                                "referenceName": "DS_SQL_Configuration",
                                "type": "DatasetReference",
                                "parameters": {}
                            },
                            "firstRowOnly": false
                        }
                    },
                    {
                        "name": "ForEachBatch",
                        "type": "ForEach",
                        "dependsOn": [
                            {
                                "activity": "LookupDtBatch",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "items": {
                                "value": "@array(activity('LookupDtBatch').output.value)",
                                "type": "Expression"
                            },
                            "isSequential": true,
                            "activities": [
                                {
                                    "name": "IfLayerIsStopped",
                                    "type": "IfCondition",
                                    "dependsOn": [],
                                    "userProperties": [],
                                    "typeProperties": {
                                        "expression": {
                                            "value": "@variables('varStopETLforBatch')",
                                            "type": "Expression"
                                        },
                                        "ifFalseActivities": [
                                            {
                                                "name": "setVarStopETLforBatch",
                                                "type": "SetVariable",
                                                "dependsOn": [
                                                    {
                                                        "activity": "Execute PL_TRN_05_ProcessBatch",
                                                        "dependencyConditions": [
                                                            "Succeeded"
                                                        ]
                                                    }
                                                ],
                                                "policy": {
                                                    "secureOutput": false,
                                                    "secureInput": false
                                                },
                                                "userProperties": [],
                                                "typeProperties": {
                                                    "variableName": "varStopETLforBatch",
                                                    "value": {
                                                        "value": "@activity('Execute PL_TRN_05_ProcessBatch').output.pipelineReturnValue['outputStopETL']",
                                                        "type": "Expression"
                                                    }
                                                }
                                            },
                                            {
                                                "name": "setOutputBatchStopOnFailureResult",
                                                "type": "SetVariable",
                                                "dependsOn": [
                                                    {
                                                        "activity": "Execute PL_TRN_05_ProcessBatch",
                                                        "dependencyConditions": [
                                                            "Failed"
                                                        ]
                                                    }
                                                ],
                                                "policy": {
                                                    "secureOutput": false,
                                                    "secureInput": false
                                                },
                                                "userProperties": [],
                                                "typeProperties": {
                                                    "variableName": "varStopETLforBatch",
                                                    "value": {
                                                        "value": "@activity('Execute PL_TRN_05_ProcessBatch').output.pipelineReturnValue['outputStopETL']",
                                                        "type": "Expression"
                                                    }
                                                }
                                            },
                                            {
                                                "name": "Execute PL_TRN_05_ProcessBatch",
                                                "type": "ExecutePipeline",
                                                "dependsOn": [],
                                                "policy": {
                                                    "secureInput": false
                                                },
                                                "userProperties": [],
                                                "typeProperties": {
                                                    "pipeline": {
                                                        "referenceName": "PL_TRN_05_ProcessBatch",
                                                        "type": "PipelineReference"
                                                    },
                                                    "waitOnCompletion": true,
                                                    "parameters": {
                                                        "BatchItem": {
                                                            "value": "@item()",
                                                            "type": "Expression"
                                                        },
                                                        "LayerItem": {
                                                            "value": "@pipeline().parameters.LayerItem",
                                                            "type": "Expression"
                                                        },
                                                        "EntRunId": {
                                                            "value": "@pipeline().parameters.EntRunId",
                                                            "type": "Expression"
                                                        },
                                                        "EntTriggerTime": {
                                                            "value": "@pipeline().parameters.EntTriggerTime",
                                                            "type": "Expression"
                                                        },
                                                        "DtOrderItem": {
                                                            "value": "@pipeline().parameters.DtOrderItem",
                                                            "type": "Expression"
                                                        },
                                                        "ADFTriggerName": {
                                                            "value": "@pipeline().parameters.ADFTriggerName",
                                                            "type": "Expression"
                                                        }
                                                    }
                                                }
                                            }
                                        ]
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "name": "If PostTransformationNotebookRun",
                        "type": "IfCondition",
                        "dependsOn": [
                            {
                                "activity": "ForEachBatch",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "expression": {
                                "value": "@not(equals(pipeline().parameters.LayerItem['PostTransformationNotebookRun'], null))",
                                "type": "Expression"
                            },
                            "ifTrueActivities": [
                                {
                                    "name": "sp_FwkLogInsertPostTransformation",
                                    "description": "Executes the SP spi_FwkLogInsert to insert record into FwkLog table with the execution module information by pipeline id and with null status.",
                                    "type": "SqlServerStoredProcedure",
                                    "dependsOn": [],
                                    "policy": {
                                        "timeout": "0.12:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "storedProcedureName": "[[dbo].[spi_FwkLogInsert]",
                                        "storedProcedureParameters": {
                                            "EntRunId": {
                                                "value": {
                                                    "value": "@pipeline().parameters.EntRunId",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            },
                                            "Module": {
                                                "value": {
                                                    "value": "@concat('Transformation > ',\n    pipeline().parameters.LayerItem['FwkLayerId'],\n    ' Layer > PostTransformationNotebook'\n)",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            },
                                            "ModuleRunId": {
                                                "value": {
                                                    "value": "@concat(pipeline().RunId, '-post')",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            },
                                            "StartDate": {
                                                "value": {
                                                    "value": "@formatdatetime(pipeline().TriggerTime)",
                                                    "type": "Expression"
                                                },
                                                "type": "DateTime"
                                            },
                                            "ADFTriggerName": {
                                                "value": {
                                                    "value": "@pipeline().parameters.ADFTriggerName",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            }
                                        }
                                    },
                                    "linkedServiceName": {
                                        "referenceName": "LS_configurationDB",
                                        "type": "LinkedServiceReference"
                                    }
                                },
                                {
                                    "name": "DT_RunPostTransformationNotebook",
                                    "type": "DatabricksNotebook",
                                    "dependsOn": [
                                        {
                                            "activity": "sp_FwkLogInsertPostTransformation",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "timeout": "0.12:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "notebookPath": {
                                            "value": "@concat('/Code/compartment/', pipeline().parameters.LayerItem['PostTransformationNotebookRun'])",
                                            "type": "Expression"
                                        },
                                        "baseParameters": {
                                            "FwkTriggerId": {
                                                "value": "@pipeline().parameters.FwkTriggerId",
                                                "type": "Expression"
                                            },
                                            "ADFTriggerName": {
                                                "value": "@pipeline().parameters.ADFTriggerName",
                                                "type": "Expression"
                                            }
                                        }
                                    },
                                    "linkedServiceName": {
                                        "referenceName": "LS_databricks",
                                        "type": "LinkedServiceReference",
                                        "parameters": {
                                            "ClusterId": {
                                                "value": "@pipeline().parameters.LayerItem['ClusterId']",
                                                "type": "Expression"
                                            }
                                        }
                                    }
                                },
                                {
                                    "name": "sp_UpdatePostTrasnformationLog_succeeded",
                                    "description": "Executes the SP spu_FwkLogUpdate to update the record created by the ‘InsertIntoFwkLog’ activity in the table ‘FwkLog’ by updating the columns ‘PipelineStatus’ to ‘Success’.",
                                    "type": "SqlServerStoredProcedure",
                                    "dependsOn": [
                                        {
                                            "activity": "DT_RunPostTransformationNotebook",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "timeout": "0.12:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "storedProcedureName": "[[dbo].[spu_FwkLogUpdate]",
                                        "storedProcedureParameters": {
                                            "JobRunUrl": {
                                                "value": {
                                                    "value": "@activity('DT_RunPostTransformationNotebook').output.runPageUrl",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            },
                                            "ModuleRunId": {
                                                "value": {
                                                    "value": "@concat(pipeline().RunId, '-post')",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            },
                                            "PipelineStatus": {
                                                "value": {
                                                    "value": "Succeeded",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            }
                                        }
                                    },
                                    "linkedServiceName": {
                                        "referenceName": "LS_configurationDB",
                                        "type": "LinkedServiceReference"
                                    }
                                },
                                {
                                    "name": "sp_UpdatePostTrasnformationLog_failed",
                                    "description": "",
                                    "type": "SqlServerStoredProcedure",
                                    "dependsOn": [
                                        {
                                            "activity": "DT_RunPostTransformationNotebook",
                                            "dependencyConditions": [
                                                "Failed"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "timeout": "0.12:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "storedProcedureName": "[[dbo].[spu_FwkLogUpdate]",
                                        "storedProcedureParameters": {
                                            "JobRunUrl": {
                                                "value": {
                                                    "value": "@activity('DT_RunPostTransformationNotebook').output.runPageUrl",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            },
                                            "ModuleRunId": {
                                                "value": {
                                                    "value": "@concat(pipeline().RunId, '-post')",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            },
                                            "PipelineStatus": {
                                                "value": {
                                                    "value": "Failed",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            }
                                        }
                                    },
                                    "linkedServiceName": {
                                        "referenceName": "LS_configurationDB",
                                        "type": "LinkedServiceReference"
                                    }
                                },
                                {
                                    "name": "setPostTransformationNotebookOutput",
                                    "type": "SetVariable",
                                    "dependsOn": [
                                        {
                                            "activity": "sp_UpdatePostTrasnformationLog_succeeded",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "variableName": "varPostTransformationNotebookOutput",
                                        "value": {
                                            "value": "@string(activity('DT_RunPostTransformationNotebook').output)",
                                            "type": "Expression"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "name": "sp_UpdateForEachLog_failed",
                        "type": "SqlServerStoredProcedure",
                        "dependsOn": [
                            {
                                "activity": "setOutputStopOnFailureResult",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "0.12:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "storedProcedureName": "[[dbo].[spu_FwkLogUpdate]",
                            "storedProcedureParameters": {
                                "ErrorMessage": {
                                    "value": null,
                                    "type": "String"
                                },
                                "JobRunUrl": {
                                    "value": null,
                                    "type": "String"
                                },
                                "ModuleRunId": {
                                    "value": {
                                        "value": "@pipeline().parameters.ModuleRunId",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                },
                                "PipelineStatus": {
                                    "value": {
                                        "value": "Failed",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                }
                            }
                        },
                        "linkedServiceName": {
                            "referenceName": "LS_configurationDB",
                            "type": "LinkedServiceReference"
                        }
                    },
                    {
                        "name": "sp_UpdatePostTransformationExecutionLog_failed",
                        "type": "SqlServerStoredProcedure",
                        "dependsOn": [
                            {
                                "activity": "If PostTransformationNotebookRun",
                                "dependencyConditions": [
                                    "Failed"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "0.12:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "storedProcedureName": "[[dbo].[spu_FwkLogUpdate]",
                            "storedProcedureParameters": {
                                "ErrorMessage": {
                                    "value": null,
                                    "type": "String"
                                },
                                "JobRunUrl": {
                                    "value": null,
                                    "type": "String"
                                },
                                "ModuleRunId": {
                                    "value": {
                                        "value": "@pipeline().parameters.ModuleRunId",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                },
                                "PipelineStatus": {
                                    "value": {
                                        "value": "Failed",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                }
                            }
                        },
                        "linkedServiceName": {
                            "referenceName": "LS_configurationDB",
                            "type": "LinkedServiceReference"
                        }
                    },
                    {
                        "name": "IfStopETL",
                        "type": "IfCondition",
                        "dependsOn": [
                            {
                                "activity": "IfWorkflowDefined",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "expression": {
                                "value": "@if(contains(json(variables('varPostTransformationNotebookOutput')), 'runOutput'),\n\tif(contains(json(variables('varPostTransformationNotebookOutput')).runOutput, 'stopETL'), \n\t\tjson(variables('varPostTransformationNotebookOutput')).runOutput['stopETL'], \n\t\t'false'\n\t),\n'false')",
                                "type": "Expression"
                            },
                            "ifFalseActivities": [
                                {
                                    "name": "sp_UpdateExecutionLog_succeeded",
                                    "type": "SqlServerStoredProcedure",
                                    "dependsOn": [],
                                    "policy": {
                                        "timeout": "0.12:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "storedProcedureName": "[[dbo].[spu_FwkLogUpdate]",
                                        "storedProcedureParameters": {
                                            "ErrorMessage": {
                                                "value": null,
                                                "type": "String"
                                            },
                                            "JobRunUrl": {
                                                "value": null,
                                                "type": "String"
                                            },
                                            "ModuleRunId": {
                                                "value": {
                                                    "value": "@pipeline().parameters.ModuleRunId",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            },
                                            "PipelineStatus": {
                                                "value": {
                                                    "value": "@if(greater(activity('LookupDtBatch').output.count, 0), 'Succeeded', 'Skipped')",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            }
                                        }
                                    },
                                    "linkedServiceName": {
                                        "referenceName": "LS_configurationDB",
                                        "type": "LinkedServiceReference"
                                    }
                                },
                                {
                                    "name": "setOutputStopETLFalse",
                                    "type": "SetVariable",
                                    "dependsOn": [
                                        {
                                            "activity": "sp_UpdateExecutionLog_succeeded",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "variableName": "pipelineReturnValue",
                                        "value": [
                                            {
                                                "key": "outputStopETL",
                                                "value": {
                                                    "type": "Boolean",
                                                    "content": false
                                                }
                                            }
                                        ],
                                        "setSystemVariable": true
                                    }
                                }
                            ],
                            "ifTrueActivities": [
                                {
                                    "name": "sp_UpdateExecutionLog_Stopped",
                                    "type": "SqlServerStoredProcedure",
                                    "dependsOn": [],
                                    "policy": {
                                        "timeout": "0.12:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "storedProcedureName": "[[dbo].[spu_FwkLogUpdate]",
                                        "storedProcedureParameters": {
                                            "ErrorMessage": {
                                                "value": null,
                                                "type": "String"
                                            },
                                            "JobRunUrl": {
                                                "value": null,
                                                "type": "String"
                                            },
                                            "ModuleRunId": {
                                                "value": {
                                                    "value": "@pipeline().parameters.ModuleRunId",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            },
                                            "PipelineStatus": {
                                                "value": {
                                                    "value": "Stopped - Request from PostTransformationNotebook",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            }
                                        }
                                    },
                                    "linkedServiceName": {
                                        "referenceName": "LS_configurationDB",
                                        "type": "LinkedServiceReference"
                                    }
                                },
                                {
                                    "name": "setOutputStopETLTrue",
                                    "type": "SetVariable",
                                    "dependsOn": [
                                        {
                                            "activity": "sp_UpdateExecutionLog_Stopped",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "variableName": "pipelineReturnValue",
                                        "value": [
                                            {
                                                "key": "outputStopETL",
                                                "value": {
                                                    "type": "Boolean",
                                                    "content": true
                                                }
                                            }
                                        ],
                                        "setSystemVariable": true
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "name": "IfWorkflowDefined",
                        "type": "IfCondition",
                        "dependsOn": [
                            {
                                "activity": "If PostTransformationNotebookRun",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "expression": {
                                "value": "@if(contains(json(variables('varPostTransformationNotebookOutput')), 'runOutput'),\n\tif(contains(json(variables('varPostTransformationNotebookOutput')).runOutput, 'workflow'),\n\t\tcontains(string(json(variables('varPostTransformationNotebookOutput')).runOutput), 'WorkflowId'),\n\t\t'false'\n\t),\n'false')",
                                "type": "Expression"
                            },
                            "ifTrueActivities": [
                                {
                                    "name": "Execute PL_TriggerWorkflow",
                                    "type": "ExecutePipeline",
                                    "dependsOn": [],
                                    "policy": {
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "pipeline": {
                                            "referenceName": "PL_TriggerWorkflow",
                                            "type": "PipelineReference"
                                        },
                                        "waitOnCompletion": true,
                                        "parameters": {
                                            "Workflow": {
                                                "value": "@json(variables('varPostTransformationNotebookOutput')).runOutput['workflow']",
                                                "type": "Expression"
                                            },
                                            "EntRunId": {
                                                "value": "@pipeline().parameters.EntRunId",
                                                "type": "Expression"
                                            },
                                            "Module": {
                                                "value": "@concat('Transformation > ',\n    pipeline().parameters.LayerItem['FwkLayerId'], ' Layer'\n)",
                                                "type": "Expression"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "name": "sp_UpdateWorkflowExecutionExecutionLog_failed",
                        "type": "SqlServerStoredProcedure",
                        "dependsOn": [
                            {
                                "activity": "IfWorkflowDefined",
                                "dependencyConditions": [
                                    "Failed"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "0.12:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "storedProcedureName": "[[dbo].[spu_FwkLogUpdate]",
                            "storedProcedureParameters": {
                                "ErrorMessage": {
                                    "value": null,
                                    "type": "String"
                                },
                                "JobRunUrl": {
                                    "value": null,
                                    "type": "String"
                                },
                                "ModuleRunId": {
                                    "value": {
                                        "value": "@pipeline().parameters.ModuleRunId",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                },
                                "PipelineStatus": {
                                    "value": {
                                        "value": "Failed",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                }
                            }
                        },
                        "linkedServiceName": {
                            "referenceName": "LS_configurationDB",
                            "type": "LinkedServiceReference"
                        }
                    },
                    {
                        "name": "setOutputStopOnFailure",
                        "type": "SetVariable",
                        "dependsOn": [
                            {
                                "activity": "sp_UpdatePostTransformationExecutionLog_failed",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "variableName": "pipelineReturnValue",
                            "value": [
                                {
                                    "key": "outputStopETL",
                                    "value": {
                                        "type": "Boolean",
                                        "content": true
                                    }
                                }
                            ],
                            "setSystemVariable": true
                        }
                    },
                    {
                        "name": "setOutputStopOnFailureResult",
                        "type": "SetVariable",
                        "dependsOn": [
                            {
                                "activity": "ForEachBatch",
                                "dependencyConditions": [
                                    "Failed"
                                ]
                            }
                        ],
                        "policy": {
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "variableName": "pipelineReturnValue",
                            "value": [
                                {
                                    "key": "outputStopETL",
                                    "value": {
                                        "type": "Expression",
                                        "content": "@or(\n    if(\n    equals(\n        toUpper(string(pipeline().parameters.LayerItem['StopIfFailure'])),\n         'TRUE'\n    ), \n    true,\n    false\n    ),\nvariables('varStopETLforBatch')\n)"
                                    }
                                }
                            ],
                            "setSystemVariable": true
                        }
                    },
                    {
                        "name": "setOutputStopOnFailureWorkflowFailure",
                        "type": "SetVariable",
                        "dependsOn": [
                            {
                                "activity": "sp_UpdateWorkflowExecutionExecutionLog_failed",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "variableName": "pipelineReturnValue",
                            "value": [
                                {
                                    "key": "outputStopETL",
                                    "value": {
                                        "type": "Boolean",
                                        "content": true
                                    }
                                }
                            ],
                            "setSystemVariable": true
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {}
                },
                "parameters": {
                    "LayerItem": {
                        "type": "array"
                    },
                    "EntRunId": {
                        "type": "string"
                    },
                    "EntTriggerTime": {
                        "type": "string"
                    },
                    "FwkTriggerId": {
                        "type": "string"
                    },
                    "DtOrderItem": {
                        "type": "array"
                    },
                    "ModuleRunId": {
                        "type": "string"
                    },
                    "ADFTriggerName": {
                        "type": "string"
                    }
                },
                "variables": {
                    "varPostTransformationNotebookOutput": {
                        "type": "String",
                        "defaultValue": "{}"
                    },
                    "varStopETLforBatch": {
                        "type": "Boolean",
                        "defaultValue": false
                    }
                },
                "folder": {
                    "name": "02 Transformation Module"
                },
                "annotations": []
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/datasets/DS_SQL_Configuration')]",
                "[concat(variables('factoryId'), '/linkedServices/LS_configurationDB')]",
                "[concat(variables('factoryId'), '/linkedServices/LS_databricks')]",
                "[concat(variables('factoryId'), '/pipelines/PL_TriggerWorkflow')]",
                "[concat(variables('factoryId'), '/pipelines/PL_TRN_05_ProcessBatch')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/PL_TRN_05_ProcessBatch')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "sp_FwkLogInsert",
                        "description": "Executes the SP spi_FwkLogInsert to insert record into FwkLog table with the execution module information by pipeline id and with null status.",
                        "type": "SqlServerStoredProcedure",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "storedProcedureName": "[[dbo].[spi_FwkLogInsert]",
                            "storedProcedureParameters": {
                                "EntRunId": {
                                    "value": {
                                        "value": "@pipeline().parameters.EntRunId",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                },
                                "Module": {
                                    "value": {
                                        "value": "@concat('Transformation > ',\n    pipeline().parameters.LayerItem['FwkLayerId'],' Layer > Batch ', pipeline().parameters.BatchItem['BatchNumber']\n)",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                },
                                "ModuleRunId": {
                                    "value": {
                                        "value": "@pipeline().RunId",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                },
                                "StartDate": {
                                    "value": {
                                        "value": "@formatdatetime(pipeline().TriggerTime)",
                                        "type": "Expression"
                                    },
                                    "type": "DateTime"
                                },
                                "ADFTriggerName": {
                                    "value": {
                                        "value": "@pipeline().parameters.ADFTriggerName",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                }
                            }
                        },
                        "linkedServiceName": {
                            "referenceName": "LS_configurationDB",
                            "type": "LinkedServiceReference"
                        }
                    },
                    {
                        "name": "sp_UpdateExecutionLog_succeeded",
                        "description": "Executes the SP spu_FwkLogUpdate to update the record created by the ‘InsertIntoFwkLog’ activity in the table ‘FwkLog’ by updating the columns ‘PipelineStatus’ to ‘Success’.",
                        "type": "SqlServerStoredProcedure",
                        "dependsOn": [
                            {
                                "activity": "ForEachTransformation",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "storedProcedureName": "[[dbo].[spu_FwkLogUpdate]",
                            "storedProcedureParameters": {
                                "ModuleRunId": {
                                    "value": {
                                        "value": "@pipeline().RunId",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                },
                                "PipelineStatus": {
                                    "value": {
                                        "value": "Succeeded",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                },
                                "JobRunUrl": {
                                    "value": null,
                                    "type": "String"
                                },
                                "ErrorMessage": {
                                    "value": null,
                                    "type": "String"
                                }
                            }
                        },
                        "linkedServiceName": {
                            "referenceName": "LS_configurationDB",
                            "type": "LinkedServiceReference"
                        }
                    },
                    {
                        "name": "sp_UpdateExecutionLog_failed",
                        "description": "Executes the SP spu_FwkLogUpdate to update the record created by the ‘InsertIntoFwkLog’ activity in the table ‘FwkLog’ by updating the columns ‘PipelineStatus’ to ‘Success’.",
                        "type": "SqlServerStoredProcedure",
                        "dependsOn": [
                            {
                                "activity": "ForEachTransformation",
                                "dependencyConditions": [
                                    "Failed"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "storedProcedureName": "[[dbo].[spu_FwkLogUpdate]",
                            "storedProcedureParameters": {
                                "ModuleRunId": {
                                    "value": {
                                        "value": "@pipeline().RunId",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                },
                                "PipelineStatus": {
                                    "value": {
                                        "value": "Failed",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                },
                                "JobRunUrl": {
                                    "value": null,
                                    "type": "String"
                                },
                                "ErrorMessage": {
                                    "value": null,
                                    "type": "String"
                                }
                            }
                        },
                        "linkedServiceName": {
                            "referenceName": "LS_configurationDB",
                            "type": "LinkedServiceReference"
                        }
                    },
                    {
                        "name": "LookupDtOutput",
                        "type": "Lookup",
                        "dependsOn": [
                            {
                                "activity": "sp_FwkLogInsert",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "AzureSqlSource",
                                "sqlReaderStoredProcedureName": "[[dbo].[sps_LookupDtOutput]",
                                "storedProcedureParameters": {
                                    "FwkTriggerId": {
                                        "type": "String",
                                        "value": {
                                            "value": "@pipeline().parameters.BatchItem['FwkTriggerId']",
                                            "type": "Expression"
                                        }
                                    },
                                    "FwkLayerId": {
                                        "type": "String",
                                        "value": {
                                            "value": "@pipeline().parameters.LayerItem['FwkLayerId']",
                                            "type": "Expression"
                                        }
                                    },
                                    "BatchNumber": {
                                        "type": "Int16",
                                        "value": {
                                            "value": "@pipeline().parameters.BatchItem['BatchNumber']",
                                            "type": "Expression"
                                        }
                                    }
                                },
                                "queryTimeout": "02:00:00",
                                "partitionOption": "None"
                            },
                            "dataset": {
                                "referenceName": "DS_SQL_Configuration",
                                "type": "DatasetReference",
                                "parameters": {}
                            },
                            "firstRowOnly": false
                        }
                    },
                    {
                        "name": "ForEachTransformation",
                        "type": "ForEach",
                        "dependsOn": [
                            {
                                "activity": "LookupDtOutput",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "items": {
                                "value": "@array(activity('LookupDtOutput').output.value)",
                                "type": "Expression"
                            },
                            "isSequential": false,
                            "batchCount": 30,
                            "activities": [
                                {
                                    "name": "spu_DtLogUpdate_succeeded",
                                    "description": "Executes the SP spu_DtLogUpdate to update record into DtLog table with the execution module information.",
                                    "type": "SqlServerStoredProcedure",
                                    "dependsOn": [
                                        {
                                            "activity": "DT_RunTransformationNotebook",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "storedProcedureName": "[[dbo].[spu_DtLogUpdate]",
                                        "storedProcedureParameters": {
                                            "DtOutputId": {
                                                "value": {
                                                    "value": "@item().DtOutputId",
                                                    "type": "Expression"
                                                },
                                                "type": "Int32"
                                            },
                                            "EntRunId": {
                                                "value": {
                                                    "value": "@pipeline().parameters.EntRunId",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            },
                                            "ModuleRunId": {
                                                "value": {
                                                    "value": "@pipeline().RunId",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            },
                                            "PipelineStatus": {
                                                "value": {
                                                    "value": "Succeeded",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            },
                                            "Duration": {
                                                "value": {
                                                    "value": "@activity('DT_RunTransformationNotebook').output.runOutput['duration']",
                                                    "type": "Expression"
                                                },
                                                "type": "Int32"
                                            },
                                            "JobRunUrl": {
                                                "value": {
                                                    "value": "@activity('DT_RunTransformationNotebook').output.runPageUrl",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            },
                                            "RecordsInserted": {
                                                "value": {
                                                    "value": "@activity('DT_RunTransformationNotebook').output.runOutput['recordsInserted']",
                                                    "type": "Expression"
                                                },
                                                "type": "Int64"
                                            },
                                            "RecordsUpdated": {
                                                "value": {
                                                    "value": "@activity('DT_RunTransformationNotebook').output.runOutput['recordsUpdated']",
                                                    "type": "Expression"
                                                },
                                                "type": "Int64"
                                            },
                                            "RecordsDeleted": {
                                                "value": {
                                                    "value": "@activity('DT_RunTransformationNotebook').output.runOutput['recordsDeleted']",
                                                    "type": "Expression"
                                                },
                                                "type": "Int64"
                                            }
                                        }
                                    },
                                    "linkedServiceName": {
                                        "referenceName": "LS_configurationDB",
                                        "type": "LinkedServiceReference"
                                    }
                                },
                                {
                                    "name": "spu_DtLogUpdate_failed",
                                    "description": "Executes the SP spu_DtLogUpdate to update record into DtLog table with the execution module information.",
                                    "type": "SqlServerStoredProcedure",
                                    "dependsOn": [
                                        {
                                            "activity": "DT_RunTransformationNotebook",
                                            "dependencyConditions": [
                                                "Failed"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "storedProcedureName": "[[dbo].[spu_DtLogUpdate]",
                                        "storedProcedureParameters": {
                                            "DtOutputId": {
                                                "value": {
                                                    "value": "@item().DtOutputId",
                                                    "type": "Expression"
                                                },
                                                "type": "Int32"
                                            },
                                            "EntRunId": {
                                                "value": {
                                                    "value": "@pipeline().parameters.EntRunId",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            },
                                            "ModuleRunId": {
                                                "value": {
                                                    "value": "@pipeline().RunId",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            },
                                            "PipelineStatus": {
                                                "value": {
                                                    "value": "Failed",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            },
                                            "Duration": {
                                                "value": null,
                                                "type": "Int32"
                                            },
                                            "JobRunUrl": {
                                                "value": {
                                                    "value": "@activity('DT_RunTransformationNotebook').output.runPageUrl",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            },
                                            "RecordsInserted": {
                                                "value": null,
                                                "type": "Int64"
                                            },
                                            "RecordsUpdated": {
                                                "value": null,
                                                "type": "Int64"
                                            },
                                            "RecordsDeleted": {
                                                "value": null,
                                                "type": "Int64"
                                            }
                                        }
                                    },
                                    "linkedServiceName": {
                                        "referenceName": "LS_configurationDB",
                                        "type": "LinkedServiceReference"
                                    }
                                },
                                {
                                    "name": "DT_RunTransformationNotebook",
                                    "type": "DatabricksNotebook",
                                    "dependsOn": [
                                        {
                                            "activity": "spi_DtLogInsert",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "notebookPath": "/Code/mdmf/etl/transformation",
                                        "baseParameters": {
                                            "DataTransformationParameters": {
                                                "value": "@string(item())",
                                                "type": "Expression"
                                            },
                                            "EntTriggerTime": {
                                                "value": "@convertToUtc(pipeline().parameters.EntTriggerTime, 'UTC', 'yyyy-MM-ddTHH:mm:ss')",
                                                "type": "Expression"
                                            },
                                            "EntRunId": {
                                                "value": "@pipeline().parameters.EntRunId",
                                                "type": "Expression"
                                            }
                                        }
                                    },
                                    "linkedServiceName": {
                                        "referenceName": "LS_databricks",
                                        "type": "LinkedServiceReference",
                                        "parameters": {
                                            "ClusterId": {
                                                "value": "@pipeline().parameters.LayerItem['ClusterId']",
                                                "type": "Expression"
                                            }
                                        }
                                    }
                                },
                                {
                                    "name": "spi_DtLogInsert",
                                    "description": "Executes the SP spi_DtLogInsert to insert record into DtLog table with the execution module information.",
                                    "type": "SqlServerStoredProcedure",
                                    "dependsOn": [],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "storedProcedureName": "[[dbo].[spi_DtLogInsert]",
                                        "storedProcedureParameters": {
                                            "DtOutputId": {
                                                "value": {
                                                    "value": "@item().DtOutputId",
                                                    "type": "Expression"
                                                },
                                                "type": "Int32"
                                            },
                                            "EntRunId": {
                                                "value": {
                                                    "value": "@pipeline().parameters.EntRunId",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            },
                                            "ModuleRunId": {
                                                "value": {
                                                    "value": "@pipeline().RunId",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            },
                                            "PipelineStatus": {
                                                "value": {
                                                    "value": "InProgress",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            },
                                            "StartDate": {
                                                "value": {
                                                    "value": "@formatdatetime(pipeline().TriggerTime)",
                                                    "type": "Expression"
                                                },
                                                "type": "Datetime"
                                            },
                                            "Duration": {
                                                "value": null,
                                                "type": "Int32"
                                            },
                                            "JobRunUrl": {
                                                "value": null,
                                                "type": "String"
                                            }
                                        }
                                    },
                                    "linkedServiceName": {
                                        "referenceName": "LS_configurationDB",
                                        "type": "LinkedServiceReference"
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "name": "setOutputStopBatchOnFailure",
                        "type": "SetVariable",
                        "dependsOn": [
                            {
                                "activity": "sp_UpdateExecutionLog_failed",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "variableName": "pipelineReturnValue",
                            "value": [
                                {
                                    "key": "outputStopETL",
                                    "value": {
                                        "type": "Expression",
                                        "content": "@if(\n    equals(\n        toUpper(string(pipeline().parameters.LayerItem['StopBatchIfFailure'])),\n         'TRUE'\n    ), \n    true,\n    false\n)"
                                    }
                                }
                            ],
                            "setSystemVariable": true
                        }
                    },
                    {
                        "name": "setOutputStopBatch",
                        "type": "SetVariable",
                        "dependsOn": [
                            {
                                "activity": "sp_UpdateExecutionLog_succeeded",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "variableName": "pipelineReturnValue",
                            "value": [
                                {
                                    "key": "outputStopETL",
                                    "value": {
                                        "type": "Boolean",
                                        "content": false
                                    }
                                }
                            ],
                            "setSystemVariable": true
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {}
                },
                "parameters": {
                    "BatchItem": {
                        "type": "array"
                    },
                    "LayerItem": {
                        "type": "array"
                    },
                    "EntRunId": {
                        "type": "string"
                    },
                    "EntTriggerTime": {
                        "type": "string"
                    },
                    "DtOrderItem": {
                        "type": "array"
                    },
                    "ADFTriggerName": {
                        "type": "string"
                    }
                },
                "folder": {
                    "name": "02 Transformation Module"
                },
                "annotations": [],
                "lastPublishTime": "2023-07-06T08:29:13Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/LS_configurationDB')]",
                "[concat(variables('factoryId'), '/datasets/DS_SQL_Configuration')]",
                "[concat(variables('factoryId'), '/linkedServices/LS_databricks')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/PL_TriggerCreation')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Lookup FwkTrigger Table",
                        "description": "Executes the SP ‘sps_LookupFwkTrigger’ that returns the data to create/update the trigger by active flag from the table ‘FwkTrigger’.",
                        "type": "Lookup",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "AzureSqlSource",
                                "sqlReaderStoredProcedureName": "[[dbo].[sps_LookupFwkTrigger]",
                                "storedProcedureParameters": {
                                    "AzureRestApiUrl": {
                                        "type": "String",
                                        "value": {
                                            "value": "@pipeline().parameters.AzureRestApiUrl",
                                            "type": "Expression"
                                        }
                                    },
                                    "FactoryName": {
                                        "type": "String",
                                        "value": {
                                            "value": "@pipeline().DataFactory",
                                            "type": "Expression"
                                        }
                                    }
                                },
                                "queryTimeout": "02:00:00",
                                "partitionOption": "None"
                            },
                            "dataset": {
                                "referenceName": "DS_SQL_Configuration",
                                "type": "DatasetReference",
                                "parameters": {}
                            },
                            "firstRowOnly": false
                        }
                    },
                    {
                        "name": "ForEach ToBeProcessed Trigger in DBconfig table",
                        "type": "ForEach",
                        "dependsOn": [
                            {
                                "activity": "Collect ToBeProcessed DBconfig Triggers",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "items": {
                                "value": "@variables('ToBeProcessedTriggers')",
                                "type": "Expression"
                            },
                            "batchCount": 5,
                            "activities": [
                                {
                                    "name": "If Trigger exists in DBconfig table",
                                    "type": "IfCondition",
                                    "dependsOn": [],
                                    "userProperties": [],
                                    "typeProperties": {
                                        "expression": {
                                            "value": "@if(\n    contains(variables('ListAdfTriggers'), item().ADFTriggerName),\n    'True',\n    'False'\n    )",
                                            "type": "Expression"
                                        },
                                        "ifFalseActivities": [
                                            {
                                                "name": "Create Trigger",
                                                "description": "This will create/update the scheduled triggers in the targeted ADF with the settings returned by the ‘Lookup FwkTrigger Table’ activity.",
                                                "type": "WebActivity",
                                                "dependsOn": [],
                                                "policy": {
                                                    "timeout": "7.00:00:00",
                                                    "retry": 0,
                                                    "retryIntervalInSeconds": 30,
                                                    "secureOutput": false,
                                                    "secureInput": false
                                                },
                                                "userProperties": [],
                                                "typeProperties": {
                                                    "method": "PUT",
                                                    "headers": {},
                                                    "url": {
                                                        "value": "@item().TriggerCreateURL",
                                                        "type": "Expression"
                                                    },
                                                    "body": {
                                                        "value": "@json(item().TriggerProperties)",
                                                        "type": "Expression"
                                                    },
                                                    "authentication": {
                                                        "type": "MSI",
                                                        "resource": {
                                                            "value": "https://management.azure.com/",
                                                            "type": "Expression"
                                                        }
                                                    }
                                                }
                                            }
                                        ],
                                        "ifTrueActivities": [
                                            {
                                                "name": "Stop Trigger",
                                                "type": "WebActivity",
                                                "dependsOn": [],
                                                "policy": {
                                                    "timeout": "7.00:00:00",
                                                    "retry": 0,
                                                    "retryIntervalInSeconds": 30,
                                                    "secureOutput": false,
                                                    "secureInput": false
                                                },
                                                "userProperties": [],
                                                "typeProperties": {
                                                    "method": "POST",
                                                    "headers": {},
                                                    "url": {
                                                        "value": "@item().TriggerStopURL",
                                                        "type": "Expression"
                                                    },
                                                    "body": {
                                                        "value": "{}",
                                                        "type": "Expression"
                                                    },
                                                    "authentication": {
                                                        "type": "MSI",
                                                        "resource": {
                                                            "value": "https://management.azure.com/",
                                                            "type": "Expression"
                                                        }
                                                    }
                                                }
                                            },
                                            {
                                                "name": "Update Trigger",
                                                "description": "This will create/update the scheduled triggers in the targeted ADF with the settings returned by the ‘Lookup FwkTrigger Table’ activity.",
                                                "type": "WebActivity",
                                                "dependsOn": [
                                                    {
                                                        "activity": "Stop Trigger",
                                                        "dependencyConditions": [
                                                            "Succeeded"
                                                        ]
                                                    }
                                                ],
                                                "policy": {
                                                    "timeout": "7.00:00:00",
                                                    "retry": 0,
                                                    "retryIntervalInSeconds": 30,
                                                    "secureOutput": false,
                                                    "secureInput": false
                                                },
                                                "userProperties": [],
                                                "typeProperties": {
                                                    "method": "PUT",
                                                    "headers": {},
                                                    "url": {
                                                        "value": "@item().TriggerCreateURL",
                                                        "type": "Expression"
                                                    },
                                                    "body": {
                                                        "value": "@json(item().TriggerProperties)",
                                                        "type": "Expression"
                                                    },
                                                    "authentication": {
                                                        "type": "MSI",
                                                        "resource": {
                                                            "value": "https://management.azure.com/",
                                                            "type": "Expression"
                                                        }
                                                    }
                                                }
                                            }
                                        ]
                                    }
                                },
                                {
                                    "name": "Update FwkTrigger Table",
                                    "description": "Executes the ‘spu_FwkTriggerUpdate’ SP to update the ActiveFlag and LastUpdate columns in the ‘FwkTrigger’ table.",
                                    "type": "SqlServerStoredProcedure",
                                    "dependsOn": [
                                        {
                                            "activity": "If Triggers is marked as Started",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "storedProcedureName": "[[dbo].[spu_FwkTriggerUpdate]",
                                        "storedProcedureParameters": {
                                            "ADFTriggerName": {
                                                "value": {
                                                    "value": "@item().ADFTriggerName",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            }
                                        }
                                    },
                                    "linkedServiceName": {
                                        "referenceName": "LS_configurationDB",
                                        "type": "LinkedServiceReference"
                                    }
                                },
                                {
                                    "name": "If Triggers is marked as Started",
                                    "type": "IfCondition",
                                    "dependsOn": [
                                        {
                                            "activity": "If Trigger exists in DBconfig table",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "userProperties": [],
                                    "typeProperties": {
                                        "expression": {
                                            "value": "@if(equals(item().runtimeState, 'Started'),'True','False')",
                                            "type": "Expression"
                                        },
                                        "ifTrueActivities": [
                                            {
                                                "name": "Start Trigger",
                                                "description": "This will start the scheduled triggers in the targeted ADF",
                                                "type": "WebActivity",
                                                "dependsOn": [],
                                                "policy": {
                                                    "timeout": "7.00:00:00",
                                                    "retry": 0,
                                                    "retryIntervalInSeconds": 30,
                                                    "secureOutput": false,
                                                    "secureInput": false
                                                },
                                                "userProperties": [],
                                                "typeProperties": {
                                                    "method": "POST",
                                                    "headers": {},
                                                    "url": {
                                                        "value": "@item().TriggerEnabledURL",
                                                        "type": "Expression"
                                                    },
                                                    "body": {
                                                        "value": "{}",
                                                        "type": "Expression"
                                                    },
                                                    "authentication": {
                                                        "type": "MSI",
                                                        "resource": {
                                                            "value": "https://management.azure.com/",
                                                            "type": "Expression"
                                                        }
                                                    }
                                                }
                                            }
                                        ]
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "name": "List ADF Triggers by Name",
                        "type": "ForEach",
                        "dependsOn": [
                            {
                                "activity": "Collect ADF Triggers While Next Link Exists",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "items": {
                                "value": "@variables('ADFTriggers')",
                                "type": "Expression"
                            },
                            "isSequential": true,
                            "activities": [
                                {
                                    "name": "Append Trigger Name",
                                    "type": "AppendVariable",
                                    "dependsOn": [],
                                    "userProperties": [],
                                    "typeProperties": {
                                        "variableName": "ListAdfTriggers",
                                        "value": {
                                            "value": "@item().name\n",
                                            "type": "Expression"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "name": "ForEach Trigger in ADF",
                        "type": "ForEach",
                        "dependsOn": [
                            {
                                "activity": "List DBconfig Triggers by Name",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "items": {
                                "value": "@variables('ListAdfTriggers')",
                                "type": "Expression"
                            },
                            "isSequential": true,
                            "activities": [
                                {
                                    "name": "If Trigger is not in DBconfig table and is in ADF",
                                    "type": "IfCondition",
                                    "dependsOn": [],
                                    "userProperties": [],
                                    "typeProperties": {
                                        "expression": {
                                            "value": "@if(contains(variables('ListDBconfigTriggers'), item()), 'True', 'False')",
                                            "type": "Expression"
                                        },
                                        "ifFalseActivities": [
                                            {
                                                "name": "Stop not listed Trigger in ADF",
                                                "type": "WebActivity",
                                                "dependsOn": [],
                                                "policy": {
                                                    "timeout": "0.12:00:00",
                                                    "retry": 0,
                                                    "retryIntervalInSeconds": 30,
                                                    "secureOutput": false,
                                                    "secureInput": false
                                                },
                                                "userProperties": [],
                                                "typeProperties": {
                                                    "method": "POST",
                                                    "headers": {},
                                                    "url": {
                                                        "value": "@concat(\n    pipeline().parameters.AzureRestApiUrl,\n    '/providers/Microsoft.DataFactory/factories/'\n    ,pipeline().DataFactory,\n    '/triggers/',\n    item(),\n    '/stop?api-version=2018-06-01'\n    )",
                                                        "type": "Expression"
                                                    },
                                                    "body": {
                                                        "value": "{}",
                                                        "type": "Expression"
                                                    },
                                                    "authentication": {
                                                        "type": "MSI",
                                                        "resource": "https://management.azure.com/"
                                                    }
                                                }
                                            }
                                        ]
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "name": "List DBconfig Triggers by Name",
                        "type": "ForEach",
                        "dependsOn": [
                            {
                                "activity": "ForEach ToBeProcessed Trigger in DBconfig table",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "items": {
                                "value": "@activity('Lookup FwkTrigger Table').output.value",
                                "type": "Expression"
                            },
                            "activities": [
                                {
                                    "name": "Append DBconfig ADFTriggerName",
                                    "type": "AppendVariable",
                                    "dependsOn": [],
                                    "userProperties": [],
                                    "typeProperties": {
                                        "variableName": "ListDBconfigTriggers",
                                        "value": {
                                            "value": "@item().ADFTriggerName",
                                            "type": "Expression"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "name": "Collect ADF Triggers While Next Link Exists",
                        "type": "Until",
                        "dependsOn": [
                            {
                                "activity": "Set_GetADFTriggerURL",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "expression": {
                                "value": "@equals(variables('IsNextLinkPresent'), false)",
                                "type": "Expression"
                            },
                            "activities": [
                                {
                                    "name": "Get ADF Triggers",
                                    "type": "WebActivity",
                                    "dependsOn": [],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "method": "GET",
                                        "headers": {},
                                        "url": {
                                            "value": "@variables('GetADFTriggersURL')",
                                            "type": "Expression"
                                        },
                                        "authentication": {
                                            "type": "MSI",
                                            "resource": {
                                                "value": "https://management.azure.com/",
                                                "type": "Expression"
                                            }
                                        }
                                    }
                                },
                                {
                                    "name": "CheckIfNextLinkExists",
                                    "type": "IfCondition",
                                    "dependsOn": [
                                        {
                                            "activity": "Get ADF Triggers",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "userProperties": [],
                                    "typeProperties": {
                                        "expression": {
                                            "value": "@contains(activity('Get ADF Triggers').output, 'nextLink')",
                                            "type": "Expression"
                                        },
                                        "ifFalseActivities": [
                                            {
                                                "name": "Set_ IsNextLinkPresent_False",
                                                "type": "SetVariable",
                                                "dependsOn": [],
                                                "policy": {
                                                    "secureOutput": false,
                                                    "secureInput": false
                                                },
                                                "userProperties": [],
                                                "typeProperties": {
                                                    "variableName": "IsNextLinkPresent",
                                                    "value": false
                                                }
                                            }
                                        ],
                                        "ifTrueActivities": [
                                            {
                                                "name": "Update GetTriggersURL",
                                                "type": "SetVariable",
                                                "dependsOn": [],
                                                "policy": {
                                                    "secureOutput": false,
                                                    "secureInput": false
                                                },
                                                "userProperties": [],
                                                "typeProperties": {
                                                    "variableName": "GetADFTriggersURL",
                                                    "value": {
                                                        "value": "@activity('Get ADF Triggers').output.nextLink",
                                                        "type": "Expression"
                                                    }
                                                }
                                            }
                                        ]
                                    }
                                },
                                {
                                    "name": "SetTriggerList_IfNextLinkNotExists",
                                    "type": "SetVariable",
                                    "dependsOn": [
                                        {
                                            "activity": "CheckIfNextLinkExists",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "variableName": "ListADFTriggersTemp",
                                        "value": {
                                            "value": "@union(activity('Get ADF Triggers').output.value, variables('ADFTriggers'))",
                                            "type": "Expression"
                                        }
                                    }
                                },
                                {
                                    "name": "SetTemp_ListOfTriggers_copy1",
                                    "type": "SetVariable",
                                    "dependsOn": [
                                        {
                                            "activity": "SetTriggerList_IfNextLinkNotExists",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "variableName": "ADFTriggers",
                                        "value": {
                                            "value": "@variables('ListADFTriggersTemp')",
                                            "type": "Expression"
                                        }
                                    }
                                }
                            ],
                            "timeout": "0.12:00:00"
                        }
                    },
                    {
                        "name": "Set_GetADFTriggerURL",
                        "type": "SetVariable",
                        "dependsOn": [
                            {
                                "activity": "Lookup FwkTrigger Table",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "variableName": "GetADFTriggersURL",
                            "value": {
                                "value": "@activity('Lookup FwkTrigger Table').output.value[0].GetTriggers",
                                "type": "Expression"
                            }
                        }
                    },
                    {
                        "name": "Collect ToBeProcessed DBconfig Triggers",
                        "type": "ForEach",
                        "dependsOn": [
                            {
                                "activity": "List ADF Triggers by Name",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "items": {
                                "value": "@activity('Lookup FwkTrigger Table').output.value",
                                "type": "Expression"
                            },
                            "activities": [
                                {
                                    "name": "If ToBeProcessed",
                                    "type": "IfCondition",
                                    "dependsOn": [],
                                    "userProperties": [],
                                    "typeProperties": {
                                        "expression": {
                                            "value": "@item().ToBeProcessed",
                                            "type": "Expression"
                                        },
                                        "ifTrueActivities": [
                                            {
                                                "name": "Append DBconfig Trigger",
                                                "type": "AppendVariable",
                                                "dependsOn": [],
                                                "userProperties": [],
                                                "typeProperties": {
                                                    "variableName": "ToBeProcessedTriggers",
                                                    "value": {
                                                        "value": "@item()",
                                                        "type": "Expression"
                                                    }
                                                }
                                            }
                                        ]
                                    }
                                }
                            ]
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {}
                },
                "parameters": {
                    "AzureRestApiUrl": {
                        "type": "string",
                        "defaultValue": "[parameters('PL_TriggerCreation_properties_parameters_AzureRestApiUrl_defaultValue')]"
                    }
                },
                "variables": {
                    "ListAdfTriggers": {
                        "type": "Array"
                    },
                    "ADFTriggers": {
                        "type": "Array",
                        "defaultValue": []
                    },
                    "ListDBconfigTriggers": {
                        "type": "Array"
                    },
                    "IsNextLinkPresent": {
                        "type": "Boolean",
                        "defaultValue": true
                    },
                    "GetADFTriggersURL": {
                        "type": "String"
                    },
                    "ListADFTriggersTemp": {
                        "type": "Array"
                    },
                    "ToBeProcessedTriggers": {
                        "type": "Array",
                        "defaultValue": []
                    }
                },
                "annotations": [],
                "lastPublishTime": "2023-07-06T08:29:13Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/datasets/DS_SQL_Configuration')]",
                "[concat(variables('factoryId'), '/linkedServices/LS_configurationDB')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/PL_TriggerWorkflow')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "TriggerWorkflow",
                        "description": "Make POST to workflow URL and send request body",
                        "type": "WebActivity",
                        "dependsOn": [
                            {
                                "activity": "sp_FwkLogInsert",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "0.12:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "method": "POST",
                            "headers": {},
                            "url": {
                                "value": "@pipeline().parameters.Workflow['URL']",
                                "type": "Expression"
                            },
                            "body": {
                                "value": "@json(pipeline().parameters.Workflow['RequestBody'])",
                                "type": "Expression"
                            }
                        }
                    },
                    {
                        "name": "sp_FwkLogInsert",
                        "description": "Executes the SP spi_FwkLogInsert to insert record into FwkLog table with the execution module information by pipeline id and with null status.",
                        "type": "SqlServerStoredProcedure",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "storedProcedureName": "[[dbo].[spi_FwkLogInsert]",
                            "storedProcedureParameters": {
                                "EntRunId": {
                                    "value": {
                                        "value": "@pipeline().parameters.EntRunId",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                },
                                "Module": {
                                    "value": {
                                        "value": "@concat(pipeline().parameters.Module, ' > ', pipeline().parameters.Workflow['WorkflowId']\n)",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                },
                                "ModuleRunId": {
                                    "value": {
                                        "value": "@pipeline().RunId",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                },
                                "StartDate": {
                                    "value": {
                                        "value": "@formatdatetime(pipeline().TriggerTime)",
                                        "type": "Expression"
                                    },
                                    "type": "DateTime"
                                },
                                "ADFTriggerName": {
                                    "value": null,
                                    "type": "String"
                                }
                            }
                        },
                        "linkedServiceName": {
                            "referenceName": "LS_configurationDB",
                            "type": "LinkedServiceReference"
                        }
                    },
                    {
                        "name": "sp_UpdatePreTransformationExecutionLog_failed",
                        "description": "Executes the SP spu_FwkLogUpdate to update the record created by the ‘InsertIntoFwkLog’ activity in the table ‘FwkLog’ by updating the columns ‘PipelineStatus’ to ‘Success’.",
                        "type": "SqlServerStoredProcedure",
                        "dependsOn": [
                            {
                                "activity": "TriggerWorkflow",
                                "dependencyConditions": [
                                    "Failed"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "storedProcedureName": "[[dbo].[spu_FwkLogUpdate]",
                            "storedProcedureParameters": {
                                "ModuleRunId": {
                                    "value": {
                                        "value": "@pipeline().RunId",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                },
                                "PipelineStatus": {
                                    "value": {
                                        "value": "Failed",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                },
                                "JobRunUrl": {
                                    "value": null,
                                    "type": "String"
                                },
                                "ErrorMessage": {
                                    "value": null,
                                    "type": "String"
                                }
                            }
                        },
                        "linkedServiceName": {
                            "referenceName": "LS_configurationDB",
                            "type": "LinkedServiceReference"
                        }
                    },
                    {
                        "name": "sp_UpdatePreTransformationExecutionLog_failed_copy1",
                        "description": "Executes the SP spu_FwkLogUpdate to update the record created by the ‘InsertIntoFwkLog’ activity in the table ‘FwkLog’ by updating the columns ‘PipelineStatus’ to ‘Success’.",
                        "type": "SqlServerStoredProcedure",
                        "dependsOn": [
                            {
                                "activity": "TriggerWorkflow",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "storedProcedureName": "[[dbo].[spu_FwkLogUpdate]",
                            "storedProcedureParameters": {
                                "ModuleRunId": {
                                    "value": {
                                        "value": "@pipeline().RunId",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                },
                                "PipelineStatus": {
                                    "value": {
                                        "value": "Triggered",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                },
                                "JobRunUrl": {
                                    "value": null,
                                    "type": "String"
                                },
                                "ErrorMessage": {
                                    "value": null,
                                    "type": "String"
                                }
                            }
                        },
                        "linkedServiceName": {
                            "referenceName": "LS_configurationDB",
                            "type": "LinkedServiceReference"
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {}
                },
                "parameters": {
                    "Workflow": {
                        "type": "object"
                    },
                    "EntRunId": {
                        "type": "string"
                    },
                    "Module": {
                        "type": "string"
                    }
                },
                "folder": {
                    "name": "99 Utils"
                },
                "annotations": []
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/LS_configurationDB')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/DS_ADB_Delta')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "LS_ADB",
                    "type": "LinkedServiceReference"
                },
                "annotations": [],
                "type": "AzureDatabricksDeltaLakeDataset",
                "typeProperties": {},
                "schema": []
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/LS_ADB')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/DS_ADLS_BIN_File')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "LS_adls",
                    "type": "LinkedServiceReference",
                    "parameters": {
                        "InstanceURL": "@dataset().InstanceURL"
                    }
                },
                "parameters": {
                    "InstanceURL": {
                        "type": "string"
                    },
                    "FullPath": {
                        "type": "string"
                    },
                    "FileName": {
                        "type": "string"
                    }
                },
                "folder": {
                    "name": "01 Ingestion Module DS"
                },
                "annotations": [],
                "type": "Binary",
                "typeProperties": {
                    "location": {
                        "type": "AzureBlobFSLocation",
                        "fileName": {
                            "value": "@dataset().FileName",
                            "type": "Expression"
                        },
                        "folderPath": {
                            "value": "@replace(concat('$', dataset().FullPath), concat('$', split(dataset().FullPath, '/')[0], '/'), '')",
                            "type": "Expression"
                        },
                        "fileSystem": {
                            "value": "@split(dataset().FullPath, '/')[0]",
                            "type": "Expression"
                        }
                    }
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/LS_adls')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/DS_ADLS_BIN_File_Export')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "LS_adls",
                    "type": "LinkedServiceReference",
                    "parameters": {
                        "InstanceURL": {
                            "value": "@dataset().InstanceURL",
                            "type": "Expression"
                        }
                    }
                },
                "parameters": {
                    "InstanceURL": {
                        "type": "string"
                    },
                    "FullPath": {
                        "type": "string"
                    }
                },
                "folder": {
                    "name": "03 Export Module DS"
                },
                "annotations": [],
                "type": "Binary",
                "typeProperties": {
                    "location": {
                        "type": "AzureBlobFSLocation",
                        "fileName": {
                            "value": "@dataset().FullPath",
                            "type": "Expression"
                        }
                    }
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/LS_adls')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/DS_ADLS_BIN_Folder')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "LS_adls",
                    "type": "LinkedServiceReference",
                    "parameters": {
                        "InstanceURL": "@dataset().InstanceURL"
                    }
                },
                "parameters": {
                    "InstanceURL": {
                        "type": "string"
                    },
                    "FullPath": {
                        "type": "string"
                    }
                },
                "folder": {
                    "name": "01 Ingestion Module DS"
                },
                "annotations": [],
                "type": "Binary",
                "typeProperties": {
                    "location": {
                        "type": "AzureBlobFSLocation",
                        "folderPath": {
                            "value": "@replace(concat('$', dataset().FullPath), concat('$', split(dataset().FullPath, '/')[0], '/'), '')",
                            "type": "Expression"
                        },
                        "fileSystem": {
                            "value": "@split(dataset().FullPath, '/')[0]",
                            "type": "Expression"
                        }
                    }
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/LS_adls')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/DS_ADLS_CSV_File_Export')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "LS_adls",
                    "type": "LinkedServiceReference",
                    "parameters": {
                        "InstanceURL": {
                            "value": "@dataset().FwkItem['InstanceURL']",
                            "type": "Expression"
                        }
                    }
                },
                "parameters": {
                    "FwkItem": {
                        "type": "array"
                    }
                },
                "folder": {
                    "name": "03 Export Module DS"
                },
                "annotations": [],
                "type": "DelimitedText",
                "typeProperties": {
                    "location": {
                        "type": "AzureBlobFSLocation",
                        "fileName": {
                            "value": "@split(dataset().FwkItem['Path'], '/')[2]",
                            "type": "Expression"
                        },
                        "folderPath": {
                            "value": "@split(dataset().FwkItem['Path'], '/')[1]",
                            "type": "Expression"
                        },
                        "fileSystem": {
                            "value": "@split(dataset().FwkItem['Path'], '/')[0]",
                            "type": "Expression"
                        }
                    },
                    "columnDelimiter": {
                        "value": "@{if(contains(json(dataset().FwkItem['Params']), 'columnDelimiter'), json(dataset().FwkItem['Params']).columnDelimiter, ',')}",
                        "type": "Expression"
                    },
                    "rowDelimiter": {
                        "value": "@{if(contains(json(dataset().FwkItem['Params']), 'rowDelimiter'), json(dataset().FwkItem['Params']).rowDelimiter, '\n')}",
                        "type": "Expression"
                    },
                    "compressionCodec": {
                        "value": "@{if(\n    contains(json(dataset().FwkItem['Params']), 'compressionType'),\n    json(dataset().FwkItem['Params']).compressionType,\n    'None'\n)}",
                        "type": "Expression"
                    },
                    "compressionLevel": {
                        "value": "@{if(\n    contains(json(dataset().FwkItem['Params']), 'compressionLevel'),\n    json(dataset().FwkItem['Params']).compressionLevel,\n    ''\n)}",
                        "type": "Expression"
                    },
                    "encodingName": {
                        "value": "@{if(\n    contains(json(dataset().FwkItem['Params']), 'encodingName'),\n    json(dataset().FwkItem['Params']).encodingName,\n    'UTF-8'\n)}",
                        "type": "Expression"
                    },
                    "escapeChar": {
                        "value": "@{if(\n    contains(json(dataset().FwkItem['Params']), 'escapeChar'),\n    json(dataset().FwkItem['Params']).escapeChar,\n    '\\'\n)}",
                        "type": "Expression"
                    },
                    "firstRowAsHeader": {
                        "value": "@json(dataset().FwkItem['Params']).header",
                        "type": "Expression"
                    },
                    "nullValue": {
                        "value": "@{if(\n    contains(json(dataset().FwkItem['Params']), 'nullValue'),\n    json(dataset().FwkItem['Params']).nullValue,\n    ''\n)}",
                        "type": "Expression"
                    },
                    "quoteChar": {
                        "value": "@{if(\n    contains(json(dataset().FwkItem['Params']), 'quoteChar'),\n    json(dataset().FwkItem['Params']).quoteChar,\n    '\"'\n)}",
                        "type": "Expression"
                    }
                },
                "schema": []
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/LS_adls')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/DS_ADLS_CSV_Source')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "LS_adls",
                    "type": "LinkedServiceReference",
                    "parameters": {
                        "InstanceURL": {
                            "value": "@dataset().FwkItem['InstanceURL']",
                            "type": "Expression"
                        }
                    }
                },
                "parameters": {
                    "FwkItem": {
                        "type": "array"
                    },
                    "ds_inputFileName": {
                        "type": "string"
                    },
                    "ds_inputFilePath": {
                        "type": "string"
                    }
                },
                "folder": {
                    "name": "01 Ingestion Module DS"
                },
                "annotations": [],
                "type": "DelimitedText",
                "typeProperties": {
                    "location": {
                        "type": "AzureBlobFSLocation",
                        "fileName": {
                            "value": "@dataset().ds_inputFileName",
                            "type": "Expression"
                        },
                        "folderPath": {
                            "value": "@replace(concat('$', dataset().ds_inputFilePath), concat('$', split(dataset().ds_inputFilePath, '/')[0], '/'), '')",
                            "type": "Expression"
                        },
                        "fileSystem": {
                            "value": "@split(dataset().ds_inputFilePath, '/')[0]",
                            "type": "Expression"
                        }
                    },
                    "columnDelimiter": {
                        "value": "@json(dataset().FwkItem['Params']).columnDelimiter",
                        "type": "Expression"
                    },
                    "rowDelimiter": {
                        "value": "@json(dataset().FwkItem['Params']).rowDelimiter",
                        "type": "Expression"
                    },
                    "compressionCodec": {
                        "value": "@json(dataset().FwkItem['Params']).compressionType",
                        "type": "Expression"
                    },
                    "compressionLevel": {
                        "value": "@json(dataset().FwkItem['Params']).compressionLevel",
                        "type": "Expression"
                    },
                    "encodingName": {
                        "value": "@json(dataset().FwkItem['Params']).encodingName",
                        "type": "Expression"
                    },
                    "escapeChar": {
                        "value": "@json(dataset().FwkItem['Params']).escapeChar",
                        "type": "Expression"
                    },
                    "firstRowAsHeader": {
                        "value": "@json(dataset().FwkItem['Params']).firstRowAsHeader",
                        "type": "Expression"
                    },
                    "nullValue": {
                        "value": "@json(dataset().FwkItem['Params']).nullValue",
                        "type": "Expression"
                    },
                    "quoteChar": {
                        "value": "@json(dataset().FwkItem['Params']).quoteChar",
                        "type": "Expression"
                    }
                },
                "schema": []
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/LS_adls')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/DS_ADLS_Excel_Source')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "LS_adls",
                    "type": "LinkedServiceReference",
                    "parameters": {
                        "InstanceURL": {
                            "value": "@dataset().FwkItem['InstanceURL']",
                            "type": "Expression"
                        }
                    }
                },
                "parameters": {
                    "FwkItem": {
                        "type": "array"
                    },
                    "ds_inputFileName": {
                        "type": "string"
                    },
                    "ds_inputFilePath": {
                        "type": "string"
                    }
                },
                "folder": {
                    "name": "01 Ingestion Module DS"
                },
                "annotations": [],
                "type": "Excel",
                "typeProperties": {
                    "sheetName": {
                        "value": "@json(dataset().FwkItem['Params']).sheetName",
                        "type": "Expression"
                    },
                    "location": {
                        "type": "AzureBlobFSLocation",
                        "fileName": {
                            "value": "@dataset().ds_inputFileName",
                            "type": "Expression"
                        },
                        "folderPath": {
                            "value": "@replace(concat('$', dataset().ds_inputFilePath), concat('$', split(dataset().ds_inputFilePath, '/')[0], '/'), '')",
                            "type": "Expression"
                        },
                        "fileSystem": {
                            "value": "@split(dataset().ds_inputFilePath, '/')[0]",
                            "type": "Expression"
                        }
                    },
                    "range": {
                        "value": "@json(dataset().FwkItem['Params']).range",
                        "type": "Expression"
                    },
                    "firstRowAsHeader": {
                        "value": "@json(dataset().FwkItem['Params']).firstRowAsHeader",
                        "type": "Expression"
                    },
                    "nullValue": {
                        "value": "@json(dataset().FwkItem['Params']).nullValue",
                        "type": "Expression"
                    }
                },
                "schema": []
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/LS_adls')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/DS_ADLS_PRQ_Sink')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "LS_adls",
                    "type": "LinkedServiceReference",
                    "parameters": {
                        "InstanceURL": {
                            "value": "@dataset().InstanceURL",
                            "type": "Expression"
                        }
                    }
                },
                "parameters": {
                    "InstanceURL": {
                        "type": "string"
                    },
                    "FullPath": {
                        "type": "string"
                    }
                },
                "folder": {
                    "name": "01 Ingestion Module DS"
                },
                "annotations": [],
                "type": "Parquet",
                "typeProperties": {
                    "location": {
                        "type": "AzureBlobFSLocation",
                        "fileName": {
                            "value": "@replace(concat('$', dataset().FullPath), concat('$', split(dataset().FullPath, '/')[0], '/'), '')",
                            "type": "Expression"
                        },
                        "fileSystem": {
                            "value": "@split(dataset().FullPath, '/')[0]",
                            "type": "Expression"
                        }
                    },
                    "compressionCodec": "snappy"
                },
                "schema": []
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/LS_adls')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/DS_ADLS_XML_Source')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "LS_adls",
                    "type": "LinkedServiceReference",
                    "parameters": {
                        "InstanceURL": {
                            "value": "@dataset().FwkItem['InstanceURL']",
                            "type": "Expression"
                        }
                    }
                },
                "parameters": {
                    "FwkItem": {
                        "type": "array"
                    },
                    "ds_inputFileName": {
                        "type": "string"
                    },
                    "ds_inputFilePath": {
                        "type": "string"
                    }
                },
                "folder": {
                    "name": "01 Ingestion Module DS"
                },
                "annotations": [],
                "type": "Xml",
                "typeProperties": {
                    "location": {
                        "type": "AzureBlobFSLocation",
                        "fileName": {
                            "value": "@dataset().ds_inputFileName",
                            "type": "Expression"
                        },
                        "folderPath": {
                            "value": "@replace(concat('$', dataset().ds_inputFilePath), concat('$', split(dataset().ds_inputFilePath, '/')[0], '/'), '')",
                            "type": "Expression"
                        },
                        "fileSystem": {
                            "value": "@split(dataset().ds_inputFilePath, '/')[0]",
                            "type": "Expression"
                        }
                    },
                    "encodingName": {
                        "value": "@json(dataset().FwkItem['Params']).encodingName",
                        "type": "Expression"
                    },
                    "nullValue": {
                        "value": "@json(dataset().FwkItem['Params']).nullValue",
                        "type": "Expression"
                    }
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/LS_adls')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/DS_CSV_Configuration')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "LS_adls",
                    "type": "LinkedServiceReference",
                    "parameters": {
                        "InstanceURL": {
                            "value": "@dataset().InstanceURL",
                            "type": "Expression"
                        }
                    }
                },
                "parameters": {
                    "InstanceURL": {
                        "type": "string"
                    },
                    "FullPath": {
                        "type": "string"
                    },
                    "FileName": {
                        "type": "string"
                    }
                },
                "folder": {
                    "name": "01 Ingestion Module DS"
                },
                "annotations": [],
                "type": "DelimitedText",
                "typeProperties": {
                    "location": {
                        "type": "AzureBlobFSLocation",
                        "fileName": {
                            "value": "@dataset().FileName",
                            "type": "Expression"
                        },
                        "folderPath": {
                            "value": "@replace(concat('$', dataset().FullPath), concat('$', split(dataset().FullPath, '/')[0], '/'), '')",
                            "type": "Expression"
                        },
                        "fileSystem": {
                            "value": "@split(dataset().FullPath, '/')[0]",
                            "type": "Expression"
                        }
                    },
                    "columnDelimiter": ",",
                    "escapeChar": "\\",
                    "firstRowAsHeader": true,
                    "quoteChar": "\""
                },
                "schema": []
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/LS_adls')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/DS_FileShare_BIN_File')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "LS_fileshare",
                    "type": "LinkedServiceReference",
                    "parameters": {
                        "InstanceURL": {
                            "value": "@dataset().FwkItem['InstanceURL']",
                            "type": "Expression"
                        },
                        "UserName": {
                            "value": "@dataset().FwkItem['UserName']",
                            "type": "Expression"
                        },
                        "SecretName": {
                            "value": "@dataset().FwkItem['SecretName']",
                            "type": "Expression"
                        }
                    }
                },
                "parameters": {
                    "FwkItem": {
                        "type": "array"
                    },
                    "ds_inputFileName": {
                        "type": "string"
                    },
                    "ds_inputFilePath": {
                        "type": "string"
                    }
                },
                "folder": {
                    "name": "01 Ingestion Module DS"
                },
                "annotations": [],
                "type": "Binary",
                "typeProperties": {
                    "location": {
                        "type": "FileServerLocation",
                        "fileName": {
                            "value": "@dataset().ds_inputFileName",
                            "type": "Expression"
                        },
                        "folderPath": {
                            "value": "@dataset().ds_inputFilePath",
                            "type": "Expression"
                        }
                    }
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/LS_fileshare')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/DS_FileShare_BIN_Folder')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "LS_fileshare",
                    "type": "LinkedServiceReference",
                    "parameters": {
                        "InstanceURL": {
                            "value": "@dataset().FwkItem['InstanceURL']",
                            "type": "Expression"
                        },
                        "UserName": {
                            "value": "@dataset().FwkItem['UserName']",
                            "type": "Expression"
                        },
                        "SecretName": {
                            "value": "@dataset().FwkItem['SecretName']",
                            "type": "Expression"
                        }
                    }
                },
                "parameters": {
                    "FwkItem": {
                        "type": "array"
                    },
                    "FwkPath": {
                        "type": "string"
                    }
                },
                "folder": {
                    "name": "01 Ingestion Module DS"
                },
                "annotations": [],
                "type": "Binary",
                "typeProperties": {
                    "location": {
                        "type": "FileServerLocation",
                        "folderPath": {
                            "value": "@dataset().FwkPath",
                            "type": "Expression"
                        }
                    }
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/LS_fileshare')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/DS_FileShare_Binary_Target')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "LS_fileshare",
                    "type": "LinkedServiceReference",
                    "parameters": {
                        "InstanceURL": {
                            "value": "@dataset().FwkItem['SinkInstanceURL']",
                            "type": "Expression"
                        },
                        "UserName": {
                            "value": "@dataset().FwkItem['UserName']",
                            "type": "Expression"
                        },
                        "SecretName": {
                            "value": "@dataset().FwkItem['SecretName']",
                            "type": "Expression"
                        }
                    }
                },
                "parameters": {
                    "FwkItem": {
                        "type": "array"
                    }
                },
                "folder": {
                    "name": "03 Export Module DS"
                },
                "annotations": [],
                "type": "Binary",
                "typeProperties": {
                    "location": {
                        "type": "FileServerLocation",
                        "fileName": {
                            "value": "@dataset().FwkItem['SinkPath']",
                            "type": "Expression"
                        }
                    }
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/LS_fileshare')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/DS_FileShare_CSV_Source')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "LS_fileshare",
                    "type": "LinkedServiceReference",
                    "parameters": {
                        "InstanceURL": {
                            "value": "@dataset().FwkItem['InstanceURL']",
                            "type": "Expression"
                        },
                        "UserName": {
                            "value": "@dataset().FwkItem['UserName']",
                            "type": "Expression"
                        },
                        "SecretName": {
                            "value": "@dataset().FwkItem['SecretName']",
                            "type": "Expression"
                        }
                    }
                },
                "parameters": {
                    "FwkItem": {
                        "type": "array"
                    },
                    "ds_inputFileName": {
                        "type": "string"
                    },
                    "ds_inputFilePath": {
                        "type": "string"
                    }
                },
                "folder": {
                    "name": "01 Ingestion Module DS"
                },
                "annotations": [],
                "type": "DelimitedText",
                "typeProperties": {
                    "location": {
                        "type": "FileServerLocation",
                        "fileName": {
                            "value": "@dataset().ds_inputFileName",
                            "type": "Expression"
                        },
                        "folderPath": {
                            "value": "@dataset().ds_inputFilePath",
                            "type": "Expression"
                        }
                    },
                    "columnDelimiter": {
                        "value": "@json(dataset().FwkItem['Params']).columnDelimiter",
                        "type": "Expression"
                    },
                    "rowDelimiter": {
                        "value": "@json(dataset().FwkItem['Params']).rowDelimiter",
                        "type": "Expression"
                    },
                    "compressionCodec": {
                        "value": "@json(dataset().FwkItem['Params']).compressionType",
                        "type": "Expression"
                    },
                    "compressionLevel": {
                        "value": "@json(dataset().FwkItem['Params']).compressionLevel",
                        "type": "Expression"
                    },
                    "encodingName": {
                        "value": "@json(dataset().FwkItem['Params']).encodingName",
                        "type": "Expression"
                    },
                    "escapeChar": {
                        "value": "@json(dataset().FwkItem['Params']).escapeChar",
                        "type": "Expression"
                    },
                    "firstRowAsHeader": {
                        "value": "@json(dataset().FwkItem['Params']).firstRowAsHeader",
                        "type": "Expression"
                    },
                    "nullValue": {
                        "value": "@json(dataset().FwkItem['Params']).nullValue",
                        "type": "Expression"
                    },
                    "quoteChar": {
                        "value": "@json(dataset().FwkItem['Params']).quoteChar",
                        "type": "Expression"
                    }
                },
                "schema": []
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/LS_fileshare')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/DS_FileShare_Excel_Source')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "LS_fileshare",
                    "type": "LinkedServiceReference",
                    "parameters": {
                        "InstanceURL": {
                            "value": "@dataset().FwkItem['InstanceURL']",
                            "type": "Expression"
                        },
                        "UserName": {
                            "value": "@dataset().FwkItem['UserName']",
                            "type": "Expression"
                        },
                        "SecretName": {
                            "value": "@dataset().FwkItem['SecretName']",
                            "type": "Expression"
                        }
                    }
                },
                "parameters": {
                    "FwkItem": {
                        "type": "array"
                    },
                    "ds_inputFileName": {
                        "type": "string"
                    },
                    "ds_inputFilePath": {
                        "type": "string"
                    }
                },
                "folder": {
                    "name": "01 Ingestion Module DS"
                },
                "annotations": [],
                "type": "Excel",
                "typeProperties": {
                    "sheetName": {
                        "value": "@json(dataset().FwkItem['Params']).sheetName",
                        "type": "Expression"
                    },
                    "location": {
                        "type": "FileServerLocation",
                        "fileName": {
                            "value": "@dataset().ds_inputFileName",
                            "type": "Expression"
                        },
                        "folderPath": {
                            "value": "@dataset().ds_inputFilePath",
                            "type": "Expression"
                        }
                    },
                    "range": {
                        "value": "@json(dataset().FwkItem['Params']).range",
                        "type": "Expression"
                    },
                    "firstRowAsHeader": {
                        "value": "@json(dataset().FwkItem['Params']).firstRowAsHeader",
                        "type": "Expression"
                    },
                    "nullValue": {
                        "value": "@json(dataset().FwkItem['Params']).nullValue",
                        "type": "Expression"
                    }
                },
                "schema": []
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/LS_fileshare')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/DS_FileShare_XML_Source')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "LS_fileshare",
                    "type": "LinkedServiceReference",
                    "parameters": {
                        "InstanceURL": {
                            "value": "@dataset().FwkItem['InstanceURL']",
                            "type": "Expression"
                        },
                        "UserName": {
                            "value": "@dataset().FwkItem['UserName']",
                            "type": "Expression"
                        },
                        "SecretName": {
                            "value": "@dataset().FwkItem['SecretName']",
                            "type": "Expression"
                        }
                    }
                },
                "parameters": {
                    "FwkItem": {
                        "type": "array"
                    },
                    "ds_inputFileName": {
                        "type": "string"
                    },
                    "ds_inputFilePath": {
                        "type": "string"
                    }
                },
                "folder": {
                    "name": "01 Ingestion Module DS"
                },
                "annotations": [],
                "type": "Xml",
                "typeProperties": {
                    "location": {
                        "type": "FileServerLocation",
                        "fileName": {
                            "value": "@dataset().ds_inputFileName",
                            "type": "Expression"
                        },
                        "folderPath": {
                            "value": "@dataset().ds_inputFilePath",
                            "type": "Expression"
                        }
                    },
                    "encodingName": {
                        "value": "@json(dataset().FwkItem['Params']).encodingName",
                        "type": "Expression"
                    },
                    "nullValue": {
                        "value": "@json(dataset().FwkItem['Params']).nullValue",
                        "type": "Expression"
                    }
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/LS_fileshare')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/DS_OData_Source')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "LS_odata",
                    "type": "LinkedServiceReference",
                    "parameters": {
                        "ServiceUrl": {
                            "value": "@dataset().FwkItem['InstanceURL']",
                            "type": "Expression"
                        },
                        "UserName": {
                            "value": "@dataset().FwkItem['UserName']",
                            "type": "Expression"
                        },
                        "SecretName": {
                            "value": "@dataset().FwkItem['SecretName']",
                            "type": "Expression"
                        }
                    }
                },
                "parameters": {
                    "FwkItem": {
                        "type": "array"
                    }
                },
                "folder": {
                    "name": "01 Ingestion Module DS"
                },
                "annotations": [],
                "type": "ODataResource",
                "schema": [],
                "typeProperties": {
                    "path": {
                        "value": "@dataset().FwkItem['EntityName']",
                        "type": "Expression"
                    }
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/LS_odata')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/DS_Oracle_Source')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "LS_oracledatabase",
                    "type": "LinkedServiceReference",
                    "parameters": {
                        "SecretName": "@dataset().FwkItem['SecretName']"
                    }
                },
                "parameters": {
                    "FwkItem": {
                        "type": "array"
                    }
                },
                "folder": {
                    "name": "01 Ingestion Module DS"
                },
                "annotations": [],
                "type": "OracleTable",
                "schema": [],
                "typeProperties": {
                    "schema": {
                        "value": "@dataset().FwkItem['SchemaName']",
                        "type": "Expression"
                    },
                    "table": {
                        "value": "@dataset().FwkItem['EntityName']",
                        "type": "Expression"
                    }
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/LS_oracledatabase')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/DS_Parquet_Configuration')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "LS_adls",
                    "type": "LinkedServiceReference",
                    "parameters": {
                        "InstanceURL": {
                            "value": "@dataset().InstanceURL",
                            "type": "Expression"
                        }
                    }
                },
                "parameters": {
                    "InstanceURL": {
                        "type": "string"
                    },
                    "FullPath": {
                        "type": "string"
                    },
                    "FolderName": {
                        "type": "string"
                    }
                },
                "annotations": [],
                "type": "Parquet",
                "typeProperties": {
                    "location": {
                        "type": "AzureBlobFSLocation",
                        "folderPath": {
                            "value": "@concat(replace(concat('$', dataset().FullPath), concat('$', split(dataset().FullPath, '/')[0], '/'), ''), '/',dataset().FolderName)",
                            "type": "Expression"
                        },
                        "fileSystem": {
                            "value": "@split(dataset().FullPath, '/')[0]",
                            "type": "Expression"
                        }
                    },
                    "compressionCodec": "snappy"
                },
                "schema": []
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/LS_adls')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/DS_SFTPArchive_BIN_File')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "LS_sftp",
                    "type": "LinkedServiceReference",
                    "parameters": {
                        "InstanceURL": {
                            "value": "@dataset().FwkItem['ArchivalInstanceUrl']",
                            "type": "Expression"
                        },
                        "UserName": {
                            "value": "@dataset().FwkItem['ArchivalUserName']",
                            "type": "Expression"
                        },
                        "SecretName": {
                            "value": "@dataset().FwkItem['ArchivalSecretName']",
                            "type": "Expression"
                        }
                    }
                },
                "parameters": {
                    "FwkItem": {
                        "type": "array"
                    },
                    "ds_inputFileName": {
                        "type": "string"
                    },
                    "ds_inputFilePath": {
                        "type": "string"
                    }
                },
                "folder": {
                    "name": "01 Ingestion Module DS"
                },
                "annotations": [],
                "type": "Binary",
                "typeProperties": {
                    "location": {
                        "type": "SftpLocation",
                        "fileName": {
                            "value": "@dataset().ds_inputFileName",
                            "type": "Expression"
                        },
                        "folderPath": {
                            "value": "@dataset().ds_inputFilePath",
                            "type": "Expression"
                        }
                    }
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/LS_sftp')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/DS_SFTP_BIN_File')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "LS_sftp",
                    "type": "LinkedServiceReference",
                    "parameters": {
                        "InstanceURL": {
                            "value": "@dataset().FwkItem['InstanceURL']",
                            "type": "Expression"
                        },
                        "UserName": {
                            "value": "@dataset().FwkItem['UserName']",
                            "type": "Expression"
                        },
                        "SecretName": {
                            "value": "@dataset().FwkItem['SecretName']",
                            "type": "Expression"
                        }
                    }
                },
                "parameters": {
                    "FwkItem": {
                        "type": "array"
                    },
                    "ds_inputFileName": {
                        "type": "string"
                    },
                    "ds_inputFilePath": {
                        "type": "string"
                    }
                },
                "folder": {
                    "name": "01 Ingestion Module DS"
                },
                "annotations": [],
                "type": "Binary",
                "typeProperties": {
                    "location": {
                        "type": "SftpLocation",
                        "fileName": {
                            "value": "@dataset().ds_inputFileName",
                            "type": "Expression"
                        },
                        "folderPath": {
                            "value": "@dataset().ds_inputFilePath",
                            "type": "Expression"
                        }
                    }
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/LS_sftp')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/DS_SFTP_BIN_Folder')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "LS_sftp",
                    "type": "LinkedServiceReference",
                    "parameters": {
                        "InstanceURL": {
                            "value": "@dataset().FwkItem['InstanceURL']",
                            "type": "Expression"
                        },
                        "UserName": {
                            "value": "@dataset().FwkItem['UserName']",
                            "type": "Expression"
                        },
                        "SecretName": {
                            "value": "@dataset().FwkItem['SecretName']",
                            "type": "Expression"
                        }
                    }
                },
                "parameters": {
                    "FwkItem": {
                        "type": "array"
                    },
                    "FwkPath": {
                        "type": "string"
                    }
                },
                "folder": {
                    "name": "01 Ingestion Module DS"
                },
                "annotations": [],
                "type": "Binary",
                "typeProperties": {
                    "location": {
                        "type": "SftpLocation",
                        "folderPath": {
                            "value": "@dataset().FwkPath",
                            "type": "Expression"
                        }
                    }
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/LS_sftp')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/DS_SFTP_Binary_Target')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "LS_sftp",
                    "type": "LinkedServiceReference",
                    "parameters": {
                        "InstanceURL": {
                            "value": "@dataset().FwkItem['SinkInstanceURL']",
                            "type": "Expression"
                        },
                        "UserName": {
                            "value": "@dataset().FwkItem['UserName']",
                            "type": "Expression"
                        },
                        "SecretName": {
                            "value": "@dataset().FwkItem['SecretName']",
                            "type": "Expression"
                        }
                    }
                },
                "parameters": {
                    "FwkItem": {
                        "type": "array"
                    }
                },
                "folder": {
                    "name": "03 Export Module DS"
                },
                "annotations": [],
                "type": "Binary",
                "typeProperties": {
                    "location": {
                        "type": "SftpLocation",
                        "fileName": {
                            "value": "@dataset().FwkItem['SinkPath']",
                            "type": "Expression"
                        }
                    }
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/LS_sftp')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/DS_SFTP_CSV_Source')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "LS_sftp",
                    "type": "LinkedServiceReference",
                    "parameters": {
                        "InstanceURL": {
                            "value": "@dataset().FwkItem['InstanceURL']",
                            "type": "Expression"
                        },
                        "UserName": {
                            "value": "@dataset().FwkItem['UserName']",
                            "type": "Expression"
                        },
                        "SecretName": {
                            "value": "@dataset().FwkItem['SecretName']",
                            "type": "Expression"
                        }
                    }
                },
                "parameters": {
                    "FwkItem": {
                        "type": "array"
                    },
                    "ds_inputFileName": {
                        "type": "string"
                    },
                    "ds_inputFilePath": {
                        "type": "string"
                    }
                },
                "folder": {
                    "name": "01 Ingestion Module DS"
                },
                "annotations": [],
                "type": "DelimitedText",
                "typeProperties": {
                    "location": {
                        "type": "SftpLocation",
                        "fileName": {
                            "value": "@dataset().ds_inputFileName",
                            "type": "Expression"
                        },
                        "folderPath": {
                            "value": "@dataset().ds_inputFilePath",
                            "type": "Expression"
                        }
                    },
                    "columnDelimiter": {
                        "value": "@json(dataset().FwkItem['Params']).columnDelimiter",
                        "type": "Expression"
                    },
                    "rowDelimiter": {
                        "value": "@json(dataset().FwkItem['Params']).rowDelimiter",
                        "type": "Expression"
                    },
                    "compressionCodec": {
                        "value": "@json(dataset().FwkItem['Params']).compressionType",
                        "type": "Expression"
                    },
                    "compressionLevel": {
                        "value": "@json(dataset().FwkItem['Params']).compressionLevel",
                        "type": "Expression"
                    },
                    "encodingName": {
                        "value": "@json(dataset().FwkItem['Params']).encodingName",
                        "type": "Expression"
                    },
                    "escapeChar": {
                        "value": "@json(dataset().FwkItem['Params']).escapeChar",
                        "type": "Expression"
                    },
                    "firstRowAsHeader": {
                        "value": "@json(dataset().FwkItem['Params']).firstRowAsHeader",
                        "type": "Expression"
                    },
                    "nullValue": {
                        "value": "@json(dataset().FwkItem['Params']).nullValue",
                        "type": "Expression"
                    },
                    "quoteChar": {
                        "value": "@json(dataset().FwkItem['Params']).quoteChar",
                        "type": "Expression"
                    }
                },
                "schema": []
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/LS_sftp')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/DS_SFTP_Excel_Source')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "LS_sftp",
                    "type": "LinkedServiceReference",
                    "parameters": {
                        "InstanceURL": {
                            "value": "@dataset().FwkItem['InstanceURL']",
                            "type": "Expression"
                        },
                        "UserName": {
                            "value": "@dataset().FwkItem['UserName']",
                            "type": "Expression"
                        },
                        "SecretName": {
                            "value": "@dataset().FwkItem['SecretName']",
                            "type": "Expression"
                        }
                    }
                },
                "parameters": {
                    "FwkItem": {
                        "type": "array"
                    },
                    "ds_inputFileName": {
                        "type": "string"
                    },
                    "ds_inputFilePath": {
                        "type": "string"
                    }
                },
                "folder": {
                    "name": "01 Ingestion Module DS"
                },
                "annotations": [],
                "type": "Excel",
                "typeProperties": {
                    "sheetName": {
                        "value": "@json(dataset().FwkItem['Params']).sheetName",
                        "type": "Expression"
                    },
                    "location": {
                        "type": "SftpLocation",
                        "fileName": {
                            "value": "@dataset().ds_inputFileName",
                            "type": "Expression"
                        },
                        "folderPath": {
                            "value": "@dataset().ds_inputFilePath",
                            "type": "Expression"
                        }
                    },
                    "range": {
                        "value": "@json(dataset().FwkItem['Params']).range",
                        "type": "Expression"
                    },
                    "firstRowAsHeader": {
                        "value": "@json(dataset().FwkItem['Params']).firstRowAsHeader",
                        "type": "Expression"
                    },
                    "nullValue": {
                        "value": "@json(dataset().FwkItem['Params']).nullValue",
                        "type": "Expression"
                    }
                },
                "schema": []
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/LS_sftp')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/DS_SFTP_XML_Source')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "LS_sftp",
                    "type": "LinkedServiceReference",
                    "parameters": {
                        "InstanceURL": {
                            "value": "@dataset().FwkItem['InstanceURL']",
                            "type": "Expression"
                        },
                        "UserName": {
                            "value": "@dataset().FwkItem['UserName']",
                            "type": "Expression"
                        },
                        "SecretName": {
                            "value": "@dataset().FwkItem['SecretName']",
                            "type": "Expression"
                        }
                    }
                },
                "parameters": {
                    "FwkItem": {
                        "type": "array"
                    },
                    "ds_inputFileName": {
                        "type": "string"
                    },
                    "ds_inputFilePath": {
                        "type": "string"
                    }
                },
                "folder": {
                    "name": "01 Ingestion Module DS"
                },
                "annotations": [],
                "type": "Xml",
                "typeProperties": {
                    "location": {
                        "type": "SftpLocation",
                        "fileName": {
                            "value": "@dataset().ds_inputFileName",
                            "type": "Expression"
                        },
                        "folderPath": {
                            "value": "@dataset().ds_inputFilePath",
                            "type": "Expression"
                        }
                    },
                    "encodingName": {
                        "value": "@json(dataset().FwkItem['Params']).encodingName",
                        "type": "Expression"
                    },
                    "nullValue": {
                        "value": "@json(dataset().FwkItem['Params']).nullValue",
                        "type": "Expression"
                    }
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/LS_sftp')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/DS_SQLOnPrem_Source')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "LS_sqlonpremdatabase",
                    "type": "LinkedServiceReference",
                    "parameters": {
                        "SecretName": {
                            "value": "@dataset().FwkItem['SecretName']",
                            "type": "Expression"
                        }
                    }
                },
                "parameters": {
                    "FwkItem": {
                        "type": "array"
                    }
                },
                "folder": {
                    "name": "01 Ingestion Module DS"
                },
                "annotations": [],
                "type": "SqlServerTable",
                "schema": [],
                "typeProperties": {
                    "schema": {
                        "value": "@dataset().FwkItem['SchemaName']",
                        "type": "Expression"
                    },
                    "table": {
                        "value": "@dataset().FwkItem['EntityName']",
                        "type": "Expression"
                    }
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/LS_sqlonpremdatabase')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/DS_SQL_Configuration')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "LS_configurationDB",
                    "type": "LinkedServiceReference"
                },
                "folder": {
                    "name": "01 Ingestion Module DS"
                },
                "annotations": [],
                "type": "AzureSqlTable",
                "schema": [
                    {
                        "name": "DtLogId",
                        "type": "bigint",
                        "precision": 19
                    },
                    {
                        "name": "DtConfigId",
                        "type": "bigint",
                        "precision": 19
                    },
                    {
                        "name": "DtOutputId",
                        "type": "bigint",
                        "precision": 19
                    },
                    {
                        "name": "EntRunId",
                        "type": "varchar"
                    },
                    {
                        "name": "DtRunId",
                        "type": "varchar"
                    },
                    {
                        "name": "DtStatus",
                        "type": "varchar"
                    },
                    {
                        "name": "PipelineTriggerDt",
                        "type": "datetime",
                        "precision": 23,
                        "scale": 3
                    },
                    {
                        "name": "LastUpdate",
                        "type": "datetime",
                        "precision": 23,
                        "scale": 3
                    },
                    {
                        "name": "CreatedBy",
                        "type": "varchar"
                    }
                ],
                "typeProperties": {
                    "schema": "dbo",
                    "table": "DvLog"
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/LS_configurationDB')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/DS_SQL_Configuration_all')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "LS_configurationDB",
                    "type": "LinkedServiceReference"
                },
                "parameters": {
                    "FileName": {
                        "type": "string"
                    }
                },
                "folder": {
                    "name": "01 Ingestion Module DS"
                },
                "annotations": [],
                "type": "AzureSqlTable",
                "schema": [
                    {
                        "name": "FwkEntityId",
                        "type": "varchar"
                    },
                    {
                        "name": "FwkLinkedServiceId",
                        "type": "varchar"
                    },
                    {
                        "name": "Path",
                        "type": "varchar"
                    },
                    {
                        "name": "Format",
                        "type": "varchar"
                    },
                    {
                        "name": "RelativeURL",
                        "type": "varchar"
                    },
                    {
                        "name": "Header01",
                        "type": "varchar"
                    },
                    {
                        "name": "Header02",
                        "type": "varchar"
                    },
                    {
                        "name": "LastUpdate",
                        "type": "datetime",
                        "precision": 23,
                        "scale": 3
                    },
                    {
                        "name": "UpdatedBy",
                        "type": "varchar"
                    }
                ],
                "typeProperties": {
                    "schema": "dbo",
                    "table": {
                        "value": "@dataset().FileName",
                        "type": "Expression"
                    }
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/LS_configurationDB')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/DS_SQL_Sink')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "LS_sqldatabase",
                    "type": "LinkedServiceReference",
                    "parameters": {
                        "SecretName": "@dataset().FwkItem['SecretName']"
                    }
                },
                "parameters": {
                    "FwkItem": {
                        "type": "array"
                    }
                },
                "folder": {
                    "name": "03 Export Module DS"
                },
                "annotations": [],
                "type": "AzureSqlTable",
                "schema": [],
                "typeProperties": {
                    "schema": {
                        "value": "@dataset().FwkItem['SinkSchemaName']",
                        "type": "Expression"
                    },
                    "table": {
                        "value": "@dataset().FwkItem['SinkEntityName']",
                        "type": "Expression"
                    }
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/LS_sqldatabase')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/DS_SQL_Source')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "LS_sqldatabase",
                    "type": "LinkedServiceReference",
                    "parameters": {
                        "SecretName": "@dataset().FwkItem['SecretName']"
                    }
                },
                "parameters": {
                    "FwkItem": {
                        "type": "array"
                    }
                },
                "folder": {
                    "name": "01 Ingestion Module DS"
                },
                "annotations": [],
                "type": "AzureSqlTable",
                "schema": [],
                "typeProperties": {
                    "schema": {
                        "value": "@dataset().FwkItem['SchemaName']",
                        "type": "Expression"
                    },
                    "table": {
                        "value": "@dataset().FwkItem['EntityName']",
                        "type": "Expression"
                    }
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/LS_sqldatabase')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/DS_Snowflake_Source')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "LS_snowflake",
                    "type": "LinkedServiceReference",
                    "parameters": {
                        "SecretName": {
                            "value": "@dataset().FwkItem['SecretName']",
                            "type": "Expression"
                        },
                        "ConnectionString": {
                            "value": "@dataset().FwkItem['InstanceURL']",
                            "type": "Expression"
                        },
                        "UserName": {
                            "value": "@dataset().FwkItem['UserName']",
                            "type": "Expression"
                        }
                    }
                },
                "parameters": {
                    "FwkItem": {
                        "type": "array"
                    }
                },
                "folder": {
                    "name": "01 Ingestion Module DS"
                },
                "annotations": [],
                "type": "OdbcTable",
                "schema": [],
                "typeProperties": {
                    "tableName": {
                        "value": "@concat(dataset().FwkItem['SchemaName'],'.',\ndataset().FwkItem['EntityName'])",
                        "type": "Expression"
                    }
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/LS_snowflake')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/DelimitedText1')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "ADLS",
                    "type": "LinkedServiceReference"
                },
                "annotations": [],
                "type": "DelimitedText",
                "typeProperties": {
                    "location": {
                        "type": "AzureBlobFSLocation"
                    },
                    "columnDelimiter": ",",
                    "escapeChar": "\\",
                    "firstRowAsHeader": true,
                    "quoteChar": "\""
                },
                "schema": []
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/ADLS')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/Json1')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "LadeStationen",
                    "type": "LinkedServiceReference"
                },
                "annotations": [],
                "type": "Json",
                "typeProperties": {
                    "location": {
                        "type": "HttpServerLocation"
                    }
                },
                "schema": {}
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/LadeStationen')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/ADLS')]",
            "type": "Microsoft.DataFactory/factories/linkedServices",
            "apiVersion": "2018-06-01",
            "properties": {
                "annotations": [],
                "type": "AzureBlobFS",
                "typeProperties": {
                    "url": "[parameters('ADLS_properties_typeProperties_url')]",
                    "accountKey": {
                        "type": "SecureString",
                        "value": "[parameters('ADLS_accountKey')]"
                    }
                }
            },
            "dependsOn": []
        },
        {
            "name": "[concat(parameters('factoryName'), '/LS_ADB')]",
            "type": "Microsoft.DataFactory/factories/linkedServices",
            "apiVersion": "2018-06-01",
            "properties": {
                "annotations": [],
                "type": "AzureDatabricksDeltaLake",
                "typeProperties": {
                    "domain": "[parameters('LS_ADB_properties_typeProperties_domain')]",
                    "clusterId": "0214-064848-zi0j9fjh",
                    "workspaceResourceId": "[parameters('LS_ADB_properties_typeProperties_workspaceResourceId')]"
                }
            },
            "dependsOn": []
        },
        {
            "name": "[concat(parameters('factoryName'), '/LS_adls')]",
            "type": "Microsoft.DataFactory/factories/linkedServices",
            "apiVersion": "2018-06-01",
            "properties": {
                "parameters": {
                    "InstanceURL": {
                        "type": "string"
                    }
                },
                "annotations": [],
                "type": "AzureBlobFS",
                "typeProperties": {
                    "url": "[parameters('LS_adls_properties_typeProperties_url')]"
                }
            },
            "dependsOn": []
        },
        {
            "name": "[concat(parameters('factoryName'), '/LS_configurationDB')]",
            "type": "Microsoft.DataFactory/factories/linkedServices",
            "apiVersion": "2018-06-01",
            "properties": {
                "annotations": [],
                "type": "AzureSqlDatabase",
                "typeProperties": {
                    "connectionString": {
                        "type": "AzureKeyVaultSecret",
                        "store": {
                            "referenceName": "LS_keyvault",
                            "type": "LinkedServiceReference"
                        },
                        "secretName": "[parameters('LS_configurationDB_properties_typeProperties_connectionString_secretName')]"
                    }
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/LS_keyvault')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/LS_databricks')]",
            "type": "Microsoft.DataFactory/factories/linkedServices",
            "apiVersion": "2018-06-01",
            "properties": {
                "parameters": {
                    "ClusterId": {
                        "type": "string",
                        "defaultValue": "[parameters('LS_databricks_properties_parameters_ClusterId_defaultValue')]"
                    }
                },
                "annotations": [],
                "type": "AzureDatabricks",
                "typeProperties": {
                    "domain": "[parameters('LS_databricks_properties_typeProperties_domain')]",
                    "authentication": "MSI",
                    "workspaceResourceId": "[parameters('LS_databricks_properties_typeProperties_workspaceResourceId')]",
                    "existingClusterId": "[parameters('LS_databricks_properties_typeProperties_existingClusterId')]"
                }
            },
            "dependsOn": []
        },
        {
            "name": "[concat(parameters('factoryName'), '/LS_fileshare')]",
            "type": "Microsoft.DataFactory/factories/linkedServices",
            "apiVersion": "2018-06-01",
            "properties": {
                "parameters": {
                    "InstanceURL": {
                        "type": "string"
                    },
                    "UserName": {
                        "type": "string"
                    },
                    "SecretName": {
                        "type": "string"
                    }
                },
                "annotations": [],
                "type": "FileServer",
                "typeProperties": {
                    "host": "@{linkedService().InstanceURL}",
                    "userId": "@{linkedService().UserName}",
                    "password": {
                        "type": "AzureKeyVaultSecret",
                        "store": {
                            "referenceName": "LS_keyvault",
                            "type": "LinkedServiceReference"
                        },
                        "secretName": {
                            "value": "@linkedService().SecretName",
                            "type": "Expression"
                        }
                    }
                },
                "connectVia": {
                    "referenceName": "SHIR",
                    "type": "IntegrationRuntimeReference"
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/integrationRuntimes/SHIR')]",
                "[concat(variables('factoryId'), '/linkedServices/LS_keyvault')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/LS_keyvault')]",
            "type": "Microsoft.DataFactory/factories/linkedServices",
            "apiVersion": "2018-06-01",
            "properties": {
                "annotations": [],
                "type": "AzureKeyVault",
                "typeProperties": {
                    "baseUrl": "[parameters('LS_keyvault_properties_typeProperties_baseUrl')]"
                }
            },
            "dependsOn": []
        },
        {
            "name": "[concat(parameters('factoryName'), '/LS_odata')]",
            "type": "Microsoft.DataFactory/factories/linkedServices",
            "apiVersion": "2018-06-01",
            "properties": {
                "parameters": {
                    "ServiceUrl": {
                        "type": "string"
                    },
                    "UserName": {
                        "type": "string"
                    },
                    "SecretName": {
                        "type": "string"
                    }
                },
                "annotations": [],
                "type": "OData",
                "typeProperties": {
                    "url": "[parameters('LS_odata_properties_typeProperties_url')]",
                    "authenticationType": "Basic",
                    "userName": "@{linkedService().UserName}",
                    "password": {
                        "type": "AzureKeyVaultSecret",
                        "store": {
                            "referenceName": "LS_keyvault",
                            "type": "LinkedServiceReference"
                        },
                        "secretName": {
                            "value": "@linkedService().SecretName",
                            "type": "Expression"
                        }
                    }
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/LS_keyvault')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/LS_oracledatabase')]",
            "type": "Microsoft.DataFactory/factories/linkedServices",
            "apiVersion": "2018-06-01",
            "properties": {
                "parameters": {
                    "SecretName": {
                        "type": "string"
                    }
                },
                "annotations": [],
                "type": "Oracle",
                "typeProperties": {
                    "connectionString": {
                        "type": "AzureKeyVaultSecret",
                        "store": {
                            "referenceName": "LS_keyvault",
                            "type": "LinkedServiceReference"
                        },
                        "secretName": {
                            "value": "[parameters('LS_oracledatabase_properties_typeProperties_connectionString_secretName')]",
                            "type": "Expression"
                        }
                    }
                },
                "connectVia": {
                    "referenceName": "SHIR",
                    "type": "IntegrationRuntimeReference"
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/integrationRuntimes/SHIR')]",
                "[concat(variables('factoryId'), '/linkedServices/LS_keyvault')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/LS_sftp')]",
            "type": "Microsoft.DataFactory/factories/linkedServices",
            "apiVersion": "2018-06-01",
            "properties": {
                "parameters": {
                    "InstanceURL": {
                        "type": "string"
                    },
                    "UserName": {
                        "type": "string"
                    },
                    "SecretName": {
                        "type": "string"
                    }
                },
                "annotations": [],
                "type": "Sftp",
                "typeProperties": {
                    "host": "@{linkedService().InstanceURL}",
                    "port": 22,
                    "skipHostKeyValidation": true,
                    "authenticationType": "Basic",
                    "userName": "@{linkedService().UserName}",
                    "password": {
                        "type": "AzureKeyVaultSecret",
                        "store": {
                            "referenceName": "LS_keyvault",
                            "type": "LinkedServiceReference"
                        },
                        "secretName": {
                            "value": "@linkedService().SecretName",
                            "type": "Expression"
                        }
                    }
                },
                "connectVia": {
                    "referenceName": "SHIR",
                    "type": "IntegrationRuntimeReference"
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/integrationRuntimes/SHIR')]",
                "[concat(variables('factoryId'), '/linkedServices/LS_keyvault')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/LS_snowflake')]",
            "type": "Microsoft.DataFactory/factories/linkedServices",
            "apiVersion": "2018-06-01",
            "properties": {
                "parameters": {
                    "SecretName": {
                        "type": "string"
                    },
                    "ConnectionString": {
                        "type": "string"
                    },
                    "UserName": {
                        "type": "string"
                    }
                },
                "annotations": [],
                "type": "Odbc",
                "typeProperties": {
                    "connectionString": {
                        "type": "AzureKeyVaultSecret",
                        "store": {
                            "referenceName": "LS_keyvault",
                            "type": "LinkedServiceReference"
                        },
                        "secretName": {
                            "value": "[parameters('LS_snowflake_properties_typeProperties_connectionString_secretName')]",
                            "type": "Expression"
                        }
                    },
                    "authenticationType": "Basic",
                    "userName": "@{linkedService().UserName}",
                    "password": {
                        "type": "AzureKeyVaultSecret",
                        "store": {
                            "referenceName": "LS_keyvault",
                            "type": "LinkedServiceReference"
                        },
                        "secretName": {
                            "value": "@linkedService().SecretName",
                            "type": "Expression"
                        }
                    }
                },
                "connectVia": {
                    "referenceName": "SHIR",
                    "type": "IntegrationRuntimeReference"
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/integrationRuntimes/SHIR')]",
                "[concat(variables('factoryId'), '/linkedServices/LS_keyvault')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/LS_sqldatabase')]",
            "type": "Microsoft.DataFactory/factories/linkedServices",
            "apiVersion": "2018-06-01",
            "properties": {
                "parameters": {
                    "SecretName": {
                        "type": "string"
                    }
                },
                "annotations": [],
                "type": "AzureSqlDatabase",
                "typeProperties": {
                    "connectionString": {
                        "type": "AzureKeyVaultSecret",
                        "store": {
                            "referenceName": "LS_keyvault",
                            "type": "LinkedServiceReference"
                        },
                        "secretName": {
                            "value": "[parameters('LS_sqldatabase_properties_typeProperties_connectionString_secretName')]",
                            "type": "Expression"
                        }
                    }
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/LS_keyvault')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/LS_sqlonpremdatabase')]",
            "type": "Microsoft.DataFactory/factories/linkedServices",
            "apiVersion": "2018-06-01",
            "properties": {
                "parameters": {
                    "SecretName": {
                        "type": "string"
                    }
                },
                "annotations": [],
                "type": "SqlServer",
                "typeProperties": {
                    "connectionString": {
                        "type": "AzureKeyVaultSecret",
                        "store": {
                            "referenceName": "LS_keyvault",
                            "type": "LinkedServiceReference"
                        },
                        "secretName": {
                            "value": "[parameters('LS_sqlonpremdatabase_properties_typeProperties_connectionString_secretName')]",
                            "type": "Expression"
                        }
                    }
                },
                "connectVia": {
                    "referenceName": "SHIR",
                    "type": "IntegrationRuntimeReference"
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/integrationRuntimes/SHIR')]",
                "[concat(variables('factoryId'), '/linkedServices/LS_keyvault')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/LadeStationen')]",
            "type": "Microsoft.DataFactory/factories/linkedServices",
            "apiVersion": "2018-06-01",
            "properties": {
                "annotations": [],
                "type": "HttpServer",
                "typeProperties": {
                    "url": "[parameters('LadeStationen_properties_typeProperties_url')]",
                    "enableServerCertificateValidation": true,
                    "authenticationType": "Basic",
                    "userName": "girgin",
                    "password": {
                        "type": "SecureString",
                        "value": "[parameters('LadeStationen_password')]"
                    }
                }
            },
            "dependsOn": []
        },
        {
            "name": "[concat(parameters('factoryName'), '/MDMF_Execute_PL_TriggerCreation')]",
            "type": "Microsoft.DataFactory/factories/triggers",
            "apiVersion": "2018-06-01",
            "properties": {
                "annotations": [],
                "runtimeState": "Stopped",
                "pipelines": [
                    {
                        "pipelineReference": {
                            "referenceName": "PL_TriggerCreation",
                            "type": "PipelineReference"
                        },
                        "parameters": {}
                    }
                ],
                "type": "ScheduleTrigger",
                "typeProperties": {
                    "recurrence": {
                        "frequency": "Day",
                        "interval": 1,
                        "startTime": "2022-07-20T00:15:00Z",
                        "timeZone": "UTC",
                        "schedule": {
                            "minutes": [
                                0
                            ],
                            "hours": [
                                0
                            ]
                        }
                    }
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/pipelines/PL_TriggerCreation')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/SHIR')]",
            "type": "Microsoft.DataFactory/factories/integrationRuntimes",
            "apiVersion": "2018-06-01",
            "properties": {
                "type": "SelfHosted",
                "description": "Express-route connection set",
                "typeProperties": {
                    "linkedInfo": {
                        "resourceId": "[parameters('SHIR_properties_typeProperties_linkedInfo_resourceId')]",
                        "authorizationType": "Rbac"
                    }
                }
            },
            "dependsOn": []
        },
        {
            "name": "[concat(parameters('factoryName'), '/default')]",
            "type": "Microsoft.DataFactory/factories/managedVirtualNetworks",
            "apiVersion": "2018-06-01",
            "properties": {},
            "dependsOn": []
        }
    ]
}